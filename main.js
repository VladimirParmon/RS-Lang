/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var t={403:(t,e,i)=>{i.r(e),i.d(e,{default:()=>No});const n="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function s(t,e,i){const s=i||(t=>Array.prototype.slice.call(t));let o=!1,r=[];return function(...i){r=s(i),o||(o=!0,n.call(window,(()=>{o=!1,t.apply(e,r)})))}}const o=t=>"start"===t?"left":"end"===t?"right":"center",r=(t,e,i)=>"start"===t?e:"end"===t?i:(e+i)/2;function a(){}const l=function(){let t=0;return function(){return t++}}();function c(t){return null==t}function h(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.substr(0,7)&&"Array]"===e.substr(-6)}function d(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}const u=t=>("number"==typeof t||t instanceof Number)&&isFinite(+t);function g(t,e){return u(t)?t:e}function p(t,e){return void 0===t?e:t}const f=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function m(t,e,i){if(t&&"function"==typeof t.call)return t.apply(i,e)}function b(t,e,i,n){let s,o,r;if(h(t))if(o=t.length,n)for(s=o-1;s>=0;s--)e.call(i,t[s],s);else for(s=0;s<o;s++)e.call(i,t[s],s);else if(d(t))for(r=Object.keys(t),o=r.length,s=0;s<o;s++)e.call(i,t[r[s]],r[s])}function v(t,e){let i,n,s,o;if(!t||!e||t.length!==e.length)return!1;for(i=0,n=t.length;i<n;++i)if(s=t[i],o=e[i],s.datasetIndex!==o.datasetIndex||s.index!==o.index)return!1;return!0}function y(t){if(h(t))return t.map(y);if(d(t)){const e=Object.create(null),i=Object.keys(t),n=i.length;let s=0;for(;s<n;++s)e[i[s]]=y(t[i[s]]);return e}return t}function x(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function _(t,e,i,n){if(!x(t))return;const s=e[t],o=i[t];d(s)&&d(o)?w(s,o,n):e[t]=y(o)}function w(t,e,i){const n=h(e)?e:[e],s=n.length;if(!d(t))return t;const o=(i=i||{}).merger||_;for(let r=0;r<s;++r){if(!d(e=n[r]))continue;const s=Object.keys(e);for(let n=0,r=s.length;n<r;++n)o(s[n],t,e,i)}return t}function M(t,e){return w(t,e,{merger:S})}function S(t,e,i){if(!x(t))return;const n=e[t],s=i[t];d(n)&&d(s)?M(n,s):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=y(s))}function k(t,e){const i=t.indexOf(".",e);return-1===i?t.length:i}function P(t,e){if(""===e)return t;let i=0,n=k(e,i);for(;t&&n>i;)t=t[e.substr(i,n-i)],i=n+1,n=k(e,i);return t}function T(t){return t.charAt(0).toUpperCase()+t.slice(1)}const O=t=>void 0!==t,L=t=>"function"==typeof t,A=(t,e)=>{if(t.size!==e.size)return!1;for(const i of t)if(!e.has(i))return!1;return!0},C=Math.PI,D=2*C,I=D+C,R=Number.POSITIVE_INFINITY,E=C/180,z=C/2,j=C/4,F=2*C/3,B=Math.log10,$=Math.sign;function W(t){const e=Math.round(t);t=V(t,e,t/1e3)?e:t;const i=Math.pow(10,Math.floor(B(t))),n=t/i;return(n<=1?1:n<=2?2:n<=5?5:10)*i}function H(t){return!isNaN(parseFloat(t))&&isFinite(t)}function V(t,e,i){return Math.abs(t-e)<i}function N(t,e,i){let n,s,o;for(n=0,s=t.length;n<s;n++)o=t[n][i],isNaN(o)||(e.min=Math.min(e.min,o),e.max=Math.max(e.max,o))}function q(t){return t*(C/180)}function G(t){return t*(180/C)}function U(t){if(!u(t))return;let e=1,i=0;for(;Math.round(t*e)/e!==t;)e*=10,i++;return i}function Y(t,e){const i=e.x-t.x,n=e.y-t.y,s=Math.sqrt(i*i+n*n);let o=Math.atan2(n,i);return o<-.5*C&&(o+=D),{angle:o,distance:s}}function X(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function Q(t,e){return(t-e+I)%D-C}function K(t){return(t%D+D)%D}function J(t,e,i,n){const s=K(t),o=K(e),r=K(i),a=K(o-s),l=K(r-s),c=K(s-o),h=K(s-r);return s===o||s===r||n&&o===r||a>l&&c<h}function Z(t,e,i){return Math.max(e,Math.min(i,t))}function tt(t,e,i,n=1e-6){return t>=Math.min(e,i)-n&&t<=Math.max(e,i)+n}const et=t=>0===t||1===t,it=(t,e,i)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*D/i),nt=(t,e,i)=>Math.pow(2,-10*t)*Math.sin((t-e)*D/i)+1,st={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*z),easeOutSine:t=>Math.sin(t*z),easeInOutSine:t=>-.5*(Math.cos(C*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>et(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>et(t)?t:it(t,.075,.3),easeOutElastic:t=>et(t)?t:nt(t,.075,.3),easeInOutElastic(t){const e=.1125;return et(t)?t:t<.5?.5*it(2*t,e,.45):.5+.5*nt(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-st.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,i=2.75;return t<1/i?e*t*t:t<2/i?e*(t-=1.5/i)*t+.75:t<2.5/i?e*(t-=2.25/i)*t+.9375:e*(t-=2.625/i)*t+.984375},easeInOutBounce:t=>t<.5?.5*st.easeInBounce(2*t):.5*st.easeOutBounce(2*t-1)+.5},ot={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},rt="0123456789ABCDEF",at=t=>rt[15&t],lt=t=>rt[(240&t)>>4]+rt[15&t],ct=t=>(240&t)>>4==(15&t);function ht(t){return t+.5|0}const dt=(t,e,i)=>Math.max(Math.min(t,i),e);function ut(t){return dt(ht(2.55*t),0,255)}function gt(t){return dt(ht(255*t),0,255)}function pt(t){return dt(ht(t/2.55)/100,0,1)}function ft(t){return dt(ht(100*t),0,100)}const mt=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,bt=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function vt(t,e,i){const n=e*Math.min(i,1-i),s=(e,s=(e+t/30)%12)=>i-n*Math.max(Math.min(s-3,9-s,1),-1);return[s(0),s(8),s(4)]}function yt(t,e,i){const n=(n,s=(n+t/60)%6)=>i-i*e*Math.max(Math.min(s,4-s,1),0);return[n(5),n(3),n(1)]}function xt(t,e,i){const n=vt(t,1,.5);let s;for(e+i>1&&(s=1/(e+i),e*=s,i*=s),s=0;s<3;s++)n[s]*=1-e-i,n[s]+=e;return n}function _t(t){const e=t.r/255,i=t.g/255,n=t.b/255,s=Math.max(e,i,n),o=Math.min(e,i,n),r=(s+o)/2;let a,l,c;return s!==o&&(c=s-o,l=r>.5?c/(2-s-o):c/(s+o),a=s===e?(i-n)/c+(i<n?6:0):s===i?(n-e)/c+2:(e-i)/c+4,a=60*a+.5),[0|a,l||0,r]}function wt(t,e,i,n){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,i,n)).map(gt)}function Mt(t,e,i){return wt(vt,t,e,i)}function St(t){return(t%360+360)%360}const kt={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},Pt={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let Tt;function Ot(t,e,i){if(t){let n=_t(t);n[e]=Math.max(0,Math.min(n[e]+n[e]*i,0===e?360:1)),n=Mt(n),t.r=n[0],t.g=n[1],t.b=n[2]}}function Lt(t,e){return t?Object.assign(e||{},t):t}function At(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=gt(t[3]))):(e=Lt(t,{r:0,g:0,b:0,a:1})).a=gt(e.a),e}function Ct(t){return"r"===t.charAt(0)?function(t){const e=mt.exec(t);let i,n,s,o=255;if(e){if(e[7]!==i){const t=+e[7];o=255&(e[8]?ut(t):255*t)}return i=+e[1],n=+e[3],s=+e[5],i=255&(e[2]?ut(i):i),n=255&(e[4]?ut(n):n),s=255&(e[6]?ut(s):s),{r:i,g:n,b:s,a:o}}}(t):function(t){const e=bt.exec(t);let i,n=255;if(!e)return;e[5]!==i&&(n=e[6]?ut(+e[5]):gt(+e[5]));const s=St(+e[2]),o=+e[3]/100,r=+e[4]/100;return i="hwb"===e[1]?function(t,e,i){return wt(xt,t,e,i)}(s,o,r):"hsv"===e[1]?function(t,e,i){return wt(yt,t,e,i)}(s,o,r):Mt(s,o,r),{r:i[0],g:i[1],b:i[2],a:n}}(t)}class Dt{constructor(t){if(t instanceof Dt)return t;const e=typeof t;let i;var n,s,o;"object"===e?i=At(t):"string"===e&&(o=(n=t).length,"#"===n[0]&&(4===o||5===o?s={r:255&17*ot[n[1]],g:255&17*ot[n[2]],b:255&17*ot[n[3]],a:5===o?17*ot[n[4]]:255}:7!==o&&9!==o||(s={r:ot[n[1]]<<4|ot[n[2]],g:ot[n[3]]<<4|ot[n[4]],b:ot[n[5]]<<4|ot[n[6]],a:9===o?ot[n[7]]<<4|ot[n[8]]:255})),i=s||function(t){Tt||(Tt=function(){const t={},e=Object.keys(Pt),i=Object.keys(kt);let n,s,o,r,a;for(n=0;n<e.length;n++){for(r=a=e[n],s=0;s<i.length;s++)o=i[s],a=a.replace(o,kt[o]);o=parseInt(Pt[r],16),t[a]=[o>>16&255,o>>8&255,255&o]}return t}(),Tt.transparent=[0,0,0,0]);const e=Tt[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}(t)||Ct(t)),this._rgb=i,this._valid=!!i}get valid(){return this._valid}get rgb(){var t=Lt(this._rgb);return t&&(t.a=pt(t.a)),t}set rgb(t){this._rgb=At(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${pt(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):this._rgb;var t}hexString(){return this._valid?(t=this._rgb,e=function(t){return ct(t.r)&&ct(t.g)&&ct(t.b)&&ct(t.a)}(t)?at:lt,t?"#"+e(t.r)+e(t.g)+e(t.b)+(t.a<255?e(t.a):""):t):this._rgb;var t,e}hslString(){return this._valid?function(t){if(!t)return;const e=_t(t),i=e[0],n=ft(e[1]),s=ft(e[2]);return t.a<255?`hsla(${i}, ${n}%, ${s}%, ${pt(t.a)})`:`hsl(${i}, ${n}%, ${s}%)`}(this._rgb):this._rgb}mix(t,e){const i=this;if(t){const n=i.rgb,s=t.rgb;let o;const r=e===o?.5:e,a=2*r-1,l=n.a-s.a,c=((a*l==-1?a:(a+l)/(1+a*l))+1)/2;o=1-c,n.r=255&c*n.r+o*s.r+.5,n.g=255&c*n.g+o*s.g+.5,n.b=255&c*n.b+o*s.b+.5,n.a=r*n.a+(1-r)*s.a,i.rgb=n}return i}clone(){return new Dt(this.rgb)}alpha(t){return this._rgb.a=gt(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=ht(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return Ot(this._rgb,2,t),this}darken(t){return Ot(this._rgb,2,-t),this}saturate(t){return Ot(this._rgb,1,t),this}desaturate(t){return Ot(this._rgb,1,-t),this}rotate(t){return function(t,e){var i=_t(t);i[0]=St(i[0]+e),i=Mt(i),t.r=i[0],t.g=i[1],t.b=i[2]}(this._rgb,t),this}}function It(t){return new Dt(t)}const Rt=t=>t instanceof CanvasGradient||t instanceof CanvasPattern;function Et(t){return Rt(t)?t:It(t)}function zt(t){return Rt(t)?t:It(t).saturate(.5).darken(.1).hexString()}const jt=Object.create(null),Ft=Object.create(null);function Bt(t,e){if(!e)return t;const i=e.split(".");for(let e=0,n=i.length;e<n;++e){const n=i[e];t=t[n]||(t[n]=Object.create(null))}return t}function $t(t,e,i){return"string"==typeof e?w(Bt(t,e),i):w(Bt(t,""),e)}var Wt=new class{constructor(t){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>zt(e.backgroundColor),this.hoverBorderColor=(t,e)=>zt(e.borderColor),this.hoverColor=(t,e)=>zt(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t)}set(t,e){return $t(this,t,e)}get(t){return Bt(this,t)}describe(t,e){return $t(Ft,t,e)}override(t,e){return $t(jt,t,e)}route(t,e,i,n){const s=Bt(this,t),o=Bt(this,i),r="_"+e;Object.defineProperties(s,{[r]:{value:s[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[r],e=o[n];return d(t)?Object.assign({},e,t):p(t,e)},set(t){this[r]=t}}})}}({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}});function Ht(t,e,i,n,s){let o=e[s];return o||(o=e[s]=t.measureText(s).width,i.push(s)),o>n&&(n=o),n}function Vt(t,e,i,n){let s=(n=n||{}).data=n.data||{},o=n.garbageCollect=n.garbageCollect||[];n.font!==e&&(s=n.data={},o=n.garbageCollect=[],n.font=e),t.save(),t.font=e;let r=0;const a=i.length;let l,c,d,u,g;for(l=0;l<a;l++)if(u=i[l],null!=u&&!0!==h(u))r=Ht(t,s,o,r,u);else if(h(u))for(c=0,d=u.length;c<d;c++)g=u[c],null==g||h(g)||(r=Ht(t,s,o,r,g));t.restore();const p=o.length/2;if(p>i.length){for(l=0;l<p;l++)delete s[o[l]];o.splice(0,p)}return r}function Nt(t,e,i){const n=t.currentDevicePixelRatio,s=0!==i?Math.max(i/2,.5):0;return Math.round((e-s)*n)/n+s}function qt(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function Gt(t,e,i,n){let s,o,r,a,l;const c=e.pointStyle,h=e.rotation,d=e.radius;let u=(h||0)*E;if(c&&"object"==typeof c&&(s=c.toString(),"[object HTMLImageElement]"===s||"[object HTMLCanvasElement]"===s))return t.save(),t.translate(i,n),t.rotate(u),t.drawImage(c,-c.width/2,-c.height/2,c.width,c.height),void t.restore();if(!(isNaN(d)||d<=0)){switch(t.beginPath(),c){default:t.arc(i,n,d,0,D),t.closePath();break;case"triangle":t.moveTo(i+Math.sin(u)*d,n-Math.cos(u)*d),u+=F,t.lineTo(i+Math.sin(u)*d,n-Math.cos(u)*d),u+=F,t.lineTo(i+Math.sin(u)*d,n-Math.cos(u)*d),t.closePath();break;case"rectRounded":l=.516*d,a=d-l,o=Math.cos(u+j)*a,r=Math.sin(u+j)*a,t.arc(i-o,n-r,l,u-C,u-z),t.arc(i+r,n-o,l,u-z,u),t.arc(i+o,n+r,l,u,u+z),t.arc(i-r,n+o,l,u+z,u+C),t.closePath();break;case"rect":if(!h){a=Math.SQRT1_2*d,t.rect(i-a,n-a,2*a,2*a);break}u+=j;case"rectRot":o=Math.cos(u)*d,r=Math.sin(u)*d,t.moveTo(i-o,n-r),t.lineTo(i+r,n-o),t.lineTo(i+o,n+r),t.lineTo(i-r,n+o),t.closePath();break;case"crossRot":u+=j;case"cross":o=Math.cos(u)*d,r=Math.sin(u)*d,t.moveTo(i-o,n-r),t.lineTo(i+o,n+r),t.moveTo(i+r,n-o),t.lineTo(i-r,n+o);break;case"star":o=Math.cos(u)*d,r=Math.sin(u)*d,t.moveTo(i-o,n-r),t.lineTo(i+o,n+r),t.moveTo(i+r,n-o),t.lineTo(i-r,n+o),u+=j,o=Math.cos(u)*d,r=Math.sin(u)*d,t.moveTo(i-o,n-r),t.lineTo(i+o,n+r),t.moveTo(i+r,n-o),t.lineTo(i-r,n+o);break;case"line":o=Math.cos(u)*d,r=Math.sin(u)*d,t.moveTo(i-o,n-r),t.lineTo(i+o,n+r);break;case"dash":t.moveTo(i,n),t.lineTo(i+Math.cos(u)*d,n+Math.sin(u)*d)}t.fill(),e.borderWidth>0&&t.stroke()}}function Ut(t,e,i){return i=i||.5,!e||t&&t.x>e.left-i&&t.x<e.right+i&&t.y>e.top-i&&t.y<e.bottom+i}function Yt(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function Xt(t){t.restore()}function Qt(t,e,i,n,s){if(!e)return t.lineTo(i.x,i.y);if("middle"===s){const n=(e.x+i.x)/2;t.lineTo(n,e.y),t.lineTo(n,i.y)}else"after"===s!=!!n?t.lineTo(e.x,i.y):t.lineTo(i.x,e.y);t.lineTo(i.x,i.y)}function Kt(t,e,i,n){if(!e)return t.lineTo(i.x,i.y);t.bezierCurveTo(n?e.cp1x:e.cp2x,n?e.cp1y:e.cp2y,n?i.cp2x:i.cp1x,n?i.cp2y:i.cp1y,i.x,i.y)}function Jt(t,e,i,n,s,o={}){const r=h(e)?e:[e],a=o.strokeWidth>0&&""!==o.strokeColor;let l,d;for(t.save(),t.font=s.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),c(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,o),l=0;l<r.length;++l)d=r[l],a&&(o.strokeColor&&(t.strokeStyle=o.strokeColor),c(o.strokeWidth)||(t.lineWidth=o.strokeWidth),t.strokeText(d,i,n,o.maxWidth)),t.fillText(d,i,n,o.maxWidth),Zt(t,i,n,d,o),n+=s.lineHeight;t.restore()}function Zt(t,e,i,n,s){if(s.strikethrough||s.underline){const o=t.measureText(n),r=e-o.actualBoundingBoxLeft,a=e+o.actualBoundingBoxRight,l=i-o.actualBoundingBoxAscent,c=i+o.actualBoundingBoxDescent,h=s.strikethrough?(l+c)/2:c;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=s.decorationWidth||2,t.moveTo(r,h),t.lineTo(a,h),t.stroke()}}function te(t,e){const{x:i,y:n,w:s,h:o,radius:r}=e;t.arc(i+r.topLeft,n+r.topLeft,r.topLeft,-z,C,!0),t.lineTo(i,n+o-r.bottomLeft),t.arc(i+r.bottomLeft,n+o-r.bottomLeft,r.bottomLeft,C,z,!0),t.lineTo(i+s-r.bottomRight,n+o),t.arc(i+s-r.bottomRight,n+o-r.bottomRight,r.bottomRight,z,0,!0),t.lineTo(i+s,n+r.topRight),t.arc(i+s-r.topRight,n+r.topRight,r.topRight,0,-z,!0),t.lineTo(i+r.topLeft,n)}const ee=new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/),ie=new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);function ne(t,e){const i=(""+t).match(ee);if(!i||"normal"===i[1])return 1.2*e;switch(t=+i[2],i[3]){case"px":return t;case"%":t/=100}return e*t}function se(t,e){const i={},n=d(e),s=n?Object.keys(e):e,o=d(t)?n?i=>p(t[i],t[e[i]]):e=>t[e]:()=>t;for(const t of s)i[t]=+o(t)||0;return i}function oe(t){return se(t,{top:"y",right:"x",bottom:"y",left:"x"})}function re(t){return se(t,["topLeft","topRight","bottomLeft","bottomRight"])}function ae(t){const e=oe(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function le(t,e){t=t||{},e=e||Wt.font;let i=p(t.size,e.size);"string"==typeof i&&(i=parseInt(i,10));let n=p(t.style,e.style);n&&!(""+n).match(ie)&&(console.warn('Invalid font style specified: "'+n+'"'),n="");const s={family:p(t.family,e.family),lineHeight:ne(p(t.lineHeight,e.lineHeight),i),size:i,style:n,weight:p(t.weight,e.weight),string:""};return s.string=function(t){return!t||c(t.size)||c(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(s),s}function ce(t,e,i,n){let s,o,r,a=!0;for(s=0,o=t.length;s<o;++s)if(r=t[s],void 0!==r&&(void 0!==e&&"function"==typeof r&&(r=r(e),a=!1),void 0!==i&&h(r)&&(r=r[i%r.length],a=!1),void 0!==r))return n&&!a&&(n.cacheable=!1),r}function he(t,e){return Object.assign(Object.create(t),e)}function de(t,e,i){i=i||(i=>t[i]<e);let n,s=t.length-1,o=0;for(;s-o>1;)n=o+s>>1,i(n)?o=n:s=n;return{lo:o,hi:s}}const ue=(t,e,i)=>de(t,i,(n=>t[n][e]<i)),ge=(t,e,i)=>de(t,i,(n=>t[n][e]>=i)),pe=["push","pop","shift","splice","unshift"];function fe(t,e){const i=t._chartjs;if(!i)return;const n=i.listeners,s=n.indexOf(e);-1!==s&&n.splice(s,1),n.length>0||(pe.forEach((e=>{delete t[e]})),delete t._chartjs)}function me(t){const e=new Set;let i,n;for(i=0,n=t.length;i<n;++i)e.add(t[i]);return e.size===n?t:Array.from(e)}function be(t,e=[""],i=t,n,s=(()=>t[0])){O(n)||(n=Oe("_fallback",t));const o={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:i,_fallback:n,_getTarget:s,override:s=>be([s,...t],e,i,n)};return new Proxy(o,{deleteProperty:(e,i)=>(delete e[i],delete e._keys,delete t[0][i],!0),get:(i,n)=>we(i,n,(()=>function(t,e,i,n){let s;for(const o of e)if(s=Oe(xe(o,t),i),O(s))return _e(t,s)?Pe(i,n,t,s):s}(n,e,t,i))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>Le(t).includes(e),ownKeys:t=>Le(t),set(t,e,i){const n=t._storage||(t._storage=s());return t[e]=n[e]=i,delete t._keys,!0}})}function ve(t,e,i,n){const s={_cacheable:!1,_proxy:t,_context:e,_subProxy:i,_stack:new Set,_descriptors:ye(t,n),setContext:e=>ve(t,e,i,n),override:s=>ve(t.override(s),e,i,n)};return new Proxy(s,{deleteProperty:(e,i)=>(delete e[i],delete t[i],!0),get:(t,e,i)=>we(t,e,(()=>function(t,e,i){const{_proxy:n,_context:s,_subProxy:o,_descriptors:r}=t;let a=n[e];return L(a)&&r.isScriptable(e)&&(a=function(t,e,i,n){const{_proxy:s,_context:o,_subProxy:r,_stack:a}=i;if(a.has(t))throw new Error("Recursion detected: "+Array.from(a).join("->")+"->"+t);return a.add(t),e=e(o,r||n),a.delete(t),_e(t,e)&&(e=Pe(s._scopes,s,t,e)),e}(e,a,t,i)),h(a)&&a.length&&(a=function(t,e,i,n){const{_proxy:s,_context:o,_subProxy:r,_descriptors:a}=i;if(O(o.index)&&n(t))e=e[o.index%e.length];else if(d(e[0])){const i=e,n=s._scopes.filter((t=>t!==i));e=[];for(const l of i){const i=Pe(n,s,t,l);e.push(ve(i,o,r&&r[t],a))}}return e}(e,a,t,r.isIndexable)),_e(e,a)&&(a=ve(a,s,o&&o[e],r)),a}(t,e,i))),getOwnPropertyDescriptor:(e,i)=>e._descriptors.allKeys?Reflect.has(t,i)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,i),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,i)=>Reflect.has(t,i),ownKeys:()=>Reflect.ownKeys(t),set:(e,i,n)=>(t[i]=n,delete e[i],!0)})}function ye(t,e={scriptable:!0,indexable:!0}){const{_scriptable:i=e.scriptable,_indexable:n=e.indexable,_allKeys:s=e.allKeys}=t;return{allKeys:s,scriptable:i,indexable:n,isScriptable:L(i)?i:()=>i,isIndexable:L(n)?n:()=>n}}const xe=(t,e)=>t?t+T(e):e,_e=(t,e)=>d(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function we(t,e,i){if(Object.prototype.hasOwnProperty.call(t,e))return t[e];const n=i();return t[e]=n,n}function Me(t,e,i){return L(t)?t(e,i):t}const Se=(t,e)=>!0===t?e:"string"==typeof t?P(e,t):void 0;function ke(t,e,i,n,s){for(const o of e){const e=Se(i,o);if(e){t.add(e);const o=Me(e._fallback,i,s);if(O(o)&&o!==i&&o!==n)return o}else if(!1===e&&O(n)&&i!==n)return null}return!1}function Pe(t,e,i,n){const s=e._rootScopes,o=Me(e._fallback,i,n),r=[...t,...s],a=new Set;a.add(n);let l=Te(a,r,i,o||i,n);return null!==l&&(!O(o)||o===i||(l=Te(a,r,o,l,n),null!==l))&&be(Array.from(a),[""],s,o,(()=>function(t,e,i){const n=t._getTarget();e in n||(n[e]={});const s=n[e];return h(s)&&d(i)?i:s}(e,i,n)))}function Te(t,e,i,n,s){for(;i;)i=ke(t,e,i,n,s);return i}function Oe(t,e){for(const i of e){if(!i)continue;const e=i[t];if(O(e))return e}}function Le(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const i of t)for(const t of Object.keys(i).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}const Ae=Number.EPSILON||1e-14,Ce=(t,e)=>e<t.length&&!t[e].skip&&t[e],De=t=>"x"===t?"y":"x";function Ie(t,e,i,n){const s=t.skip?e:t,o=e,r=i.skip?e:i,a=X(o,s),l=X(r,o);let c=a/(a+l),h=l/(a+l);c=isNaN(c)?0:c,h=isNaN(h)?0:h;const d=n*c,u=n*h;return{previous:{x:o.x-d*(r.x-s.x),y:o.y-d*(r.y-s.y)},next:{x:o.x+u*(r.x-s.x),y:o.y+u*(r.y-s.y)}}}function Re(t,e,i){return Math.max(Math.min(t,i),e)}function Ee(t,e,i,n,s){let o,r,a,l;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)!function(t,e="x"){const i=De(e),n=t.length,s=Array(n).fill(0),o=Array(n);let r,a,l,c=Ce(t,0);for(r=0;r<n;++r)if(a=l,l=c,c=Ce(t,r+1),l){if(c){const t=c[e]-l[e];s[r]=0!==t?(c[i]-l[i])/t:0}o[r]=a?c?$(s[r-1])!==$(s[r])?0:(s[r-1]+s[r])/2:s[r-1]:s[r]}!function(t,e,i){const n=t.length;let s,o,r,a,l,c=Ce(t,0);for(let h=0;h<n-1;++h)l=c,c=Ce(t,h+1),l&&c&&(V(e[h],0,Ae)?i[h]=i[h+1]=0:(s=i[h]/e[h],o=i[h+1]/e[h],a=Math.pow(s,2)+Math.pow(o,2),a<=9||(r=3/Math.sqrt(a),i[h]=s*r*e[h],i[h+1]=o*r*e[h])))}(t,s,o),function(t,e,i="x"){const n=De(i),s=t.length;let o,r,a,l=Ce(t,0);for(let c=0;c<s;++c){if(r=a,a=l,l=Ce(t,c+1),!a)continue;const s=a[i],h=a[n];r&&(o=(s-r[i])/3,a[`cp1${i}`]=s-o,a[`cp1${n}`]=h-o*e[c]),l&&(o=(l[i]-s)/3,a[`cp2${i}`]=s+o,a[`cp2${n}`]=h+o*e[c])}}(t,o,e)}(t,s);else{let i=n?t[t.length-1]:t[0];for(o=0,r=t.length;o<r;++o)a=t[o],l=Ie(i,a,t[Math.min(o+1,r-(n?0:1))%r],e.tension),a.cp1x=l.previous.x,a.cp1y=l.previous.y,a.cp2x=l.next.x,a.cp2y=l.next.y,i=a}e.capBezierPoints&&function(t,e){let i,n,s,o,r,a=Ut(t[0],e);for(i=0,n=t.length;i<n;++i)r=o,o=a,a=i<n-1&&Ut(t[i+1],e),o&&(s=t[i],r&&(s.cp1x=Re(s.cp1x,e.left,e.right),s.cp1y=Re(s.cp1y,e.top,e.bottom)),a&&(s.cp2x=Re(s.cp2x,e.left,e.right),s.cp2y=Re(s.cp2y,e.top,e.bottom)))}(t,i)}function ze(){return"undefined"!=typeof window&&"undefined"!=typeof document}function je(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function Fe(t,e,i){let n;return"string"==typeof t?(n=parseInt(t,10),-1!==t.indexOf("%")&&(n=n/100*e.parentNode[i])):n=t,n}const Be=t=>window.getComputedStyle(t,null),$e=["top","right","bottom","left"];function We(t,e,i){const n={};i=i?"-"+i:"";for(let s=0;s<4;s++){const o=$e[s];n[o]=parseFloat(t[e+"-"+o+i])||0}return n.width=n.left+n.right,n.height=n.top+n.bottom,n}function He(t,e){const{canvas:i,currentDevicePixelRatio:n}=e,s=Be(i),o="border-box"===s.boxSizing,r=We(s,"padding"),a=We(s,"border","width"),{x:l,y:c,box:h}=function(t,e){const i=t.native||t,n=i.touches,s=n&&n.length?n[0]:i,{offsetX:o,offsetY:r}=s;let a,l,c=!1;if(((t,e,i)=>(t>0||e>0)&&(!i||!i.shadowRoot))(o,r,i.target))a=o,l=r;else{const t=e.getBoundingClientRect();a=s.clientX-t.left,l=s.clientY-t.top,c=!0}return{x:a,y:l,box:c}}(t,i),d=r.left+(h&&a.left),u=r.top+(h&&a.top);let{width:g,height:p}=e;return o&&(g-=r.width+a.width,p-=r.height+a.height),{x:Math.round((l-d)/g*i.width/n),y:Math.round((c-u)/p*i.height/n)}}const Ve=t=>Math.round(10*t)/10;function Ne(t,e,i){const n=e||1,s=Math.floor(t.height*n),o=Math.floor(t.width*n);t.height=s/n,t.width=o/n;const r=t.canvas;return r.style&&(i||!r.style.height&&!r.style.width)&&(r.style.height=`${t.height}px`,r.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==n||r.height!==s||r.width!==o)&&(t.currentDevicePixelRatio=n,r.height=s,r.width=o,t.ctx.setTransform(n,0,0,n,0,0),!0)}const qe=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function Ge(t,e){const i=function(t,e){return Be(t).getPropertyValue(e)}(t,e),n=i&&i.match(/^(\d+)(\.\d+)?px$/);return n?+n[1]:void 0}function Ue(t,e,i,n){return{x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}}function Ye(t,e,i,n){return{x:t.x+i*(e.x-t.x),y:"middle"===n?i<.5?t.y:e.y:"after"===n?i<1?t.y:e.y:i>0?e.y:t.y}}function Xe(t,e,i,n){const s={x:t.cp2x,y:t.cp2y},o={x:e.cp1x,y:e.cp1y},r=Ue(t,s,i),a=Ue(s,o,i),l=Ue(o,e,i),c=Ue(r,a,i),h=Ue(a,l,i);return Ue(c,h,i)}const Qe=new Map;function Ke(t,e,i){return function(t,e){e=e||{};const i=t+JSON.stringify(e);let n=Qe.get(i);return n||(n=new Intl.NumberFormat(t,e),Qe.set(i,n)),n}(e,i).format(t)}function Je(t,e,i){return t?function(t,e){return{x:i=>t+t+e-i,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,i):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function Ze(t,e){let i,n;"ltr"!==e&&"rtl"!==e||(i=t.canvas.style,n=[i.getPropertyValue("direction"),i.getPropertyPriority("direction")],i.setProperty("direction",e,"important"),t.prevTextDirection=n)}function ti(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function ei(t){return"angle"===t?{between:J,compare:Q,normalize:K}:{between:tt,compare:(t,e)=>t-e,normalize:t=>t}}function ii({start:t,end:e,count:i,loop:n,style:s}){return{start:t%i,end:e%i,loop:n&&(e-t+1)%i==0,style:s}}function ni(t,e,i){if(!i)return[t];const{property:n,start:s,end:o}=i,r=e.length,{compare:a,between:l,normalize:c}=ei(n),{start:h,end:d,loop:u,style:g}=function(t,e,i){const{property:n,start:s,end:o}=i,{between:r,normalize:a}=ei(n),l=e.length;let c,h,{start:d,end:u,loop:g}=t;if(g){for(d+=l,u+=l,c=0,h=l;c<h&&r(a(e[d%l][n]),s,o);++c)d--,u--;d%=l,u%=l}return u<d&&(u+=l),{start:d,end:u,loop:g,style:t.style}}(t,e,i),p=[];let f,m,b,v=!1,y=null;for(let t=h,i=h;t<=d;++t)m=e[t%r],m.skip||(f=c(m[n]),f!==b&&(v=l(f,s,o),null===y&&(v||l(s,b,f)&&0!==a(s,b))&&(y=0===a(f,s)?t:i),null!==y&&(!v||0===a(o,f)||l(o,b,f))&&(p.push(ii({start:y,end:t,loop:u,count:r,style:g})),y=null),i=t,b=f));return null!==y&&p.push(ii({start:y,end:d,loop:u,count:r,style:g})),p}function si(t,e){const i=[],n=t.segments;for(let s=0;s<n.length;s++){const o=ni(n[s],t.points,e);o.length&&i.push(...o)}return i}function oi(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function ri(t,e){return e&&JSON.stringify(t)!==JSON.stringify(e)}var ai=new class{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,i,n){const s=e.listeners[n],o=e.duration;s.forEach((n=>n({chart:t,initial:e.initial,numSteps:o,currentStep:Math.min(i-e.start,o)})))}_refresh(){this._request||(this._running=!0,this._request=n.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((i,n)=>{if(!i.running||!i.items.length)return;const s=i.items;let o,r=s.length-1,a=!1;for(;r>=0;--r)o=s[r],o._active?(o._total>i.duration&&(i.duration=o._total),o.tick(t),a=!0):(s[r]=s[s.length-1],s.pop());a&&(n.draw(),this._notify(n,i,t,"progress")),s.length||(i.running=!1,this._notify(n,i,t,"complete"),i.initial=!1),e+=s.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let i=e.get(t);return i||(i={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,i)),i}listen(t,e,i){this._getAnims(t).listeners[e].push(i)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const i=e.items;let n=i.length-1;for(;n>=0;--n)i[n].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}};const li="transparent",ci={boolean:(t,e,i)=>i>.5?e:t,color(t,e,i){const n=Et(t||li),s=n.valid&&Et(e||li);return s&&s.valid?s.mix(n,i).hexString():e},number:(t,e,i)=>t+(e-t)*i};class hi{constructor(t,e,i,n){const s=e[i];n=ce([t.to,n,s,t.from]);const o=ce([t.from,s,n]);this._active=!0,this._fn=t.fn||ci[t.type||typeof o],this._easing=st[t.easing]||st.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=i,this._from=o,this._to=n,this._promises=void 0}active(){return this._active}update(t,e,i){if(this._active){this._notify(!1);const n=this._target[this._prop],s=i-this._start,o=this._duration-s;this._start=i,this._duration=Math.floor(Math.max(o,t.duration)),this._total+=s,this._loop=!!t.loop,this._to=ce([t.to,e,n,t.from]),this._from=ce([t.from,n,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,i=this._duration,n=this._prop,s=this._from,o=this._loop,r=this._to;let a;if(this._active=s!==r&&(o||e<i),!this._active)return this._target[n]=r,void this._notify(!0);e<0?this._target[n]=s:(a=e/i%2,a=o&&a>1?2-a:a,a=this._easing(Math.min(1,Math.max(0,a))),this._target[n]=this._fn(s,r,a))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,i)=>{t.push({res:e,rej:i})}))}_notify(t){const e=t?"res":"rej",i=this._promises||[];for(let t=0;t<i.length;t++)i[t][e]()}}Wt.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0});const di=Object.keys(Wt.animation);Wt.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),Wt.set("animations",{colors:{type:"color",properties:["color","borderColor","backgroundColor"]},numbers:{type:"number",properties:["x","y","borderWidth","radius","tension"]}}),Wt.describe("animations",{_fallback:"animation"}),Wt.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}});class ui{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!d(t))return;const e=this._properties;Object.getOwnPropertyNames(t).forEach((i=>{const n=t[i];if(!d(n))return;const s={};for(const t of di)s[t]=n[t];(h(n.properties)&&n.properties||[i]).forEach((t=>{t!==i&&e.has(t)||e.set(t,s)}))}))}_animateOptions(t,e){const i=e.options,n=function(t,e){if(!e)return;let i=t.options;if(i)return i.$shared&&(t.options=i=Object.assign({},i,{$shared:!1,$animations:{}})),i;t.options=e}(t,i);if(!n)return[];const s=this._createAnimations(n,i);return i.$shared&&function(t,e){const i=[],n=Object.keys(e);for(let e=0;e<n.length;e++){const s=t[n[e]];s&&s.active()&&i.push(s.wait())}return Promise.all(i)}(t.options.$animations,i).then((()=>{t.options=i}),(()=>{})),s}_createAnimations(t,e){const i=this._properties,n=[],s=t.$animations||(t.$animations={}),o=Object.keys(e),r=Date.now();let a;for(a=o.length-1;a>=0;--a){const l=o[a];if("$"===l.charAt(0))continue;if("options"===l){n.push(...this._animateOptions(t,e));continue}const c=e[l];let h=s[l];const d=i.get(l);if(h){if(d&&h.active()){h.update(d,c,r);continue}h.cancel()}d&&d.duration?(s[l]=h=new hi(d,t,l,c),n.push(h)):t[l]=c}return n}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const i=this._createAnimations(t,e);return i.length?(ai.add(this._chart,i),!0):void 0}}function gi(t,e){const i=t&&t.options||{},n=i.reverse,s=void 0===i.min?e:0,o=void 0===i.max?e:0;return{start:n?o:s,end:n?s:o}}function pi(t,e){const i=[],n=t._getSortedDatasetMetas(e);let s,o;for(s=0,o=n.length;s<o;++s)i.push(n[s].index);return i}function fi(t,e,i,n={}){const s=t.keys,o="single"===n.mode;let r,a,l,c;if(null!==e){for(r=0,a=s.length;r<a;++r){if(l=+s[r],l===i){if(n.all)continue;break}c=t.values[l],u(c)&&(o||0===e||$(e)===$(c))&&(e+=c)}return e}}function mi(t,e){const i=t&&t.options.stacked;return i||void 0===i&&void 0!==e.stack}function bi(t,e,i){const n=t[e]||(t[e]={});return n[i]||(n[i]={})}function vi(t,e,i,n){for(const s of e.getMatchingVisibleMetas(n).reverse()){const e=t[s.index];if(i&&e>0||!i&&e<0)return s.index}return null}function yi(t,e){const{chart:i,_cachedMeta:n}=t,s=i._stacks||(i._stacks={}),{iScale:o,vScale:r,index:a}=n,l=o.axis,c=r.axis,h=function(t,e,i){return`${t.id}.${e.id}.${i.stack||i.type}`}(o,r,n),d=e.length;let u;for(let t=0;t<d;++t){const i=e[t],{[l]:o,[c]:d}=i;u=(i._stacks||(i._stacks={}))[c]=bi(s,h,o),u[a]=d,u._top=vi(u,r,!0,n.type),u._bottom=vi(u,r,!1,n.type)}}function xi(t,e){const i=t.scales;return Object.keys(i).filter((t=>i[t].axis===e)).shift()}function _i(t,e){const i=t.controller.index,n=t.vScale&&t.vScale.axis;if(n){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[n]||void 0===e[n][i])return;delete e[n][i]}}}const wi=t=>"reset"===t||"none"===t,Mi=(t,e)=>e?t:Object.assign({},t);class Si{constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.$context=void 0,this._syncList=[],this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=mi(t.vScale,t),this.addElements()}updateIndex(t){this.index!==t&&_i(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,i=this.getDataset(),n=(t,e,i,n)=>"x"===t?e:"r"===t?n:i,s=e.xAxisID=p(i.xAxisID,xi(t,"x")),o=e.yAxisID=p(i.yAxisID,xi(t,"y")),r=e.rAxisID=p(i.rAxisID,xi(t,"r")),a=e.indexAxis,l=e.iAxisID=n(a,s,o,r),c=e.vAxisID=n(a,o,s,r);e.xScale=this.getScaleForId(s),e.yScale=this.getScaleForId(o),e.rScale=this.getScaleForId(r),e.iScale=this.getScaleForId(l),e.vScale=this.getScaleForId(c)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&fe(this._data,this),t._stacked&&_i(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),i=this._data;if(d(e))this._data=function(t){const e=Object.keys(t),i=new Array(e.length);let n,s,o;for(n=0,s=e.length;n<s;++n)o=e[n],i[n]={x:o,y:t[o]};return i}(e);else if(i!==e){if(i){fe(i,this);const t=this._cachedMeta;_i(t),t._parsed=[]}e&&Object.isExtensible(e)&&(this,(n=e)._chartjs?n._chartjs.listeners.push(this):(Object.defineProperty(n,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[this]}}),pe.forEach((t=>{const e="_onData"+T(t),i=n[t];Object.defineProperty(n,t,{configurable:!0,enumerable:!1,value(...t){const s=i.apply(this,t);return n._chartjs.listeners.forEach((i=>{"function"==typeof i[e]&&i[e](...t)})),s}})})))),this._syncList=[],this._data=e}var n}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,i=this.getDataset();let n=!1;this._dataCheck();const s=e._stacked;e._stacked=mi(e.vScale,e),e.stack!==i.stack&&(n=!0,_i(e),e.stack=i.stack),this._resyncElements(t),(n||s!==e._stacked)&&yi(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),i=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(i,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:i,_data:n}=this,{iScale:s,_stacked:o}=i,r=s.axis;let a,l,c,u=0===t&&e===n.length||i._sorted,g=t>0&&i._parsed[t-1];if(!1===this._parsing)i._parsed=n,i._sorted=!0,c=n;else{c=h(n[t])?this.parseArrayData(i,n,t,e):d(n[t])?this.parseObjectData(i,n,t,e):this.parsePrimitiveData(i,n,t,e);const s=()=>null===l[r]||g&&l[r]<g[r];for(a=0;a<e;++a)i._parsed[a+t]=l=c[a],u&&(s()&&(u=!1),g=l);i._sorted=u}o&&yi(this,c)}parsePrimitiveData(t,e,i,n){const{iScale:s,vScale:o}=t,r=s.axis,a=o.axis,l=s.getLabels(),c=s===o,h=new Array(n);let d,u,g;for(d=0,u=n;d<u;++d)g=d+i,h[d]={[r]:c||s.parse(l[g],g),[a]:o.parse(e[g],g)};return h}parseArrayData(t,e,i,n){const{xScale:s,yScale:o}=t,r=new Array(n);let a,l,c,h;for(a=0,l=n;a<l;++a)c=a+i,h=e[c],r[a]={x:s.parse(h[0],c),y:o.parse(h[1],c)};return r}parseObjectData(t,e,i,n){const{xScale:s,yScale:o}=t,{xAxisKey:r="x",yAxisKey:a="y"}=this._parsing,l=new Array(n);let c,h,d,u;for(c=0,h=n;c<h;++c)d=c+i,u=e[d],l[c]={x:s.parse(P(u,r),d),y:o.parse(P(u,a),d)};return l}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,i){const n=this.chart,s=this._cachedMeta,o=e[t.axis];return fi({keys:pi(n,!0),values:e._stacks[t.axis]},o,s.index,{mode:i})}updateRangeFromParsed(t,e,i,n){const s=i[e.axis];let o=null===s?NaN:s;const r=n&&i._stacks[e.axis];n&&r&&(n.values=r,o=fi(n,s,this._cachedMeta.index)),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,e){const i=this._cachedMeta,n=i._parsed,s=i._sorted&&t===i.iScale,o=n.length,r=this._getOtherScale(t),a=((t,e,i)=>t&&!e.hidden&&e._stacked&&{keys:pi(i,!0),values:null})(e,i,this.chart),l={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:c,max:h}=function(t){const{min:e,max:i,minDefined:n,maxDefined:s}=t.getUserBounds();return{min:n?e:Number.NEGATIVE_INFINITY,max:s?i:Number.POSITIVE_INFINITY}}(r);let d,g;function p(){g=n[d];const e=g[r.axis];return!u(g[t.axis])||c>e||h<e}for(d=0;d<o&&(p()||(this.updateRangeFromParsed(l,t,g,a),!s));++d);if(s)for(d=o-1;d>=0;--d)if(!p()){this.updateRangeFromParsed(l,t,g,a);break}return l}getAllParsedValues(t){const e=this._cachedMeta._parsed,i=[];let n,s,o;for(n=0,s=e.length;n<s;++n)o=e[n][t.axis],u(o)&&i.push(o);return i}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,i=e.iScale,n=e.vScale,s=this.getParsed(t);return{label:i?""+i.getLabelForValue(s[i.axis]):"",value:n?""+n.getLabelForValue(s[n.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,i,n,s;return d(t)?(e=t.top,i=t.right,n=t.bottom,s=t.left):e=i=n=s=t,{top:e,right:i,bottom:n,left:s,disabled:!1===t}}(p(this.options.clip,function(t,e,i){if(!1===i)return!1;const n=gi(t,i),s=gi(e,i);return{top:s.end,right:n.end,bottom:s.start,left:n.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,i=this._cachedMeta,n=i.data||[],s=e.chartArea,o=[],r=this._drawStart||0,a=this._drawCount||n.length-r,l=this.options.drawActiveElementsOnTop;let c;for(i.dataset&&i.dataset.draw(t,s,r,a),c=r;c<r+a;++c){const e=n[c];e.hidden||(e.active&&l?o.push(e):e.draw(t,s))}for(c=0;c<o.length;++c)o[c].draw(t,s)}getStyle(t,e){const i=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(i):this.resolveDataElementOptions(t||0,i)}getContext(t,e,i){const n=this.getDataset();let s;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];s=e.$context||(e.$context=function(t,e,i){return he(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:i,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),s.parsed=this.getParsed(t),s.raw=n.data[t],s.index=s.dataIndex=t}else s=this.$context||(this.$context=function(t,e){return he(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),s.dataset=n,s.index=s.datasetIndex=this.index;return s.active=!!e,s.mode=i,s}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",i){const n="active"===e,s=this._cachedDataOpts,o=t+"-"+e,r=s[o],a=this.enableOptionSharing&&O(i);if(r)return Mi(r,a);const l=this.chart.config,c=l.datasetElementScopeKeys(this._type,t),h=n?[`${t}Hover`,"hover",t,""]:[t,""],d=l.getOptionScopes(this.getDataset(),c),u=Object.keys(Wt.elements[t]),g=l.resolveNamedOptions(d,u,(()=>this.getContext(i,n)),h);return g.$shared&&(g.$shared=a,s[o]=Object.freeze(Mi(g,a))),g}_resolveAnimations(t,e,i){const n=this.chart,s=this._cachedDataOpts,o=`animation-${e}`,r=s[o];if(r)return r;let a;if(!1!==n.options.animation){const n=this.chart.config,s=n.datasetAnimationScopeKeys(this._type,e),o=n.getOptionScopes(this.getDataset(),s);a=n.createResolver(o,this.getContext(t,i,e))}const l=new ui(n,a&&a.animations);return a&&a._cacheable&&(s[o]=Object.freeze(l)),l}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||wi(t)||this.chart._animationsDisabled}updateElement(t,e,i,n){wi(n)?Object.assign(t,i):this._resolveAnimations(e,n).update(t,i)}updateSharedOptions(t,e,i){t&&!wi(e)&&this._resolveAnimations(void 0,e).update(t,i)}_setStyle(t,e,i,n){t.active=n;const s=this.getStyle(e,n);this._resolveAnimations(e,i,n).update(t,{options:!n&&this.getSharedOptions(s)||s})}removeHoverStyle(t,e,i){this._setStyle(t,i,"active",!1)}setHoverStyle(t,e,i){this._setStyle(t,i,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,i=this._cachedMeta.data;for(const[t,e,i]of this._syncList)this[t](e,i);this._syncList=[];const n=i.length,s=e.length,o=Math.min(s,n);o&&this.parse(0,o),s>n?this._insertElements(n,s-n,t):s<n&&this._removeElements(s,n-s)}_insertElements(t,e,i=!0){const n=this._cachedMeta,s=n.data,o=t+e;let r;const a=t=>{for(t.length+=e,r=t.length-1;r>=o;r--)t[r]=t[r-e]};for(a(s),r=t;r<o;++r)s[r]=new this.dataElementType;this._parsing&&a(n._parsed),this.parse(t,e),i&&this.updateElements(s,t,e,"reset")}updateElements(t,e,i,n){}_removeElements(t,e){const i=this._cachedMeta;if(this._parsing){const n=i._parsed.splice(t,e);i._stacked&&_i(i,n)}i.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,i,n]=t;this[e](i,n)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const i=arguments.length-2;i&&this._sync(["_insertElements",t,i])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function ki(t){const e=t.iScale,i=function(t,e){if(!t._cache.$bar){const i=t.getMatchingVisibleMetas(e);let n=[];for(let e=0,s=i.length;e<s;e++)n=n.concat(i[e].controller.getAllParsedValues(t));t._cache.$bar=me(n.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let n,s,o,r,a=e._length;const l=()=>{32767!==o&&-32768!==o&&(O(r)&&(a=Math.min(a,Math.abs(o-r)||a)),r=o)};for(n=0,s=i.length;n<s;++n)o=e.getPixelForValue(i[n]),l();for(r=void 0,n=0,s=e.ticks.length;n<s;++n)o=e.getPixelForTick(n),l();return a}function Pi(t,e,i,n){return h(t)?function(t,e,i,n){const s=i.parse(t[0],n),o=i.parse(t[1],n),r=Math.min(s,o),a=Math.max(s,o);let l=r,c=a;Math.abs(r)>Math.abs(a)&&(l=a,c=r),e[i.axis]=c,e._custom={barStart:l,barEnd:c,start:s,end:o,min:r,max:a}}(t,e,i,n):e[i.axis]=i.parse(t,n),e}function Ti(t,e,i,n){const s=t.iScale,o=t.vScale,r=s.getLabels(),a=s===o,l=[];let c,h,d,u;for(c=i,h=i+n;c<h;++c)u=e[c],d={},d[s.axis]=a||s.parse(r[c],c),l.push(Pi(u,d,o,c));return l}function Oi(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function Li(t,e,i,n){let s=e.borderSkipped;const o={};if(!s)return void(t.borderSkipped=o);const{start:r,end:a,reverse:l,top:c,bottom:h}=function(t){let e,i,n,s,o;return t.horizontal?(e=t.base>t.x,i="left",n="right"):(e=t.base<t.y,i="bottom",n="top"),e?(s="end",o="start"):(s="start",o="end"),{start:i,end:n,reverse:e,top:s,bottom:o}}(t);"middle"===s&&i&&(t.enableBorderRadius=!0,(i._top||0)===n?s=c:(i._bottom||0)===n?s=h:(o[Ai(h,r,a,l)]=!0,s=c)),o[Ai(s,r,a,l)]=!0,t.borderSkipped=o}function Ai(t,e,i,n){var s,o,r;return n?(r=i,t=Ci(t=(s=t)===(o=e)?r:s===r?o:s,i,e)):t=Ci(t,e,i),t}function Ci(t,e,i){return"start"===t?e:"end"===t?i:t}function Di(t,{inflateAmount:e},i){t.inflateAmount="auto"===e?1===i?.33:0:e}Si.defaults={},Si.prototype.datasetElementType=null,Si.prototype.dataElementType=null;class Ii extends Si{parsePrimitiveData(t,e,i,n){return Ti(t,e,i,n)}parseArrayData(t,e,i,n){return Ti(t,e,i,n)}parseObjectData(t,e,i,n){const{iScale:s,vScale:o}=t,{xAxisKey:r="x",yAxisKey:a="y"}=this._parsing,l="x"===s.axis?r:a,c="x"===o.axis?r:a,h=[];let d,u,g,p;for(d=i,u=i+n;d<u;++d)p=e[d],g={},g[s.axis]=s.parse(P(p,l),d),h.push(Pi(P(p,c),g,o,d));return h}updateRangeFromParsed(t,e,i,n){super.updateRangeFromParsed(t,e,i,n);const s=i._custom;s&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,s.min),t.max=Math.max(t.max,s.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:i,vScale:n}=e,s=this.getParsed(t),o=s._custom,r=Oi(o)?"["+o.start+", "+o.end+"]":""+n.getLabelForValue(s[n.axis]);return{label:""+i.getLabelForValue(s[i.axis]),value:r}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,i,n){const s="reset"===n,{index:o,_cachedMeta:{vScale:r}}=this,a=r.getBasePixel(),l=r.isHorizontal(),h=this._getRuler(),d=this.resolveDataElementOptions(e,n),u=this.getSharedOptions(d),g=this.includeOptions(n,u);this.updateSharedOptions(u,n,d);for(let d=e;d<e+i;d++){const e=this.getParsed(d),i=s||c(e[r.axis])?{base:a,head:a}:this._calculateBarValuePixels(d),p=this._calculateBarIndexPixels(d,h),f=(e._stacks||{})[r.axis],m={horizontal:l,base:i.base,enableBorderRadius:!f||Oi(e._custom)||o===f._top||o===f._bottom,x:l?i.head:p.center,y:l?p.center:i.head,height:l?p.size:Math.abs(i.size),width:l?Math.abs(i.size):p.size};g&&(m.options=u||this.resolveDataElementOptions(d,t[d].active?"active":n));const b=m.options||t[d].options;Li(m,b,f,o),Di(m,b,h.ratio),this.updateElement(t[d],d,m,n)}}_getStacks(t,e){const i=this._cachedMeta.iScale,n=i.getMatchingVisibleMetas(this._type),s=i.options.stacked,o=n.length,r=[];let a,l;for(a=0;a<o;++a)if(l=n[a],l.controller.options.grouped){if(void 0!==e){const t=l.controller.getParsed(e)[l.controller._cachedMeta.vScale.axis];if(c(t)||isNaN(t))continue}if((!1===s||-1===r.indexOf(l.stack)||void 0===s&&void 0===l.stack)&&r.push(l.stack),l.index===t)break}return r.length||r.push(void 0),r}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,i){const n=this._getStacks(t,i),s=void 0!==e?n.indexOf(e):-1;return-1===s?n.length-1:s}_getRuler(){const t=this.options,e=this._cachedMeta,i=e.iScale,n=[];let s,o;for(s=0,o=e.data.length;s<o;++s)n.push(i.getPixelForValue(this.getParsed(s)[i.axis],s));const r=t.barThickness;return{min:r||ki(e),pixels:n,start:i._startPixel,end:i._endPixel,stackCount:this._getStackCount(),scale:i,grouped:t.grouped,ratio:r?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:i},options:{base:n,minBarLength:s}}=this,o=n||0,r=this.getParsed(t),a=r._custom,l=Oi(a);let h,d,u=r[e.axis],g=0,p=i?this.applyStack(e,r,i):u;p!==u&&(g=p-u,p=u),l&&(u=a.barStart,p=a.barEnd-a.barStart,0!==u&&$(u)!==$(a.barEnd)&&(g=0),g+=u);const f=c(n)||l?g:n;let m=e.getPixelForValue(f);if(h=this.chart.getDataVisibility(t)?e.getPixelForValue(g+p):m,d=h-m,Math.abs(d)<s&&(d=function(t,e,i){return 0!==t?$(t):(e.isHorizontal()?1:-1)*(e.min>=i?1:-1)}(d,e,o)*s,u===o&&(m-=d/2),h=m+d),m===e.getPixelForValue(o)){const t=$(d)*e.getLineWidthForValue(o)/2;m+=t,d-=t}return{size:d,base:m,head:h,center:h+d/2}}_calculateBarIndexPixels(t,e){const i=e.scale,n=this.options,s=n.skipNull,o=p(n.maxBarThickness,1/0);let r,a;if(e.grouped){const i=s?this._getStackCount(t):e.stackCount,l="flex"===n.barThickness?function(t,e,i,n){const s=e.pixels,o=s[t];let r=t>0?s[t-1]:null,a=t<s.length-1?s[t+1]:null;const l=i.categoryPercentage;null===r&&(r=o-(null===a?e.end-e.start:a-o)),null===a&&(a=o+o-r);const c=o-(o-Math.min(r,a))/2*l;return{chunk:Math.abs(a-r)/2*l/n,ratio:i.barPercentage,start:c}}(t,e,n,i):function(t,e,i,n){const s=i.barThickness;let o,r;return c(s)?(o=e.min*i.categoryPercentage,r=i.barPercentage):(o=s*n,r=1),{chunk:o/n,ratio:r,start:e.pixels[t]-o/2}}(t,e,n,i),h=this._getStackIndex(this.index,this._cachedMeta.stack,s?t:void 0);r=l.start+l.chunk*h+l.chunk/2,a=Math.min(o,l.chunk*l.ratio)}else r=i.getPixelForValue(this.getParsed(t)[i.axis],t),a=Math.min(o,e.min*e.ratio);return{base:r-a/2,head:r+a/2,center:r,size:a}}draw(){const t=this._cachedMeta,e=t.vScale,i=t.data,n=i.length;let s=0;for(;s<n;++s)null!==this.getParsed(s)[e.axis]&&i[s].draw(this._ctx)}}Ii.id="bar",Ii.defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}},Ii.overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};class Ri extends Si{initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,i,n){const s=super.parsePrimitiveData(t,e,i,n);for(let t=0;t<s.length;t++)s[t]._custom=this.resolveDataElementOptions(t+i).radius;return s}parseArrayData(t,e,i,n){const s=super.parseArrayData(t,e,i,n);for(let t=0;t<s.length;t++){const n=e[i+t];s[t]._custom=p(n[2],this.resolveDataElementOptions(t+i).radius)}return s}parseObjectData(t,e,i,n){const s=super.parseObjectData(t,e,i,n);for(let t=0;t<s.length;t++){const n=e[i+t];s[t]._custom=p(n&&n.r&&+n.r,this.resolveDataElementOptions(t+i).radius)}return s}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let i=t.length-1;i>=0;--i)e=Math.max(e,t[i].size(this.resolveDataElementOptions(i))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,{xScale:i,yScale:n}=e,s=this.getParsed(t),o=i.getLabelForValue(s.x),r=n.getLabelForValue(s.y),a=s._custom;return{label:e.label,value:"("+o+", "+r+(a?", "+a:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,i,n){const s="reset"===n,{iScale:o,vScale:r}=this._cachedMeta,a=this.resolveDataElementOptions(e,n),l=this.getSharedOptions(a),c=this.includeOptions(n,l),h=o.axis,d=r.axis;for(let a=e;a<e+i;a++){const e=t[a],i=!s&&this.getParsed(a),l={},u=l[h]=s?o.getPixelForDecimal(.5):o.getPixelForValue(i[h]),g=l[d]=s?r.getBasePixel():r.getPixelForValue(i[d]);l.skip=isNaN(u)||isNaN(g),c&&(l.options=this.resolveDataElementOptions(a,e.active?"active":n),s&&(l.options.radius=0)),this.updateElement(e,a,l,n)}this.updateSharedOptions(l,n,a)}resolveDataElementOptions(t,e){const i=this.getParsed(t);let n=super.resolveDataElementOptions(t,e);n.$shared&&(n=Object.assign({},n,{$shared:!1}));const s=n.radius;return"active"!==e&&(n.radius=0),n.radius+=p(i&&i._custom,s),n}}Ri.id="bubble",Ri.defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}},Ri.overrides={scales:{x:{type:"linear"},y:{type:"linear"}},plugins:{tooltip:{callbacks:{title:()=>""}}}};class Ei extends Si{constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const i=this.getDataset().data,n=this._cachedMeta;if(!1===this._parsing)n._parsed=i;else{let s,o,r=t=>+i[t];if(d(i[t])){const{key:t="value"}=this._parsing;r=e=>+P(i[e],t)}for(s=t,o=t+e;s<o;++s)n._parsed[s]=r(s)}}_getRotation(){return q(this.options.rotation-90)}_getCircumference(){return q(this.options.circumference)}_getRotationExtents(){let t=D,e=-D;for(let i=0;i<this.chart.data.datasets.length;++i)if(this.chart.isDatasetVisible(i)){const n=this.chart.getDatasetMeta(i).controller,s=n._getRotation(),o=n._getCircumference();t=Math.min(t,s),e=Math.max(e,s+o)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:i}=e,n=this._cachedMeta,s=n.data,o=this.getMaxBorderWidth()+this.getMaxOffset(s)+this.options.spacing,r=Math.max((Math.min(i.width,i.height)-o)/2,0),a=Math.min((c=r,"string"==typeof(l=this.options.cutout)&&l.endsWith("%")?parseFloat(l)/100:l/c),1);var l,c;const h=this._getRingWeight(this.index),{circumference:d,rotation:u}=this._getRotationExtents(),{ratioX:g,ratioY:p,offsetX:m,offsetY:b}=function(t,e,i){let n=1,s=1,o=0,r=0;if(e<D){const a=t,l=a+e,c=Math.cos(a),h=Math.sin(a),d=Math.cos(l),u=Math.sin(l),g=(t,e,n)=>J(t,a,l,!0)?1:Math.max(e,e*i,n,n*i),p=(t,e,n)=>J(t,a,l,!0)?-1:Math.min(e,e*i,n,n*i),f=g(0,c,d),m=g(z,h,u),b=p(C,c,d),v=p(C+z,h,u);n=(f-b)/2,s=(m-v)/2,o=-(f+b)/2,r=-(m+v)/2}return{ratioX:n,ratioY:s,offsetX:o,offsetY:r}}(u,d,a),v=(i.width-o)/g,y=(i.height-o)/p,x=Math.max(Math.min(v,y)/2,0),_=f(this.options.radius,x),w=(_-Math.max(_*a,0))/this._getVisibleDatasetWeightTotal();this.offsetX=m*_,this.offsetY=b*_,n.total=this.calculateTotal(),this.outerRadius=_-w*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-w*h,0),this.updateElements(s,0,s.length,t)}_circumference(t,e){const i=this.options,n=this._cachedMeta,s=this._getCircumference();return e&&i.animation.animateRotate||!this.chart.getDataVisibility(t)||null===n._parsed[t]||n.data[t].hidden?0:this.calculateCircumference(n._parsed[t]*s/D)}updateElements(t,e,i,n){const s="reset"===n,o=this.chart,r=o.chartArea,a=o.options.animation,l=(r.left+r.right)/2,c=(r.top+r.bottom)/2,h=s&&a.animateScale,d=h?0:this.innerRadius,u=h?0:this.outerRadius,g=this.resolveDataElementOptions(e,n),p=this.getSharedOptions(g),f=this.includeOptions(n,p);let m,b=this._getRotation();for(m=0;m<e;++m)b+=this._circumference(m,s);for(m=e;m<e+i;++m){const e=this._circumference(m,s),i=t[m],o={x:l+this.offsetX,y:c+this.offsetY,startAngle:b,endAngle:b+e,circumference:e,outerRadius:u,innerRadius:d};f&&(o.options=p||this.resolveDataElementOptions(m,i.active?"active":n)),b+=e,this.updateElement(i,m,o,n)}this.updateSharedOptions(p,n,g)}calculateTotal(){const t=this._cachedMeta,e=t.data;let i,n=0;for(i=0;i<e.length;i++){const s=t._parsed[i];null===s||isNaN(s)||!this.chart.getDataVisibility(i)||e[i].hidden||(n+=Math.abs(s))}return n}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?D*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,n=i.data.labels||[],s=Ke(e._parsed[t],i.options.locale);return{label:n[t]||"",value:s}}getMaxBorderWidth(t){let e=0;const i=this.chart;let n,s,o,r,a;if(!t)for(n=0,s=i.data.datasets.length;n<s;++n)if(i.isDatasetVisible(n)){o=i.getDatasetMeta(n),t=o.data,r=o.controller;break}if(!t)return 0;for(n=0,s=t.length;n<s;++n)a=r.resolveDataElementOptions(n),"inner"!==a.borderAlign&&(e=Math.max(e,a.borderWidth||0,a.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let i=0,n=t.length;i<n;++i){const t=this.resolveDataElementOptions(i);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let i=0;i<t;++i)this.chart.isDatasetVisible(i)&&(e+=this._getRingWeight(i));return e}_getRingWeight(t){return Math.max(p(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}Ei.id="doughnut",Ei.defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"},Ei.descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t},Ei.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i}}=t.legend.options;return e.labels.map(((e,n)=>{const s=t.getDatasetMeta(0).controller.getStyle(n);return{text:e,fillStyle:s.backgroundColor,strokeStyle:s.borderColor,lineWidth:s.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(n),index:n}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}},tooltip:{callbacks:{title:()=>"",label(t){let e=t.label;const i=": "+t.formattedValue;return h(e)?(e=e.slice(),e[0]+=i):e+=i,e}}}}};class zi extends Si{initialize(){this.enableOptionSharing=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:i,data:n=[],_dataset:s}=e,o=this.chart._animationsDisabled;let{start:r,count:a}=function(t,e,i){const n=e.length;let s=0,o=n;if(t._sorted){const{iScale:r,_parsed:a}=t,l=r.axis,{min:c,max:h,minDefined:d,maxDefined:u}=r.getUserBounds();d&&(s=Z(Math.min(ue(a,r.axis,c).lo,i?n:ue(e,l,r.getPixelForValue(c)).lo),0,n-1)),o=u?Z(Math.max(ue(a,r.axis,h).hi+1,i?0:ue(e,l,r.getPixelForValue(h)).hi+1),s,n)-s:n-s}return{start:s,count:o}}(e,n,o);this._drawStart=r,this._drawCount=a,function(t){const{xScale:e,yScale:i,_scaleRanges:n}=t,s={xmin:e.min,xmax:e.max,ymin:i.min,ymax:i.max};if(!n)return t._scaleRanges=s,!0;const o=n.xmin!==e.min||n.xmax!==e.max||n.ymin!==i.min||n.ymax!==i.max;return Object.assign(n,s),o}(e)&&(r=0,a=n.length),i._chart=this.chart,i._datasetIndex=this.index,i._decimated=!!s._decimated,i.points=n;const l=this.resolveDatasetElementOptions(t);this.options.showLine||(l.borderWidth=0),l.segment=this.options.segment,this.updateElement(i,void 0,{animated:!o,options:l},t),this.updateElements(n,r,a,t)}updateElements(t,e,i,n){const s="reset"===n,{iScale:o,vScale:r,_stacked:a,_dataset:l}=this._cachedMeta,h=this.resolveDataElementOptions(e,n),d=this.getSharedOptions(h),u=this.includeOptions(n,d),g=o.axis,p=r.axis,{spanGaps:f,segment:m}=this.options,b=H(f)?f:Number.POSITIVE_INFINITY,v=this.chart._animationsDisabled||s||"none"===n;let y=e>0&&this.getParsed(e-1);for(let h=e;h<e+i;++h){const e=t[h],i=this.getParsed(h),f=v?e:{},x=c(i[p]),_=f[g]=o.getPixelForValue(i[g],h),w=f[p]=s||x?r.getBasePixel():r.getPixelForValue(a?this.applyStack(r,i,a):i[p],h);f.skip=isNaN(_)||isNaN(w)||x,f.stop=h>0&&i[g]-y[g]>b,m&&(f.parsed=i,f.raw=l.data[h]),u&&(f.options=d||this.resolveDataElementOptions(h,e.active?"active":n)),v||this.updateElement(e,h,f,n),y=i}this.updateSharedOptions(d,n,h)}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,i=e.options&&e.options.borderWidth||0,n=t.data||[];if(!n.length)return i;const s=n[0].size(this.resolveDataElementOptions(0)),o=n[n.length-1].size(this.resolveDataElementOptions(n.length-1));return Math.max(i,s,o)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}}zi.id="line",zi.defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1},zi.overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};class ji extends Si{constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,n=i.data.labels||[],s=Ke(e._parsed[t].r,i.options.locale);return{label:n[t]||"",value:s}}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}_updateRadius(){const t=this.chart,e=t.chartArea,i=t.options,n=Math.min(e.right-e.left,e.bottom-e.top),s=Math.max(n/2,0),o=(s-Math.max(i.cutoutPercentage?s/100*i.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=s-o*this.index,this.innerRadius=this.outerRadius-o}updateElements(t,e,i,n){const s="reset"===n,o=this.chart,r=this.getDataset(),a=o.options.animation,l=this._cachedMeta.rScale,c=l.xCenter,h=l.yCenter,d=l.getIndexAngle(0)-.5*C;let u,g=d;const p=360/this.countVisibleElements();for(u=0;u<e;++u)g+=this._computeAngle(u,n,p);for(u=e;u<e+i;u++){const e=t[u];let i=g,f=g+this._computeAngle(u,n,p),m=o.getDataVisibility(u)?l.getDistanceFromCenterForValue(r.data[u]):0;g=f,s&&(a.animateScale&&(m=0),a.animateRotate&&(i=f=d));const b={x:c,y:h,innerRadius:0,outerRadius:m,startAngle:i,endAngle:f,options:this.resolveDataElementOptions(u,e.active?"active":n)};this.updateElement(e,u,b,n)}}countVisibleElements(){const t=this.getDataset(),e=this._cachedMeta;let i=0;return e.data.forEach(((e,n)=>{!isNaN(t.data[n])&&this.chart.getDataVisibility(n)&&i++})),i}_computeAngle(t,e,i){return this.chart.getDataVisibility(t)?q(this.resolveDataElementOptions(t,e).angle||i):0}}ji.id="polarArea",ji.defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0},ji.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i}}=t.legend.options;return e.labels.map(((e,n)=>{const s=t.getDatasetMeta(0).controller.getStyle(n);return{text:e,fillStyle:s.backgroundColor,strokeStyle:s.borderColor,lineWidth:s.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(n),index:n}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}},tooltip:{callbacks:{title:()=>"",label:t=>t.chart.data.labels[t.dataIndex]+": "+t.formattedValue}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};class Fi extends Ei{}Fi.id="pie",Fi.defaults={cutout:0,rotation:0,circumference:360,radius:"100%"};class Bi extends Si{getLabelAndValue(t){const e=this._cachedMeta.vScale,i=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(i[e.axis])}}update(t){const e=this._cachedMeta,i=e.dataset,n=e.data||[],s=e.iScale.getLabels();if(i.points=n,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const o={_loop:!0,_fullLoop:s.length===n.length,options:e};this.updateElement(i,void 0,o,t)}this.updateElements(n,0,n.length,t)}updateElements(t,e,i,n){const s=this.getDataset(),o=this._cachedMeta.rScale,r="reset"===n;for(let a=e;a<e+i;a++){const e=t[a],i=this.resolveDataElementOptions(a,e.active?"active":n),l=o.getPointPositionForValue(a,s.data[a]),c=r?o.xCenter:l.x,h=r?o.yCenter:l.y,d={x:c,y:h,angle:l.angle,skip:isNaN(c)||isNaN(h),options:i};this.updateElement(e,a,d,n)}}}Bi.id="radar",Bi.defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}},Bi.overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};class $i extends zi{}$i.id="scatter",$i.defaults={showLine:!1,fill:!1},$i.overrides={interaction:{mode:"point"},plugins:{tooltip:{callbacks:{title:()=>"",label:t=>"("+t.label+", "+t.formattedValue+")"}}},scales:{x:{type:"linear"},y:{type:"linear"}}};var Wi=Object.freeze({__proto__:null,BarController:Ii,BubbleController:Ri,DoughnutController:Ei,LineController:zi,PolarAreaController:ji,PieController:Fi,RadarController:Bi,ScatterController:$i});function Hi(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class Vi{constructor(t){this.options=t||{}}formats(){return Hi()}parse(t,e){return Hi()}format(t,e){return Hi()}add(t,e,i){return Hi()}diff(t,e,i){return Hi()}startOf(t,e,i){return Hi()}endOf(t,e){return Hi()}}Vi.override=function(t){Object.assign(Vi.prototype,t)};var Ni={_date:Vi};function qi(t,e){return"native"in t?{x:t.x,y:t.y}:He(t,e)}function Gi(t,e,i,n){const{controller:s,data:o,_sorted:r}=t,a=s._cachedMeta.iScale;if(a&&e===a.axis&&"r"!==e&&r&&o.length){const t=a._reversePixels?ge:ue;if(!n)return t(o,e,i);if(s._sharedOptions){const n=o[0],s="function"==typeof n.getRange&&n.getRange(e);if(s){const n=t(o,e,i-s),r=t(o,e,i+s);return{lo:n.lo,hi:r.hi}}}}return{lo:0,hi:o.length-1}}function Ui(t,e,i,n,s){const o=t.getSortedVisibleDatasetMetas(),r=i[e];for(let t=0,i=o.length;t<i;++t){const{index:i,data:a}=o[t],{lo:l,hi:c}=Gi(o[t],e,r,s);for(let t=l;t<=c;++t){const e=a[t];e.skip||n(e,i,t)}}}function Yi(t,e,i,n){const s=[];return Ut(e,t.chartArea,t._minPadding)?(Ui(t,i,e,(function(t,i,o){t.inRange(e.x,e.y,n)&&s.push({element:t,datasetIndex:i,index:o})}),!0),s):s}function Xi(t,e,i,n,s){return Ut(e,t.chartArea,t._minPadding)?"r"!==i||n?function(t,e,i,n,s){let o=[];const r=function(t){const e=-1!==t.indexOf("x"),i=-1!==t.indexOf("y");return function(t,n){const s=e?Math.abs(t.x-n.x):0,o=i?Math.abs(t.y-n.y):0;return Math.sqrt(Math.pow(s,2)+Math.pow(o,2))}}(i);let a=Number.POSITIVE_INFINITY;return Ui(t,i,e,(function(i,l,c){const h=i.inRange(e.x,e.y,s);if(n&&!h)return;const d=i.getCenterPoint(s);if(!Ut(d,t.chartArea,t._minPadding)&&!h)return;const u=r(e,d);u<a?(o=[{element:i,datasetIndex:l,index:c}],a=u):u===a&&o.push({element:i,datasetIndex:l,index:c})})),o}(t,e,i,n,s):function(t,e,i,n){let s=[];return Ui(t,i,e,(function(t,i,o){const{startAngle:r,endAngle:a}=t.getProps(["startAngle","endAngle"],n),{angle:l}=Y(t,{x:e.x,y:e.y});J(l,r,a)&&s.push({element:t,datasetIndex:i,index:o})})),s}(t,e,i,s):[]}function Qi(t,e,i,n){const s=qi(e,t),o=[],r=i.axis,a="x"===r?"inXRange":"inYRange";let l=!1;return function(t,e){const i=t.getSortedVisibleDatasetMetas();let n,s,o;for(let t=0,r=i.length;t<r;++t){({index:n,data:s}=i[t]);for(let t=0,i=s.length;t<i;++t)o=s[t],o.skip||e(o,n,t)}}(t,((t,e,i)=>{t[a](s[r],n)&&o.push({element:t,datasetIndex:e,index:i}),t.inRange(s.x,s.y,n)&&(l=!0)})),i.intersect&&!l?[]:o}var Ki={modes:{index(t,e,i,n){const s=qi(e,t),o=i.axis||"x",r=i.intersect?Yi(t,s,o,n):Xi(t,s,o,!1,n),a=[];return r.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=r[0].index,i=t.data[e];i&&!i.skip&&a.push({element:i,datasetIndex:t.index,index:e})})),a):[]},dataset(t,e,i,n){const s=qi(e,t),o=i.axis||"xy";let r=i.intersect?Yi(t,s,o,n):Xi(t,s,o,!1,n);if(r.length>0){const e=r[0].datasetIndex,i=t.getDatasetMeta(e).data;r=[];for(let t=0;t<i.length;++t)r.push({element:i[t],datasetIndex:e,index:t})}return r},point:(t,e,i,n)=>Yi(t,qi(e,t),i.axis||"xy",n),nearest:(t,e,i,n)=>Xi(t,qi(e,t),i.axis||"xy",i.intersect,n),x:(t,e,i,n)=>Qi(t,e,{axis:"x",intersect:i.intersect},n),y:(t,e,i,n)=>Qi(t,e,{axis:"y",intersect:i.intersect},n)}};const Ji=["left","top","right","bottom"];function Zi(t,e){return t.filter((t=>t.pos===e))}function tn(t,e){return t.filter((t=>-1===Ji.indexOf(t.pos)&&t.box.axis===e))}function en(t,e){return t.sort(((t,i)=>{const n=e?i:t,s=e?t:i;return n.weight===s.weight?n.index-s.index:n.weight-s.weight}))}function nn(t,e,i,n){return Math.max(t[i],e[i])+Math.max(t[n],e[n])}function sn(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function on(t,e,i,n){const{pos:s,box:o}=i,r=t.maxPadding;if(!d(s)){i.size&&(t[s]-=i.size);const e=n[i.stack]||{size:0,count:1};e.size=Math.max(e.size,i.horizontal?o.height:o.width),i.size=e.size/e.count,t[s]+=i.size}o.getPadding&&sn(r,o.getPadding());const a=Math.max(0,e.outerWidth-nn(r,t,"left","right")),l=Math.max(0,e.outerHeight-nn(r,t,"top","bottom")),c=a!==t.w,h=l!==t.h;return t.w=a,t.h=l,i.horizontal?{same:c,other:h}:{same:h,other:c}}function rn(t,e){const i=e.maxPadding;return function(t){const n={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{n[t]=Math.max(e[t],i[t])})),n}(t?["left","right"]:["top","bottom"])}function an(t,e,i,n){const s=[];let o,r,a,l,c,h;for(o=0,r=t.length,c=0;o<r;++o){a=t[o],l=a.box,l.update(a.width||e.w,a.height||e.h,rn(a.horizontal,e));const{same:r,other:d}=on(e,i,a,n);c|=r&&s.length,h=h||d,l.fullSize||s.push(a)}return c&&an(s,e,i,n)||h}function ln(t,e,i,n,s){t.top=i,t.left=e,t.right=e+n,t.bottom=i+s,t.width=n,t.height=s}function cn(t,e,i,n){const s=i.padding;let{x:o,y:r}=e;for(const a of t){const t=a.box,l=n[a.stack]||{count:1,placed:0,weight:1},c=a.stackWeight/l.weight||1;if(a.horizontal){const n=e.w*c,o=l.size||t.height;O(l.start)&&(r=l.start),t.fullSize?ln(t,s.left,r,i.outerWidth-s.right-s.left,o):ln(t,e.left+l.placed,r,n,o),l.start=r,l.placed+=n,r=t.bottom}else{const n=e.h*c,r=l.size||t.width;O(l.start)&&(o=l.start),t.fullSize?ln(t,o,s.top,r,i.outerHeight-s.bottom-s.top):ln(t,o,e.top+l.placed,r,n),l.start=o,l.placed+=n,o=t.right}}e.x=o,e.y=r}Wt.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}});var hn={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const i=t.boxes?t.boxes.indexOf(e):-1;-1!==i&&t.boxes.splice(i,1)},configure(t,e,i){e.fullSize=i.fullSize,e.position=i.position,e.weight=i.weight},update(t,e,i,n){if(!t)return;const s=ae(t.options.layout.padding),o=Math.max(e-s.width,0),r=Math.max(i-s.height,0),a=function(t){const e=function(t){const e=[];let i,n,s,o,r,a;for(i=0,n=(t||[]).length;i<n;++i)s=t[i],({position:o,options:{stack:r,stackWeight:a=1}}=s),e.push({index:i,box:s,pos:o,horizontal:s.isHorizontal(),weight:s.weight,stack:r&&o+r,stackWeight:a});return e}(t),i=en(e.filter((t=>t.box.fullSize)),!0),n=en(Zi(e,"left"),!0),s=en(Zi(e,"right")),o=en(Zi(e,"top"),!0),r=en(Zi(e,"bottom")),a=tn(e,"x"),l=tn(e,"y");return{fullSize:i,leftAndTop:n.concat(o),rightAndBottom:s.concat(l).concat(r).concat(a),chartArea:Zi(e,"chartArea"),vertical:n.concat(s).concat(l),horizontal:o.concat(r).concat(a)}}(t.boxes),l=a.vertical,c=a.horizontal;b(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const h=l.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,d=Object.freeze({outerWidth:e,outerHeight:i,padding:s,availableWidth:o,availableHeight:r,vBoxMaxWidth:o/2/h,hBoxMaxHeight:r/2}),u=Object.assign({},s);sn(u,ae(n));const g=Object.assign({maxPadding:u,w:o,h:r,x:s.left,y:s.top},s),p=function(t,e){const i=function(t){const e={};for(const i of t){const{stack:t,pos:n,stackWeight:s}=i;if(!t||!Ji.includes(n))continue;const o=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=s}return e}(t),{vBoxMaxWidth:n,hBoxMaxHeight:s}=e;let o,r,a;for(o=0,r=t.length;o<r;++o){a=t[o];const{fullSize:r}=a.box,l=i[a.stack],c=l&&a.stackWeight/l.weight;a.horizontal?(a.width=c?c*n:r&&e.availableWidth,a.height=s):(a.width=n,a.height=c?c*s:r&&e.availableHeight)}return i}(l.concat(c),d);an(a.fullSize,g,d,p),an(l,g,d,p),an(c,g,d,p)&&an(l,g,d,p),function(t){const e=t.maxPadding;function i(i){const n=Math.max(e[i]-t[i],0);return t[i]+=n,n}t.y+=i("top"),t.x+=i("left"),i("right"),i("bottom")}(g),cn(a.leftAndTop,g,d,p),g.x+=g.w,g.y+=g.h,cn(a.rightAndBottom,g,d,p),t.chartArea={left:g.left,top:g.top,right:g.left+g.w,bottom:g.top+g.h,height:g.h,width:g.w},b(a.chartArea,(e=>{const i=e.box;Object.assign(i,t.chartArea),i.update(g.w,g.h,{left:0,top:0,right:0,bottom:0})}))}};class dn{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,i){}removeEventListener(t,e,i){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,i,n){return e=Math.max(0,e||t.width),i=i||t.height,{width:e,height:Math.max(0,n?Math.floor(e/n):i)}}isAttached(t){return!0}updateConfig(t){}}class un extends dn{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const gn={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},pn=t=>null===t||""===t,fn=!!qe&&{passive:!0};function mn(t,e,i){t.canvas.removeEventListener(e,i,fn)}function bn(t,e){for(const i of t)if(i===e||i.contains(e))return!0}function vn(t,e,i){const n=t.canvas,s=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||bn(i.addedNodes,n),e=e&&!bn(i.removedNodes,n);e&&i()}));return s.observe(document,{childList:!0,subtree:!0}),s}function yn(t,e,i){const n=t.canvas,s=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||bn(i.removedNodes,n),e=e&&!bn(i.addedNodes,n);e&&i()}));return s.observe(document,{childList:!0,subtree:!0}),s}const xn=new Map;let _n=0;function wn(){const t=window.devicePixelRatio;t!==_n&&(_n=t,xn.forEach(((e,i)=>{i.currentDevicePixelRatio!==t&&e()})))}function Mn(t,e,i){const n=t.canvas,o=n&&je(n);if(!o)return;const r=s(((t,e)=>{const n=o.clientWidth;i(t,e),n<o.clientWidth&&i()}),window),a=new ResizeObserver((t=>{const e=t[0],i=e.contentRect.width,n=e.contentRect.height;0===i&&0===n||r(i,n)}));return a.observe(o),function(t,e){xn.size||window.addEventListener("resize",wn),xn.set(t,e)}(t,r),a}function Sn(t,e,i){i&&i.disconnect(),"resize"===e&&function(t){xn.delete(t),xn.size||window.removeEventListener("resize",wn)}(t)}function kn(t,e,i){const n=t.canvas,o=s((e=>{null!==t.ctx&&i(function(t,e){const i=gn[t.type]||t.type,{x:n,y:s}=He(t,e);return{type:i,chart:e,native:t,x:void 0!==n?n:null,y:void 0!==s?s:null}}(e,t))}),t,(t=>{const e=t[0];return[e,e.offsetX,e.offsetY]}));return function(t,e,i){t.addEventListener(e,i,fn)}(n,e,o),o}class Pn extends dn{acquireContext(t,e){const i=t&&t.getContext&&t.getContext("2d");return i&&i.canvas===t?(function(t,e){const i=t.style,n=t.getAttribute("height"),s=t.getAttribute("width");if(t.$chartjs={initial:{height:n,width:s,style:{display:i.display,height:i.height,width:i.width}}},i.display=i.display||"block",i.boxSizing=i.boxSizing||"border-box",pn(s)){const e=Ge(t,"width");void 0!==e&&(t.width=e)}if(pn(n))if(""===t.style.height)t.height=t.width/(e||2);else{const e=Ge(t,"height");void 0!==e&&(t.height=e)}}(t,e),i):null}releaseContext(t){const e=t.canvas;if(!e.$chartjs)return!1;const i=e.$chartjs.initial;["height","width"].forEach((t=>{const n=i[t];c(n)?e.removeAttribute(t):e.setAttribute(t,n)}));const n=i.style||{};return Object.keys(n).forEach((t=>{e.style[t]=n[t]})),e.width=e.width,delete e.$chartjs,!0}addEventListener(t,e,i){this.removeEventListener(t,e);const n=t.$proxies||(t.$proxies={}),s={attach:vn,detach:yn,resize:Mn}[e]||kn;n[e]=s(t,e,i)}removeEventListener(t,e){const i=t.$proxies||(t.$proxies={}),n=i[e];n&&(({attach:Sn,detach:Sn,resize:Sn}[e]||mn)(t,e,n),i[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,i,n){return function(t,e,i,n){const s=Be(t),o=We(s,"margin"),r=Fe(s.maxWidth,t,"clientWidth")||R,a=Fe(s.maxHeight,t,"clientHeight")||R,l=function(t,e,i){let n,s;if(void 0===e||void 0===i){const o=je(t);if(o){const t=o.getBoundingClientRect(),r=Be(o),a=We(r,"border","width"),l=We(r,"padding");e=t.width-l.width-a.width,i=t.height-l.height-a.height,n=Fe(r.maxWidth,o,"clientWidth"),s=Fe(r.maxHeight,o,"clientHeight")}else e=t.clientWidth,i=t.clientHeight}return{width:e,height:i,maxWidth:n||R,maxHeight:s||R}}(t,e,i);let{width:c,height:h}=l;if("content-box"===s.boxSizing){const t=We(s,"border","width"),e=We(s,"padding");c-=e.width+t.width,h-=e.height+t.height}return c=Math.max(0,c-o.width),h=Math.max(0,n?Math.floor(c/n):h-o.height),c=Ve(Math.min(c,r,l.maxWidth)),h=Ve(Math.min(h,a,l.maxHeight)),c&&!h&&(h=Ve(c/2)),{width:c,height:h}}(t,e,i,n)}isAttached(t){const e=je(t);return!(!e||!e.isConnected)}}class Tn{constructor(){this.x=void 0,this.y=void 0,this.active=!1,this.options=void 0,this.$animations=void 0}tooltipPosition(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}hasValue(){return H(this.x)&&H(this.y)}getProps(t,e){const i=this.$animations;if(!e||!i)return this;const n={};return t.forEach((t=>{n[t]=i[t]&&i[t].active()?i[t]._to:this[t]})),n}}Tn.defaults={},Tn.defaultRoutes=void 0;const On={values:t=>h(t)?t:""+t,numeric(t,e,i){if(0===t)return"0";const n=this.chart.options.locale;let s,o=t;if(i.length>1){const e=Math.max(Math.abs(i[0].value),Math.abs(i[i.length-1].value));(e<1e-4||e>1e15)&&(s="scientific"),o=function(t,e){let i=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;return Math.abs(i)>=1&&t!==Math.floor(t)&&(i=t-Math.floor(t)),i}(t,i)}const r=B(Math.abs(o)),a=Math.max(Math.min(-1*Math.floor(r),20),0),l={notation:s,minimumFractionDigits:a,maximumFractionDigits:a};return Object.assign(l,this.options.ticks.format),Ke(t,n,l)},logarithmic(t,e,i){if(0===t)return"0";const n=t/Math.pow(10,Math.floor(B(t)));return 1===n||2===n||5===n?On.numeric.call(this,t,e,i):""}};var Ln={formatters:On};function An(t,e,i,n,s){const o=p(n,0),r=Math.min(p(s,t.length),t.length);let a,l,c,h=0;for(i=Math.ceil(i),s&&(a=s-n,i=a/Math.floor(a/i)),c=o;c<0;)h++,c=Math.round(o+h*i);for(l=Math.max(o,0);l<r;l++)l===c&&(e.push(t[l]),h++,c=Math.round(o+h*i))}Wt.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1,borderDash:[],borderDashOffset:0,borderWidth:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:Ln.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),Wt.route("scale.ticks","color","","color"),Wt.route("scale.grid","color","","borderColor"),Wt.route("scale.grid","borderColor","","borderColor"),Wt.route("scale.title","color","","color"),Wt.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t}),Wt.describe("scales",{_fallback:"scale"}),Wt.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t});const Cn=(t,e,i)=>"top"===e||"left"===e?t[e]+i:t[e]-i;function Dn(t,e){const i=[],n=t.length/e,s=t.length;let o=0;for(;o<s;o+=n)i.push(t[Math.floor(o)]);return i}function In(t,e,i){const n=t.ticks.length,s=Math.min(e,n-1),o=t._startPixel,r=t._endPixel,a=1e-6;let l,c=t.getPixelForTick(s);if(!(i&&(l=1===n?Math.max(c-o,r-c):0===e?(t.getPixelForTick(1)-c)/2:(c-t.getPixelForTick(s-1))/2,c+=s<e?l:-l,c<o-a||c>r+a)))return c}function Rn(t){return t.drawTicks?t.tickLength:0}function En(t,e){if(!t.display)return 0;const i=le(t.font,e),n=ae(t.padding);return(h(t.text)?t.text.length:1)*i.lineHeight+n.height}function zn(t,e,i){let n=o(t);return(i&&"right"!==e||!i&&"right"===e)&&(n=(t=>"left"===t?"right":"right"===t?"left":t)(n)),n}class jn extends Tn{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:i,_suggestedMax:n}=this;return t=g(t,Number.POSITIVE_INFINITY),e=g(e,Number.NEGATIVE_INFINITY),i=g(i,Number.POSITIVE_INFINITY),n=g(n,Number.NEGATIVE_INFINITY),{min:g(t,i),max:g(e,n),minDefined:u(t),maxDefined:u(e)}}getMinMax(t){let e,{min:i,max:n,minDefined:s,maxDefined:o}=this.getUserBounds();if(s&&o)return{min:i,max:n};const r=this.getMatchingVisibleMetas();for(let a=0,l=r.length;a<l;++a)e=r[a].controller.getMinMax(this,t),s||(i=Math.min(i,e.min)),o||(n=Math.max(n,e.max));return i=o&&i>n?n:i,n=s&&i>n?i:n,{min:g(i,g(n,i)),max:g(n,g(i,n))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){m(this.options.beforeUpdate,[this])}update(t,e,i){const{beginAtZero:n,grace:s,ticks:o}=this.options,r=o.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=i=Object.assign({left:0,right:0,top:0,bottom:0},i),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+i.left+i.right:this.height+i.top+i.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function(t,e,i){const{min:n,max:s}=t,o=f(e,(s-n)/2),r=(t,e)=>i&&0===t?0:t+e;return{min:r(n,-Math.abs(o)),max:r(s,o)}}(this,s,n),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const a=r<this.ticks.length;this._convertTicksToLabels(a?Dn(this.ticks,r):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),o.display&&(o.autoSkip||"auto"===o.source)&&(this.ticks=function(t,e){const i=t.options.ticks,n=i.maxTicksLimit||function(t){const e=t.options.offset,i=t._tickSize(),n=t._length/i+(e?0:1),s=t._maxLength/i;return Math.floor(Math.min(n,s))}(t),s=i.major.enabled?function(t){const e=[];let i,n;for(i=0,n=t.length;i<n;i++)t[i].major&&e.push(i);return e}(e):[],o=s.length,r=s[0],a=s[o-1],l=[];if(o>n)return function(t,e,i,n){let s,o=0,r=i[0];for(n=Math.ceil(n),s=0;s<t.length;s++)s===r&&(e.push(t[s]),o++,r=i[o*n])}(e,l,s,o/n),l;const h=function(t,e,i){const n=function(t){const e=t.length;let i,n;if(e<2)return!1;for(n=t[0],i=1;i<e;++i)if(t[i]-t[i-1]!==n)return!1;return n}(t),s=e.length/i;if(!n)return Math.max(s,1);const o=function(t){const e=[],i=Math.sqrt(t);let n;for(n=1;n<i;n++)t%n==0&&(e.push(n),e.push(t/n));return i===(0|i)&&e.push(i),e.sort(((t,e)=>t-e)).pop(),e}(n);for(let t=0,e=o.length-1;t<e;t++){const e=o[t];if(e>s)return e}return Math.max(s,1)}(s,e,n);if(o>0){let t,i;const n=o>1?Math.round((a-r)/(o-1)):null;for(An(e,l,h,c(n)?0:r-n,r),t=0,i=o-1;t<i;t++)An(e,l,h,s[t],s[t+1]);return An(e,l,h,a,c(n)?e.length:a+n),l}return An(e,l,h),l}(this,this.ticks),this._labelSizes=null),a&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,i=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,i=!i),this._startPixel=t,this._endPixel=e,this._reversePixels=i,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){m(this.options.afterUpdate,[this])}beforeSetDimensions(){m(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){m(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),m(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){m(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let i,n,s;for(i=0,n=t.length;i<n;i++)s=t[i],s.label=m(e.callback,[s.value,i,t],this)}afterTickToLabelConversion(){m(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){m(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,i=this.ticks.length,n=e.minRotation||0,s=e.maxRotation;let o,r,a,l=n;if(!this._isVisible()||!e.display||n>=s||i<=1||!this.isHorizontal())return void(this.labelRotation=n);const c=this._getLabelSizes(),h=c.widest.width,d=c.highest.height,u=Z(this.chart.width-h,0,this.maxWidth);o=t.offset?this.maxWidth/i:u/(i-1),h+6>o&&(o=u/(i-(t.offset?.5:1)),r=this.maxHeight-Rn(t.grid)-e.padding-En(t.title,this.chart.options.font),a=Math.sqrt(h*h+d*d),l=G(Math.min(Math.asin(Z((c.highest.height+6)/o,-1,1)),Math.asin(Z(r/a,-1,1))-Math.asin(Z(d/a,-1,1)))),l=Math.max(n,Math.min(s,l))),this.labelRotation=l}afterCalculateLabelRotation(){m(this.options.afterCalculateLabelRotation,[this])}beforeFit(){m(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:i,title:n,grid:s}}=this,o=this._isVisible(),r=this.isHorizontal();if(o){const o=En(n,e.options.font);if(r?(t.width=this.maxWidth,t.height=Rn(s)+o):(t.height=this.maxHeight,t.width=Rn(s)+o),i.display&&this.ticks.length){const{first:e,last:n,widest:s,highest:o}=this._getLabelSizes(),a=2*i.padding,l=q(this.labelRotation),c=Math.cos(l),h=Math.sin(l);if(r){const e=i.mirror?0:h*s.width+c*o.height;t.height=Math.min(this.maxHeight,t.height+e+a)}else{const e=i.mirror?0:c*s.width+h*o.height;t.width=Math.min(this.maxWidth,t.width+e+a)}this._calculatePadding(e,n,h,c)}}this._handleMargins(),r?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,i,n){const{ticks:{align:s,padding:o},position:r}=this.options,a=0!==this.labelRotation,l="top"!==r&&"x"===this.axis;if(this.isHorizontal()){const r=this.getPixelForTick(0)-this.left,c=this.right-this.getPixelForTick(this.ticks.length-1);let h=0,d=0;a?l?(h=n*t.width,d=i*e.height):(h=i*t.height,d=n*e.width):"start"===s?d=e.width:"end"===s?h=t.width:(h=t.width/2,d=e.width/2),this.paddingLeft=Math.max((h-r+o)*this.width/(this.width-r),0),this.paddingRight=Math.max((d-c+o)*this.width/(this.width-c),0)}else{let i=e.height/2,n=t.height/2;"start"===s?(i=0,n=t.height):"end"===s&&(i=e.height,n=0),this.paddingTop=i+o,this.paddingBottom=n+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){m(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,i;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,i=t.length;e<i;e++)c(t[e].label)&&(t.splice(e,1),i--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let i=this.ticks;e<i.length&&(i=Dn(i,e)),this._labelSizes=t=this._computeLabelSizes(i,i.length)}return t}_computeLabelSizes(t,e){const{ctx:i,_longestTextCache:n}=this,s=[],o=[];let r,a,l,d,u,g,p,f,m,v,y,x=0,_=0;for(r=0;r<e;++r){if(d=t[r].label,u=this._resolveTickFontOptions(r),i.font=g=u.string,p=n[g]=n[g]||{data:{},gc:[]},f=u.lineHeight,m=v=0,c(d)||h(d)){if(h(d))for(a=0,l=d.length;a<l;++a)y=d[a],c(y)||h(y)||(m=Ht(i,p.data,p.gc,m,y),v+=f)}else m=Ht(i,p.data,p.gc,m,d),v=f;s.push(m),o.push(v),x=Math.max(m,x),_=Math.max(v,_)}!function(t,e){b(t,(t=>{const i=t.gc,n=i.length/2;let s;if(n>e){for(s=0;s<n;++s)delete t.data[i[s]];i.splice(0,n)}}))}(n,e);const w=s.indexOf(x),M=o.indexOf(_),S=t=>({width:s[t]||0,height:o[t]||0});return{first:S(0),last:S(e-1),widest:S(w),highest:S(M),widths:s,heights:o}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return Z(this._alignToPixels?Nt(this.chart,e,0):e,-32768,32767)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const i=e[t];return i.$context||(i.$context=function(t,e,i){return he(t,{tick:i,index:e,type:"tick"})}(this.getContext(),t,i))}return this.$context||(this.$context=he(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){const t=this.options.ticks,e=q(this.labelRotation),i=Math.abs(Math.cos(e)),n=Math.abs(Math.sin(e)),s=this._getLabelSizes(),o=t.autoSkipPadding||0,r=s?s.widest.width+o:0,a=s?s.highest.height+o:0;return this.isHorizontal()?a*i>r*n?r/i:a/n:a*n<r*i?a/i:r/n}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,i=this.chart,n=this.options,{grid:s,position:o}=n,r=s.offset,a=this.isHorizontal(),l=this.ticks.length+(r?1:0),c=Rn(s),h=[],u=s.setContext(this.getContext()),g=u.drawBorder?u.borderWidth:0,f=g/2,m=function(t){return Nt(i,t,g)};let b,v,y,x,_,w,M,S,k,P,T,O;if("top"===o)b=m(this.bottom),w=this.bottom-c,S=b-f,P=m(t.top)+f,O=t.bottom;else if("bottom"===o)b=m(this.top),P=t.top,O=m(t.bottom)-f,w=b+f,S=this.top+c;else if("left"===o)b=m(this.right),_=this.right-c,M=b-f,k=m(t.left)+f,T=t.right;else if("right"===o)b=m(this.left),k=t.left,T=m(t.right)-f,_=b+f,M=this.left+c;else if("x"===e){if("center"===o)b=m((t.top+t.bottom)/2+.5);else if(d(o)){const t=Object.keys(o)[0],e=o[t];b=m(this.chart.scales[t].getPixelForValue(e))}P=t.top,O=t.bottom,w=b+f,S=w+c}else if("y"===e){if("center"===o)b=m((t.left+t.right)/2);else if(d(o)){const t=Object.keys(o)[0],e=o[t];b=m(this.chart.scales[t].getPixelForValue(e))}_=b-f,M=_-c,k=t.left,T=t.right}const L=p(n.ticks.maxTicksLimit,l),A=Math.max(1,Math.ceil(l/L));for(v=0;v<l;v+=A){const t=s.setContext(this.getContext(v)),e=t.lineWidth,n=t.color,o=s.borderDash||[],l=t.borderDashOffset,c=t.tickWidth,d=t.tickColor,u=t.tickBorderDash||[],g=t.tickBorderDashOffset;y=In(this,v,r),void 0!==y&&(x=Nt(i,y,e),a?_=M=k=T=x:w=S=P=O=x,h.push({tx1:_,ty1:w,tx2:M,ty2:S,x1:k,y1:P,x2:T,y2:O,width:e,color:n,borderDash:o,borderDashOffset:l,tickWidth:c,tickColor:d,tickBorderDash:u,tickBorderDashOffset:g}))}return this._ticksLength=l,this._borderValue=b,h}_computeLabelItems(t){const e=this.axis,i=this.options,{position:n,ticks:s}=i,o=this.isHorizontal(),r=this.ticks,{align:a,crossAlign:l,padding:c,mirror:u}=s,g=Rn(i.grid),p=g+c,f=u?-c:p,m=-q(this.labelRotation),b=[];let v,y,x,_,w,M,S,k,P,T,O,L,A="middle";if("top"===n)M=this.bottom-f,S=this._getXAxisLabelAlignment();else if("bottom"===n)M=this.top+f,S=this._getXAxisLabelAlignment();else if("left"===n){const t=this._getYAxisLabelAlignment(g);S=t.textAlign,w=t.x}else if("right"===n){const t=this._getYAxisLabelAlignment(g);S=t.textAlign,w=t.x}else if("x"===e){if("center"===n)M=(t.top+t.bottom)/2+p;else if(d(n)){const t=Object.keys(n)[0],e=n[t];M=this.chart.scales[t].getPixelForValue(e)+p}S=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===n)w=(t.left+t.right)/2-p;else if(d(n)){const t=Object.keys(n)[0],e=n[t];w=this.chart.scales[t].getPixelForValue(e)}S=this._getYAxisLabelAlignment(g).textAlign}"y"===e&&("start"===a?A="top":"end"===a&&(A="bottom"));const C=this._getLabelSizes();for(v=0,y=r.length;v<y;++v){x=r[v],_=x.label;const t=s.setContext(this.getContext(v));k=this.getPixelForTick(v)+s.labelOffset,P=this._resolveTickFontOptions(v),T=P.lineHeight,O=h(_)?_.length:1;const e=O/2,i=t.color,a=t.textStrokeColor,c=t.textStrokeWidth;let d;if(o?(w=k,L="top"===n?"near"===l||0!==m?-O*T+T/2:"center"===l?-C.highest.height/2-e*T+T:-C.highest.height+T/2:"near"===l||0!==m?T/2:"center"===l?C.highest.height/2-e*T:C.highest.height-O*T,u&&(L*=-1)):(M=k,L=(1-O)*T/2),t.showLabelBackdrop){const e=ae(t.backdropPadding),i=C.heights[v],n=C.widths[v];let s=M+L-e.top,o=w-e.left;switch(A){case"middle":s-=i/2;break;case"bottom":s-=i}switch(S){case"center":o-=n/2;break;case"right":o-=n}d={left:o,top:s,width:n+e.width,height:i+e.height,color:t.backdropColor}}b.push({rotation:m,label:_,font:P,color:i,strokeColor:a,strokeWidth:c,textOffset:L,textAlign:S,textBaseline:A,translation:[w,M],backdrop:d})}return b}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-q(this.labelRotation))return"top"===t?"left":"right";let i="center";return"start"===e.align?i="left":"end"===e.align&&(i="right"),i}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:i,mirror:n,padding:s}}=this.options,o=t+s,r=this._getLabelSizes().widest.width;let a,l;return"left"===e?n?(l=this.right+s,"near"===i?a="left":"center"===i?(a="center",l+=r/2):(a="right",l+=r)):(l=this.right-o,"near"===i?a="right":"center"===i?(a="center",l-=r/2):(a="left",l=this.left)):"right"===e?n?(l=this.left+s,"near"===i?a="right":"center"===i?(a="center",l-=r/2):(a="left",l-=r)):(l=this.left+o,"near"===i?a="left":"center"===i?(a="center",l+=r/2):(a="right",l=this.right)):a="right",{textAlign:a,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:i,top:n,width:s,height:o}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(i,n,s,o),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const i=this.ticks.findIndex((e=>e.value===t));return i>=0?e.setContext(this.getContext(i)).lineWidth:0}drawGrid(t){const e=this.options.grid,i=this.ctx,n=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let s,o;const r=(t,e,n)=>{n.width&&n.color&&(i.save(),i.lineWidth=n.width,i.strokeStyle=n.color,i.setLineDash(n.borderDash||[]),i.lineDashOffset=n.borderDashOffset,i.beginPath(),i.moveTo(t.x,t.y),i.lineTo(e.x,e.y),i.stroke(),i.restore())};if(e.display)for(s=0,o=n.length;s<o;++s){const t=n[s];e.drawOnChartArea&&r({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&r({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{grid:i}}=this,n=i.setContext(this.getContext()),s=i.drawBorder?n.borderWidth:0;if(!s)return;const o=i.setContext(this.getContext(0)).lineWidth,r=this._borderValue;let a,l,c,h;this.isHorizontal()?(a=Nt(t,this.left,s)-s/2,l=Nt(t,this.right,o)+o/2,c=h=r):(c=Nt(t,this.top,s)-s/2,h=Nt(t,this.bottom,o)+o/2,a=l=r),e.save(),e.lineWidth=n.borderWidth,e.strokeStyle=n.borderColor,e.beginPath(),e.moveTo(a,c),e.lineTo(l,h),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,i=this._computeLabelArea();i&&Yt(e,i);const n=this._labelItems||(this._labelItems=this._computeLabelItems(t));let s,o;for(s=0,o=n.length;s<o;++s){const t=n[s],i=t.font,o=t.label;t.backdrop&&(e.fillStyle=t.backdrop.color,e.fillRect(t.backdrop.left,t.backdrop.top,t.backdrop.width,t.backdrop.height)),Jt(e,o,0,t.textOffset,i,t)}i&&Xt(e)}drawTitle(){const{ctx:t,options:{position:e,title:i,reverse:n}}=this;if(!i.display)return;const s=le(i.font),o=ae(i.padding),a=i.align;let l=s.lineHeight/2;"bottom"===e||"center"===e||d(e)?(l+=o.bottom,h(i.text)&&(l+=s.lineHeight*(i.text.length-1))):l+=o.top;const{titleX:c,titleY:u,maxWidth:g,rotation:p}=function(t,e,i,n){const{top:s,left:o,bottom:a,right:l,chart:c}=t,{chartArea:h,scales:u}=c;let g,p,f,m=0;const b=a-s,v=l-o;if(t.isHorizontal()){if(p=r(n,o,l),d(i)){const t=Object.keys(i)[0],n=i[t];f=u[t].getPixelForValue(n)+b-e}else f="center"===i?(h.bottom+h.top)/2+b-e:Cn(t,i,e);g=l-o}else{if(d(i)){const t=Object.keys(i)[0],n=i[t];p=u[t].getPixelForValue(n)-v+e}else p="center"===i?(h.left+h.right)/2-v+e:Cn(t,i,e);f=r(n,a,s),m="left"===i?-z:z}return{titleX:p,titleY:f,maxWidth:g,rotation:m}}(this,l,e,a);Jt(t,i.text,0,0,s,{color:i.color,maxWidth:g,rotation:p,textAlign:zn(a,e,n),textBaseline:"middle",translation:[c,u]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,i=p(t.grid&&t.grid.z,-1);return this._isVisible()&&this.draw===jn.prototype.draw?[{z:i,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:i+1,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),i=this.axis+"AxisID",n=[];let s,o;for(s=0,o=e.length;s<o;++s){const o=e[s];o[i]!==this.id||t&&o.type!==t||n.push(o)}return n}_resolveTickFontOptions(t){return le(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class Fn{constructor(t,e,i){this.type=t,this.scope=e,this.override=i,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let i;(function(t){return"id"in t&&"defaults"in t})(e)&&(i=this.register(e));const n=this.items,s=t.id,o=this.scope+"."+s;if(!s)throw new Error("class does not have id: "+t);return s in n||(n[s]=t,function(t,e,i){const n=w(Object.create(null),[i?Wt.get(i):{},Wt.get(e),t.defaults]);Wt.set(e,n),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((i=>{const n=i.split("."),s=n.pop(),o=[t].concat(n).join("."),r=e[i].split("."),a=r.pop(),l=r.join(".");Wt.route(o,s,l,a)}))}(e,t.defaultRoutes),t.descriptors&&Wt.describe(e,t.descriptors)}(t,o,i),this.override&&Wt.override(t.id,t.overrides)),o}get(t){return this.items[t]}unregister(t){const e=this.items,i=t.id,n=this.scope;i in e&&delete e[i],n&&i in Wt[n]&&(delete Wt[n][i],this.override&&delete jt[i])}}var Bn=new class{constructor(){this.controllers=new Fn(Si,"datasets",!0),this.elements=new Fn(Tn,"elements"),this.plugins=new Fn(Object,"plugins"),this.scales=new Fn(jn,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,i){[...e].forEach((e=>{const n=i||this._getRegistryForType(e);i||n.isForType(e)||n===this.plugins&&e.id?this._exec(t,n,e):b(e,(e=>{const n=i||this._getRegistryForType(e);this._exec(t,n,e)}))}))}_exec(t,e,i){const n=T(t);m(i["before"+n],[],i),e[t](i),m(i["after"+n],[],i)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const i=this._typedRegistries[e];if(i.isForType(t))return i}return this.plugins}_get(t,e,i){const n=e.get(t);if(void 0===n)throw new Error('"'+t+'" is not a registered '+i+".");return n}};class $n{constructor(){this._init=[]}notify(t,e,i,n){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const s=n?this._descriptors(t).filter(n):this._descriptors(t),o=this._notify(s,t,e,i);return"afterDestroy"===e&&(this._notify(s,t,"stop"),this._notify(this._init,t,"uninstall")),o}_notify(t,e,i,n){n=n||{};for(const s of t){const t=s.plugin;if(!1===m(t[i],[e,n,s.options],t)&&n.cancelable)return!1}return!0}invalidate(){c(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const i=t&&t.config,n=p(i.options&&i.options.plugins,{}),s=function(t){const e=[],i=Object.keys(Bn.plugins.items);for(let t=0;t<i.length;t++)e.push(Bn.getPlugin(i[t]));const n=t.plugins||[];for(let t=0;t<n.length;t++){const i=n[t];-1===e.indexOf(i)&&e.push(i)}return e}(i);return!1!==n||e?function(t,e,i,n){const s=[],o=t.getContext();for(let r=0;r<e.length;r++){const a=e[r],l=Wn(i[a.id],n);null!==l&&s.push({plugin:a,options:Hn(t.config,a,l,o)})}return s}(t,s,n,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],i=this._cache,n=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(n(e,i),t,"stop"),this._notify(n(i,e),t,"start")}}function Wn(t,e){return e||!1!==t?!0===t?{}:t:null}function Hn(t,e,i,n){const s=t.pluginScopeKeys(e),o=t.getOptionScopes(i,s);return t.createResolver(o,n,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function Vn(t,e){const i=Wt.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||i.indexAxis||"x"}function Nn(t,e){return"x"===t||"y"===t?t:e.axis||("top"===(i=e.position)||"bottom"===i?"x":"left"===i||"right"===i?"y":void 0)||t.charAt(0).toLowerCase();var i}function qn(t){const e=t.options||(t.options={});e.plugins=p(e.plugins,{}),e.scales=function(t,e){const i=jt[t.type]||{scales:{}},n=e.scales||{},s=Vn(t.type,e),o=Object.create(null),r=Object.create(null);return Object.keys(n).forEach((t=>{const e=n[t];if(!d(e))return console.error(`Invalid scale configuration for scale: ${t}`);if(e._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${t}`);const a=Nn(t,e),l=function(t,e){return t===e?"_index_":"_value_"}(a,s),c=i.scales||{};o[a]=o[a]||t,r[t]=M(Object.create(null),[{axis:a},e,c[a],c[l]])})),t.data.datasets.forEach((i=>{const s=i.type||t.type,a=i.indexAxis||Vn(s,e),l=(jt[s]||{}).scales||{};Object.keys(l).forEach((t=>{const e=function(t,e){let i=t;return"_index_"===t?i=e:"_value_"===t&&(i="x"===e?"y":"x"),i}(t,a),s=i[e+"AxisID"]||o[e]||e;r[s]=r[s]||Object.create(null),M(r[s],[{axis:e},n[s],l[t]])}))})),Object.keys(r).forEach((t=>{const e=r[t];M(e,[Wt.scales[e.type],Wt.scale])})),r}(t,e)}function Gn(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const Un=new Map,Yn=new Set;function Xn(t,e){let i=Un.get(t);return i||(i=e(),Un.set(t,i),Yn.add(i)),i}const Qn=(t,e,i)=>{const n=P(e,i);void 0!==n&&t.add(n)};class Kn{constructor(t){this._config=function(t){return(t=t||{}).data=Gn(t.data),qn(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=Gn(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),qn(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return Xn(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return Xn(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return Xn(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return Xn(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const i=this._scopeCache;let n=i.get(t);return n&&!e||(n=new Map,i.set(t,n)),n}getOptionScopes(t,e,i){const{options:n,type:s}=this,o=this._cachedScopes(t,i),r=o.get(e);if(r)return r;const a=new Set;e.forEach((e=>{t&&(a.add(t),e.forEach((e=>Qn(a,t,e)))),e.forEach((t=>Qn(a,n,t))),e.forEach((t=>Qn(a,jt[s]||{},t))),e.forEach((t=>Qn(a,Wt,t))),e.forEach((t=>Qn(a,Ft,t)))}));const l=Array.from(a);return 0===l.length&&l.push(Object.create(null)),Yn.has(e)&&o.set(e,l),l}chartOptionScopes(){const{options:t,type:e}=this;return[t,jt[e]||{},Wt.datasets[e]||{},{type:e},Wt,Ft]}resolveNamedOptions(t,e,i,n=[""]){const s={$shared:!0},{resolver:o,subPrefixes:r}=Jn(this._resolverCache,t,n);let a=o;(function(t,e){const{isScriptable:i,isIndexable:n}=ye(t);for(const s of e){const e=i(s),o=n(s),r=(o||e)&&t[s];if(e&&(L(r)||Zn(r))||o&&h(r))return!0}return!1})(o,e)&&(s.$shared=!1,a=ve(o,i=L(i)?i():i,this.createResolver(t,i,r)));for(const t of e)s[t]=a[t];return s}createResolver(t,e,i=[""],n){const{resolver:s}=Jn(this._resolverCache,t,i);return d(e)?ve(s,e,void 0,n):s}}function Jn(t,e,i){let n=t.get(e);n||(n=new Map,t.set(e,n));const s=i.join();let o=n.get(s);return o||(o={resolver:be(e,i),subPrefixes:i.filter((t=>!t.toLowerCase().includes("hover")))},n.set(s,o)),o}const Zn=t=>d(t)&&Object.getOwnPropertyNames(t).reduce(((e,i)=>e||L(t[i])),!1),ts=["top","bottom","left","right","chartArea"];function es(t,e){return"top"===t||"bottom"===t||-1===ts.indexOf(t)&&"x"===e}function is(t,e){return function(i,n){return i[t]===n[t]?i[e]-n[e]:i[t]-n[t]}}function ns(t){const e=t.chart,i=e.options.animation;e.notifyPlugins("afterRender"),m(i&&i.onComplete,[t],e)}function ss(t){const e=t.chart,i=e.options.animation;m(i&&i.onProgress,[t],e)}function os(t){return ze()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const rs={},as=t=>{const e=os(t);return Object.values(rs).filter((t=>t.canvas===e)).pop()};function ls(t,e,i){const n=Object.keys(t);for(const s of n){const n=+s;if(n>=e){const o=t[s];delete t[s],(i>0||n>e)&&(t[n+i]=o)}}}class cs{constructor(t,e){const i=this.config=new Kn(e),n=os(t),s=as(n);if(s)throw new Error("Canvas is already in use. Chart with ID '"+s.id+"' must be destroyed before the canvas can be reused.");const o=i.createResolver(i.chartOptionScopes(),this.getContext());this.platform=new(i.platform||function(t){return!ze()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?un:Pn}(n)),this.platform.updateConfig(i);const r=this.platform.acquireContext(n,o.aspectRatio),a=r&&r.canvas,c=a&&a.height,h=a&&a.width;this.id=l(),this.ctx=r,this.canvas=a,this.width=h,this.height=c,this._options=o,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new $n,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let i;return function(...n){return e?(clearTimeout(i),i=setTimeout(t,e,n)):t.apply(this,n),e}}((t=>this.update(t)),o.resizeDelay||0),this._dataChanges=[],rs[this.id]=this,r&&a?(ai.listen(this,"complete",ns),ai.listen(this,"progress",ss),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:i,height:n,_aspectRatio:s}=this;return c(t)?e&&s?s:n?i/n:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():Ne(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return qt(this.canvas,this.ctx),this}stop(){return ai.stop(this),this}resize(t,e){ai.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const i=this.options,n=this.canvas,s=i.maintainAspectRatio&&this.aspectRatio,o=this.platform.getMaximumSize(n,t,e,s),r=i.devicePixelRatio||this.platform.getDevicePixelRatio(),a=this.width?"resize":"attach";this.width=o.width,this.height=o.height,this._aspectRatio=this.aspectRatio,Ne(this,r,!0)&&(this.notifyPlugins("resize",{size:o}),m(i.onResize,[this,o],this),this.attached&&this._doResize(a)&&this.render())}ensureScalesHaveIDs(){b(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,i=this.scales,n=Object.keys(i).reduce(((t,e)=>(t[e]=!1,t)),{});let s=[];e&&(s=s.concat(Object.keys(e).map((t=>{const i=e[t],n=Nn(t,i),s="r"===n,o="x"===n;return{options:i,dposition:s?"chartArea":o?"bottom":"left",dtype:s?"radialLinear":o?"category":"linear"}})))),b(s,(e=>{const s=e.options,o=s.id,r=Nn(o,s),a=p(s.type,e.dtype);void 0!==s.position&&es(s.position,r)===es(e.dposition)||(s.position=e.dposition),n[o]=!0;let l=null;o in i&&i[o].type===a?l=i[o]:(l=new(Bn.getScale(a))({id:o,type:a,ctx:this.ctx,chart:this}),i[l.id]=l),l.init(s,t)})),b(n,((t,e)=>{t||delete i[e]})),b(i,(t=>{hn.configure(this,t,t.options),hn.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,i=t.length;if(t.sort(((t,e)=>t.index-e.index)),i>e){for(let t=e;t<i;++t)this._destroyDatasetMeta(t);t.splice(e,i-e)}this._sortedMetasets=t.slice(0).sort(is("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,i)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(i)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let i,n;for(this._removeUnreferencedMetasets(),i=0,n=e.length;i<n;i++){const n=e[i];let s=this.getDatasetMeta(i);const o=n.type||this.config.type;if(s.type&&s.type!==o&&(this._destroyDatasetMeta(i),s=this.getDatasetMeta(i)),s.type=o,s.indexAxis=n.indexAxis||Vn(o,this.options),s.order=n.order||0,s.index=i,s.label=""+n.label,s.visible=this.isDatasetVisible(i),s.controller)s.controller.updateIndex(i),s.controller.linkScales();else{const e=Bn.getController(o),{datasetElementType:n,dataElementType:r}=Wt.datasets[o];Object.assign(e.prototype,{dataElementType:Bn.getElement(r),datasetElementType:n&&Bn.getElement(n)}),s.controller=new e(this,i),t.push(s.controller)}}return this._updateMetasets(),t}_resetElements(){b(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const i=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),n=this._animationsDisabled=!i.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const s=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let o=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),i=!n&&-1===s.indexOf(e);e.buildOrUpdateElements(i),o=Math.max(+e.getMaxOverflow(),o)}o=this._minPadding=i.layout.autoPadding?o:0,this._updateLayout(o),n||b(s,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(is("z","_idx"));const{_active:r,_lastEvent:a}=this;a?this._eventHandler(a,!0):r.length&&this._updateHoverStyles(r,r,!0),this.render()}_updateScales(){b(this.scales,(t=>{hn.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),i=new Set(t.events);A(e,i)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:i,start:n,count:s}of e)ls(t,n,"_removeElements"===i?-s:s)}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,i=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),n=i(0);for(let t=1;t<e;t++)if(!A(n,i(t)))return;return Array.from(n).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;hn.update(this,this.width,this.height,t);const e=this.chartArea,i=e.width<=0||e.height<=0;this._layers=[],b(this.boxes,(t=>{i&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,i=this.data.datasets.length;e<i;++e)this._updateDataset(e,L(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const i=this.getDatasetMeta(t),n={meta:i,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",n)&&(i.controller._update(e),n.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",n))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(ai.has(this)?this.attached&&!ai.running(this)&&ai.start(this):(this.draw(),ns({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,i=[];let n,s;for(n=0,s=e.length;n<s;++n){const s=e[n];t&&!s.visible||i.push(s)}return i}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,i=t._clip,n=!i.disabled,s=this.chartArea,o={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",o)&&(n&&Yt(e,{left:!1===i.left?0:s.left-i.left,right:!1===i.right?this.width:s.right+i.right,top:!1===i.top?0:s.top-i.top,bottom:!1===i.bottom?this.height:s.bottom+i.bottom}),t.controller.draw(),n&&Xt(e),o.cancelable=!1,this.notifyPlugins("afterDatasetDraw",o))}getElementsAtEventForMode(t,e,i,n){const s=Ki.modes[e];return"function"==typeof s?s(this,t,i,n):[]}getDatasetMeta(t){const e=this.data.datasets[t],i=this._metasets;let n=i.filter((t=>t&&t._dataset===e)).pop();return n||(n={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},i.push(n)),n}getContext(){return this.$context||(this.$context=he(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const i=this.getDatasetMeta(t);return"boolean"==typeof i.hidden?!i.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,i){const n=i?"show":"hide",s=this.getDatasetMeta(t),o=s.controller._resolveAnimations(void 0,n);O(e)?(s.data[e].hidden=!i,this.update()):(this.setDatasetVisibility(t,i),o.update(s,{visible:i}),this.update((e=>e.datasetIndex===t?n:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),ai.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),qt(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),this.notifyPlugins("destroy"),delete rs[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,i=(i,n)=>{e.addEventListener(this,i,n),t[i]=n},n=(t,e,i)=>{t.offsetX=e,t.offsetY=i,this._eventHandler(t)};b(this.options.events,(t=>i(t,n)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,i=(i,n)=>{e.addEventListener(this,i,n),t[i]=n},n=(i,n)=>{t[i]&&(e.removeEventListener(this,i,n),delete t[i])},s=(t,e)=>{this.canvas&&this.resize(t,e)};let o;const r=()=>{n("attach",r),this.attached=!0,this.resize(),i("resize",s),i("detach",o)};o=()=>{this.attached=!1,n("resize",s),this._stop(),this._resize(0,0),i("attach",r)},e.isAttached(this.canvas)?r():o()}unbindEvents(){b(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},b(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,i){const n=i?"set":"remove";let s,o,r,a;for("dataset"===e&&(s=this.getDatasetMeta(t[0].datasetIndex),s.controller["_"+n+"DatasetHoverStyle"]()),r=0,a=t.length;r<a;++r){o=t[r];const e=o&&this.getDatasetMeta(o.datasetIndex).controller;e&&e[n+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],i=t.map((({datasetIndex:t,index:e})=>{const i=this.getDatasetMeta(t);if(!i)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:i.data[e],index:e}}));!v(i,e)&&(this._active=i,this._lastEvent=null,this._updateHoverStyles(i,e))}notifyPlugins(t,e,i){return this._plugins.notify(this,t,e,i)}_updateHoverStyles(t,e,i){const n=this.options.hover,s=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),o=s(e,t),r=i?t:s(t,e);o.length&&this.updateHoverStyle(o,n.mode,!1),r.length&&n.mode&&this.updateHoverStyle(r,n.mode,!0)}_eventHandler(t,e){const i={event:t,replay:e,cancelable:!0,inChartArea:Ut(t,this.chartArea,this._minPadding)},n=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",i,n))return;const s=this._handleEvent(t,e,i.inChartArea);return i.cancelable=!1,this.notifyPlugins("afterEvent",i,n),(s||i.changed)&&this.render(),this}_handleEvent(t,e,i){const{_active:n=[],options:s}=this,o=e,r=this._getActiveElements(t,n,i,o),a=function(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}(t),l=function(t,e,i,n){return i&&"mouseout"!==t.type?n?e:t:null}(t,this._lastEvent,i,a);i&&(this._lastEvent=null,m(s.onHover,[t,r,this],this),a&&m(s.onClick,[t,r,this],this));const c=!v(r,n);return(c||e)&&(this._active=r,this._updateHoverStyles(r,n,e)),this._lastEvent=l,c}_getActiveElements(t,e,i,n){if("mouseout"===t.type)return[];if(!i)return e;const s=this.options.hover;return this.getElementsAtEventForMode(t,s.mode,s,n)}}const hs=()=>b(cs.instances,(t=>t._plugins.invalidate())),ds=!0;function us(t,e,i){const{startAngle:n,pixelMargin:s,x:o,y:r,outerRadius:a,innerRadius:l}=e;let c=s/a;t.beginPath(),t.arc(o,r,a,n-c,i+c),l>s?(c=s/l,t.arc(o,r,l,i+c,n-c,!0)):t.arc(o,r,s,i+z,n-z),t.closePath(),t.clip()}function gs(t,e,i,n){return{x:i+t*Math.cos(e),y:n+t*Math.sin(e)}}function ps(t,e,i,n,s){const{x:o,y:r,startAngle:a,pixelMargin:l,innerRadius:c}=e,h=Math.max(e.outerRadius+n+i-l,0),d=c>0?c+n+i+l:0;let u=0;const g=s-a;if(n){const t=((c>0?c-n:0)+(h>0?h-n:0))/2;u=(g-(0!==t?g*t/(t+n):g))/2}const p=(g-Math.max(.001,g*h-i/C)/h)/2,f=a+p+u,m=s-p-u,{outerStart:b,outerEnd:v,innerStart:y,innerEnd:x}=function(t,e,i,n){const s=se(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),o=(i-e)/2,r=Math.min(o,n*e/2),a=t=>{const e=(i-Math.min(o,t))*n/2;return Z(t,0,Math.min(o,e))};return{outerStart:a(s.outerStart),outerEnd:a(s.outerEnd),innerStart:Z(s.innerStart,0,r),innerEnd:Z(s.innerEnd,0,r)}}(e,d,h,m-f),_=h-b,w=h-v,M=f+b/_,S=m-v/w,k=d+y,P=d+x,T=f+y/k,O=m-x/P;if(t.beginPath(),t.arc(o,r,h,M,S),v>0){const e=gs(w,S,o,r);t.arc(e.x,e.y,v,S,m+z)}const L=gs(P,m,o,r);if(t.lineTo(L.x,L.y),x>0){const e=gs(P,O,o,r);t.arc(e.x,e.y,x,m+z,O+Math.PI)}if(t.arc(o,r,d,m-x/d,f+y/d,!0),y>0){const e=gs(k,T,o,r);t.arc(e.x,e.y,y,T+Math.PI,f-z)}const A=gs(_,f,o,r);if(t.lineTo(A.x,A.y),b>0){const e=gs(_,M,o,r);t.arc(e.x,e.y,b,f-z,M)}t.closePath()}Object.defineProperties(cs,{defaults:{enumerable:ds,value:Wt},instances:{enumerable:ds,value:rs},overrides:{enumerable:ds,value:jt},registry:{enumerable:ds,value:Bn},version:{enumerable:ds,value:"3.7.1"},getChart:{enumerable:ds,value:as},register:{enumerable:ds,value:(...t)=>{Bn.add(...t),hs()}},unregister:{enumerable:ds,value:(...t)=>{Bn.remove(...t),hs()}}});class fs extends Tn{constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,i){const n=this.getProps(["x","y"],i),{angle:s,distance:o}=Y(n,{x:t,y:e}),{startAngle:r,endAngle:a,innerRadius:l,outerRadius:c,circumference:h}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],i),d=this.options.spacing/2,u=p(h,a-r)>=D||J(s,r,a),g=tt(o,l+d,c+d);return u&&g}getCenterPoint(t){const{x:e,y:i,startAngle:n,endAngle:s,innerRadius:o,outerRadius:r}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius","circumference"],t),{offset:a,spacing:l}=this.options,c=(n+s)/2,h=(o+r+l+a)/2;return{x:e+Math.cos(c)*h,y:i+Math.sin(c)*h}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:i}=this,n=(e.offset||0)/2,s=(e.spacing||0)/2;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=i>D?Math.floor(i/D):0,0===i||this.innerRadius<0||this.outerRadius<0)return;t.save();let o=0;if(n){o=n/2;const e=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(e)*o,Math.sin(e)*o),this.circumference>=C&&(o=n)}t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor;const r=function(t,e,i,n){const{fullCircles:s,startAngle:o,circumference:r}=e;let a=e.endAngle;if(s){ps(t,e,i,n,o+D);for(let e=0;e<s;++e)t.fill();isNaN(r)||(a=o+r%D,r%D==0&&(a+=D))}return ps(t,e,i,n,a),t.fill(),a}(t,this,o,s);(function(t,e,i,n,s){const{options:o}=e,{borderWidth:r,borderJoinStyle:a}=o,l="inner"===o.borderAlign;r&&(l?(t.lineWidth=2*r,t.lineJoin=a||"round"):(t.lineWidth=r,t.lineJoin=a||"bevel"),e.fullCircles&&function(t,e,i){const{x:n,y:s,startAngle:o,pixelMargin:r,fullCircles:a}=e,l=Math.max(e.outerRadius-r,0),c=e.innerRadius+r;let h;for(i&&us(t,e,o+D),t.beginPath(),t.arc(n,s,c,o+D,o,!0),h=0;h<a;++h)t.stroke();for(t.beginPath(),t.arc(n,s,l,o,o+D),h=0;h<a;++h)t.stroke()}(t,e,l),l&&us(t,e,s),ps(t,e,i,n,s),t.stroke())})(t,this,o,s,r),t.restore()}}function ms(t,e,i=e){t.lineCap=p(i.borderCapStyle,e.borderCapStyle),t.setLineDash(p(i.borderDash,e.borderDash)),t.lineDashOffset=p(i.borderDashOffset,e.borderDashOffset),t.lineJoin=p(i.borderJoinStyle,e.borderJoinStyle),t.lineWidth=p(i.borderWidth,e.borderWidth),t.strokeStyle=p(i.borderColor,e.borderColor)}function bs(t,e,i){t.lineTo(i.x,i.y)}function vs(t,e,i={}){const n=t.length,{start:s=0,end:o=n-1}=i,{start:r,end:a}=e,l=Math.max(s,r),c=Math.min(o,a),h=s<r&&o<r||s>a&&o>a;return{count:n,start:l,loop:e.loop,ilen:c<l&&!h?n+c-l:c-l}}function ys(t,e,i,n){const{points:s,options:o}=e,{count:r,start:a,loop:l,ilen:c}=vs(s,i,n),h=function(t){return t.stepped?Qt:t.tension||"monotone"===t.cubicInterpolationMode?Kt:bs}(o);let d,u,g,{move:p=!0,reverse:f}=n||{};for(d=0;d<=c;++d)u=s[(a+(f?c-d:d))%r],u.skip||(p?(t.moveTo(u.x,u.y),p=!1):h(t,g,u,f,o.stepped),g=u);return l&&(u=s[(a+(f?c:0))%r],h(t,g,u,f,o.stepped)),!!l}function xs(t,e,i,n){const s=e.points,{count:o,start:r,ilen:a}=vs(s,i,n),{move:l=!0,reverse:c}=n||{};let h,d,u,g,p,f,m=0,b=0;const v=t=>(r+(c?a-t:t))%o,y=()=>{g!==p&&(t.lineTo(m,p),t.lineTo(m,g),t.lineTo(m,f))};for(l&&(d=s[v(0)],t.moveTo(d.x,d.y)),h=0;h<=a;++h){if(d=s[v(h)],d.skip)continue;const e=d.x,i=d.y,n=0|e;n===u?(i<g?g=i:i>p&&(p=i),m=(b*m+e)/++b):(y(),t.lineTo(e,i),u=n,b=0,g=p=i),f=i}y()}function _s(t){const e=t.options,i=e.borderDash&&e.borderDash.length;return t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||i?ys:xs}fs.id="arc",fs.defaults={borderAlign:"center",borderColor:"#fff",borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0},fs.defaultRoutes={backgroundColor:"backgroundColor"};const ws="function"==typeof Path2D;class Ms extends Tn{constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const i=this.options;if((i.tension||"monotone"===i.cubicInterpolationMode)&&!i.stepped&&!this._pointsUpdated){const n=i.spanGaps?this._loop:this._fullLoop;Ee(this._points,i,t,n,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(t,e){const i=t.points,n=t.options.spanGaps,s=i.length;if(!s)return[];const o=!!t._loop,{start:r,end:a}=function(t,e,i,n){let s=0,o=e-1;if(i&&!n)for(;s<e&&!t[s].skip;)s++;for(;s<e&&t[s].skip;)s++;for(s%=e,i&&(o+=s);o>s&&t[o%e].skip;)o--;return o%=e,{start:s,end:o}}(i,s,o,n);return function(t,e,i,n){return n&&n.setContext&&i?function(t,e,i,n){const s=t._chart.getContext(),o=oi(t.options),{_datasetIndex:r,options:{spanGaps:a}}=t,l=i.length,c=[];let h=o,d=e[0].start,u=d;function g(t,e,n,s){const o=a?-1:1;if(t!==e){for(t+=l;i[t%l].skip;)t-=o;for(;i[e%l].skip;)e+=o;t%l!=e%l&&(c.push({start:t%l,end:e%l,loop:n,style:s}),h=s,d=e%l)}}for(const t of e){d=a?d:t.start;let e,o=i[d%l];for(u=d+1;u<=t.end;u++){const a=i[u%l];e=oi(n.setContext(he(s,{type:"segment",p0:o,p1:a,p0DataIndex:(u-1)%l,p1DataIndex:u%l,datasetIndex:r}))),ri(e,h)&&g(d,u-1,t.loop,h),o=a,h=e}d<u-1&&g(d,u-1,t.loop,h)}return c}(t,e,i,n):e}(t,!0===n?[{start:r,end:a,loop:o}]:function(t,e,i,n){const s=t.length,o=[];let r,a=e,l=t[e];for(r=e+1;r<=i;++r){const i=t[r%s];i.skip||i.stop?l.skip||(n=!1,o.push({start:e%s,end:(r-1)%s,loop:n}),e=a=i.stop?r:null):(a=r,l.skip&&(e=r)),l=i}return null!==a&&o.push({start:e%s,end:a%s,loop:n}),o}(i,r,a<r?a+s:a,!!t._fullLoop&&0===r&&a===s-1),i,e)}(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,i=t.length;return i&&e[t[i-1].end]}interpolate(t,e){const i=this.options,n=t[e],s=this.points,o=si(this,{property:e,start:n,end:n});if(!o.length)return;const r=[],a=function(t){return t.stepped?Ye:t.tension||"monotone"===t.cubicInterpolationMode?Xe:Ue}(i);let l,c;for(l=0,c=o.length;l<c;++l){const{start:c,end:h}=o[l],d=s[c],u=s[h];if(d===u){r.push(d);continue}const g=a(d,u,Math.abs((n-d[e])/(u[e]-d[e])),i.stepped);g[e]=t[e],r.push(g)}return 1===r.length?r[0]:r}pathSegment(t,e,i){return _s(this)(t,this,e,i)}path(t,e,i){const n=this.segments,s=_s(this);let o=this._loop;e=e||0,i=i||this.points.length-e;for(const r of n)o&=s(t,this,r,{start:e,end:e+i-1});return!!o}draw(t,e,i,n){const s=this.options||{};(this.points||[]).length&&s.borderWidth&&(t.save(),function(t,e,i,n){ws&&!e.options.segment?function(t,e,i,n){let s=e._path;s||(s=e._path=new Path2D,e.path(s,i,n)&&s.closePath()),ms(t,e.options),t.stroke(s)}(t,e,i,n):function(t,e,i,n){const{segments:s,options:o}=e,r=_s(e);for(const a of s)ms(t,o,a.style),t.beginPath(),r(t,e,a,{start:i,end:i+n-1})&&t.closePath(),t.stroke()}(t,e,i,n)}(t,this,i,n),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function Ss(t,e,i,n){const s=t.options,{[i]:o}=t.getProps([i],n);return Math.abs(e-o)<s.radius+s.hitRadius}Ms.id="line",Ms.defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0},Ms.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"},Ms.descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};class ks extends Tn{constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,i){const n=this.options,{x:s,y:o}=this.getProps(["x","y"],i);return Math.pow(t-s,2)+Math.pow(e-o,2)<Math.pow(n.hitRadius+n.radius,2)}inXRange(t,e){return Ss(this,t,"x",e)}inYRange(t,e){return Ss(this,t,"y",e)}getCenterPoint(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}size(t){let e=(t=t||this.options||{}).radius||0;return e=Math.max(e,e&&t.hoverRadius||0),2*(e+(e&&t.borderWidth||0))}draw(t,e){const i=this.options;this.skip||i.radius<.1||!Ut(this,e,this.size(i)/2)||(t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.fillStyle=i.backgroundColor,Gt(t,i,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}function Ps(t,e){const{x:i,y:n,base:s,width:o,height:r}=t.getProps(["x","y","base","width","height"],e);let a,l,c,h,d;return t.horizontal?(d=r/2,a=Math.min(i,s),l=Math.max(i,s),c=n-d,h=n+d):(d=o/2,a=i-d,l=i+d,c=Math.min(n,s),h=Math.max(n,s)),{left:a,top:c,right:l,bottom:h}}function Ts(t,e,i,n){return t?0:Z(e,i,n)}function Os(t,e,i,n){const s=null===e,o=null===i,r=t&&!(s&&o)&&Ps(t,n);return r&&(s||tt(e,r.left,r.right))&&(o||tt(i,r.top,r.bottom))}function Ls(t,e){t.rect(e.x,e.y,e.w,e.h)}function As(t,e,i={}){const n=t.x!==i.x?-e:0,s=t.y!==i.y?-e:0,o=(t.x+t.w!==i.x+i.w?e:0)-n,r=(t.y+t.h!==i.y+i.h?e:0)-s;return{x:t.x+n,y:t.y+s,w:t.w+o,h:t.h+r,radius:t.radius}}ks.id="point",ks.defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0},ks.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};class Cs extends Tn{constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:i,backgroundColor:n}}=this,{inner:s,outer:o}=function(t){const e=Ps(t),i=e.right-e.left,n=e.bottom-e.top,s=function(t,e,i){const n=t.options.borderWidth,s=t.borderSkipped,o=oe(n);return{t:Ts(s.top,o.top,0,i),r:Ts(s.right,o.right,0,e),b:Ts(s.bottom,o.bottom,0,i),l:Ts(s.left,o.left,0,e)}}(t,i/2,n/2),o=function(t,e,i){const{enableBorderRadius:n}=t.getProps(["enableBorderRadius"]),s=t.options.borderRadius,o=re(s),r=Math.min(e,i),a=t.borderSkipped,l=n||d(s);return{topLeft:Ts(!l||a.top||a.left,o.topLeft,0,r),topRight:Ts(!l||a.top||a.right,o.topRight,0,r),bottomLeft:Ts(!l||a.bottom||a.left,o.bottomLeft,0,r),bottomRight:Ts(!l||a.bottom||a.right,o.bottomRight,0,r)}}(t,i/2,n/2);return{outer:{x:e.left,y:e.top,w:i,h:n,radius:o},inner:{x:e.left+s.l,y:e.top+s.t,w:i-s.l-s.r,h:n-s.t-s.b,radius:{topLeft:Math.max(0,o.topLeft-Math.max(s.t,s.l)),topRight:Math.max(0,o.topRight-Math.max(s.t,s.r)),bottomLeft:Math.max(0,o.bottomLeft-Math.max(s.b,s.l)),bottomRight:Math.max(0,o.bottomRight-Math.max(s.b,s.r))}}}}(this),r=(a=o.radius).topLeft||a.topRight||a.bottomLeft||a.bottomRight?te:Ls;var a;t.save(),o.w===s.w&&o.h===s.h||(t.beginPath(),r(t,As(o,e,s)),t.clip(),r(t,As(s,-e,o)),t.fillStyle=i,t.fill("evenodd")),t.beginPath(),r(t,As(s,e)),t.fillStyle=n,t.fill(),t.restore()}inRange(t,e,i){return Os(this,t,e,i)}inXRange(t,e){return Os(this,t,null,e)}inYRange(t,e){return Os(this,null,t,e)}getCenterPoint(t){const{x:e,y:i,base:n,horizontal:s}=this.getProps(["x","y","base","horizontal"],t);return{x:s?(e+n)/2:e,y:s?i:(i+n)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}Cs.id="bar",Cs.defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0},Cs.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};var Ds=Object.freeze({__proto__:null,ArcElement:fs,LineElement:Ms,PointElement:ks,BarElement:Cs});function Is(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{value:e})}}function Rs(t){t.data.datasets.forEach((t=>{Is(t)}))}var Es={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,i)=>{if(!i.enabled)return void Rs(t);const n=t.width;t.data.datasets.forEach(((e,s)=>{const{_data:o,indexAxis:r}=e,a=t.getDatasetMeta(s),l=o||e.data;if("y"===ce([r,t.options.indexAxis]))return;if("line"!==a.type)return;const h=t.scales[a.xAxisID];if("linear"!==h.type&&"time"!==h.type)return;if(t.options.parsing)return;let d,{start:u,count:g}=function(t,e){const i=e.length;let n,s=0;const{iScale:o}=t,{min:r,max:a,minDefined:l,maxDefined:c}=o.getUserBounds();return l&&(s=Z(ue(e,o.axis,r).lo,0,i-1)),n=c?Z(ue(e,o.axis,a).hi+1,s,i)-s:i-s,{start:s,count:n}}(a,l);if(g<=(i.threshold||4*n))Is(e);else{switch(c(o)&&(e._data=l,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),i.algorithm){case"lttb":d=function(t,e,i,n,s){const o=s.samples||n;if(o>=i)return t.slice(e,e+i);const r=[],a=(i-2)/(o-2);let l=0;const c=e+i-1;let h,d,u,g,p,f=e;for(r[l++]=t[f],h=0;h<o-2;h++){let n,s=0,o=0;const c=Math.floor((h+1)*a)+1+e,m=Math.min(Math.floor((h+2)*a)+1,i)+e,b=m-c;for(n=c;n<m;n++)s+=t[n].x,o+=t[n].y;s/=b,o/=b;const v=Math.floor(h*a)+1+e,y=Math.min(Math.floor((h+1)*a)+1,i)+e,{x,y:_}=t[f];for(u=g=-1,n=v;n<y;n++)g=.5*Math.abs((x-s)*(t[n].y-_)-(x-t[n].x)*(o-_)),g>u&&(u=g,d=t[n],p=n);r[l++]=d,f=p}return r[l++]=t[c],r}(l,u,g,n,i);break;case"min-max":d=function(t,e,i,n){let s,o,r,a,l,h,d,u,g,p,f=0,m=0;const b=[],v=e+i-1,y=t[e].x,x=t[v].x-y;for(s=e;s<e+i;++s){o=t[s],r=(o.x-y)/x*n,a=o.y;const e=0|r;if(e===l)a<g?(g=a,h=s):a>p&&(p=a,d=s),f=(m*f+o.x)/++m;else{const i=s-1;if(!c(h)&&!c(d)){const e=Math.min(h,d),n=Math.max(h,d);e!==u&&e!==i&&b.push({...t[e],x:f}),n!==u&&n!==i&&b.push({...t[n],x:f})}s>0&&i!==u&&b.push(t[i]),b.push(o),l=e,m=0,g=p=a,h=d=u=s}}return b}(l,u,g,n);break;default:throw new Error(`Unsupported decimation algorithm '${i.algorithm}'`)}e._decimated=d}}))},destroy(t){Rs(t)}};function zs(t,e,i){const n=function(t){const e=t.options,i=e.fill;let n=p(i&&i.target,i);return void 0===n&&(n=!!e.backgroundColor),!1!==n&&null!==n&&(!0===n?"origin":n)}(t);if(d(n))return!isNaN(n.value)&&n;let s=parseFloat(n);return u(s)&&Math.floor(s)===s?("-"!==n[0]&&"+"!==n[0]||(s=e+s),!(s===e||s<0||s>=i)&&s):["origin","start","end","stack","shape"].indexOf(n)>=0&&n}class js{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,i){const{x:n,y:s,radius:o}=this;return e=e||{start:0,end:D},t.arc(n,s,o,e.end,e.start,!0),!i.bounds}interpolate(t){const{x:e,y:i,radius:n}=this,s=t.angle;return{x:e+Math.cos(s)*n,y:i+Math.sin(s)*n,angle:s}}}function Fs(t,e,i){for(;e>t;e--){const t=i[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function Bs(t,e,i){const n=[];for(let s=0;s<i.length;s++){const o=i[s],{first:r,last:a,point:l}=$s(o,e,"x");if(!(!l||r&&a))if(r)n.unshift(l);else if(t.push(l),!a)break}t.push(...n)}function $s(t,e,i){const n=t.interpolate(e,i);if(!n)return{};const s=n[i],o=t.segments,r=t.points;let a=!1,l=!1;for(let t=0;t<o.length;t++){const e=o[t],n=r[e.start][i],c=r[e.end][i];if(tt(s,n,c)){a=s===n,l=s===c;break}}return{first:a,last:l,point:n}}function Ws(t){const{chart:e,fill:i,line:n}=t;if(u(i))return function(t,e){const i=t.getDatasetMeta(e);return i&&t.isDatasetVisible(e)?i.dataset:null}(e,i);if("stack"===i)return function(t){const{scale:e,index:i,line:n}=t,s=[],o=n.segments,r=n.points,a=function(t,e){const i=[],n=t.getMatchingVisibleMetas("line");for(let t=0;t<n.length;t++){const s=n[t];if(s.index===e)break;s.hidden||i.unshift(s.dataset)}return i}(e,i);a.push(Hs({x:null,y:e.bottom},n));for(let t=0;t<o.length;t++){const e=o[t];for(let t=e.start;t<=e.end;t++)Bs(s,r[t],a)}return new Ms({points:s,options:{}})}(t);if("shape"===i)return!0;const s=function(t){return(t.scale||{}).getPointPositionForValue?function(t){const{scale:e,fill:i}=t,n=e.options,s=e.getLabels().length,o=[],r=n.reverse?e.max:e.min,a=n.reverse?e.min:e.max;let l,c,h;if(h="start"===i?r:"end"===i?a:d(i)?i.value:e.getBaseValue(),n.grid.circular)return c=e.getPointPositionForValue(0,r),new js({x:c.x,y:c.y,radius:e.getDistanceFromCenterForValue(h)});for(l=0;l<s;++l)o.push(e.getPointPositionForValue(l,h));return o}(t):function(t){const{scale:e={},fill:i}=t;let n,s=null;return"start"===i?s=e.bottom:"end"===i?s=e.top:d(i)?s=e.getPixelForValue(i.value):e.getBasePixel&&(s=e.getBasePixel()),u(s)?(n=e.isHorizontal(),{x:n?s:null,y:n?null:s}):null}(t)}(t);return s instanceof js?s:Hs(s,n)}function Hs(t,e){let i=[],n=!1;return h(t)?(n=!0,i=t):i=function(t,e){const{x:i=null,y:n=null}=t||{},s=e.points,o=[];return e.segments.forEach((({start:t,end:e})=>{e=Fs(t,e,s);const r=s[t],a=s[e];null!==n?(o.push({x:r.x,y:n}),o.push({x:a.x,y:n})):null!==i&&(o.push({x:i,y:r.y}),o.push({x:i,y:a.y}))})),o}(t,e),i.length?new Ms({points:i,options:{tension:0},_loop:n,_fullLoop:n}):null}function Vs(t,e,i){let n=t[e].fill;const s=[e];let o;if(!i)return n;for(;!1!==n&&-1===s.indexOf(n);){if(!u(n))return n;if(o=t[n],!o)return!1;if(o.visible)return n;s.push(n),n=o.fill}return!1}function Ns(t,e,i){const{segments:n,points:s}=e;let o=!0,r=!1;t.beginPath();for(const a of n){const{start:n,end:l}=a,c=s[n],h=s[Fs(n,l,s)];o?(t.moveTo(c.x,c.y),o=!1):(t.lineTo(c.x,i),t.lineTo(c.x,c.y)),r=!!e.pathSegment(t,a,{move:r}),r?t.closePath():t.lineTo(h.x,i)}t.lineTo(e.first().x,i),t.closePath(),t.clip()}function qs(t,e,i,n){if(n)return;let s=e[t],o=i[t];return"angle"===t&&(s=K(s),o=K(o)),{property:t,start:s,end:o}}function Gs(t,e,i,n){return t&&e?n(t[i],e[i]):t?t[i]:e?e[i]:0}function Us(t,e,i){const{top:n,bottom:s}=e.chart.chartArea,{property:o,start:r,end:a}=i||{};"x"===o&&(t.beginPath(),t.rect(r,n,a-r,s-n),t.clip())}function Ys(t,e,i,n){const s=e.interpolate(i,n);s&&t.lineTo(s.x,s.y)}function Xs(t,e){const{line:i,target:n,property:s,color:o,scale:r}=e,a=function(t,e,i){const n=t.segments,s=t.points,o=e.points,r=[];for(const t of n){let{start:n,end:a}=t;a=Fs(n,a,s);const l=qs(i,s[n],s[a],t.loop);if(!e.segments){r.push({source:t,target:l,start:s[n],end:s[a]});continue}const c=si(e,l);for(const e of c){const n=qs(i,o[e.start],o[e.end],e.loop),a=ni(t,s,n);for(const t of a)r.push({source:t,target:e,start:{[i]:Gs(l,n,"start",Math.max)},end:{[i]:Gs(l,n,"end",Math.min)}})}}return r}(i,n,s);for(const{source:e,target:l,start:c,end:h}of a){const{style:{backgroundColor:a=o}={}}=e,d=!0!==n;t.save(),t.fillStyle=a,Us(t,r,d&&qs(s,c,h)),t.beginPath();const u=!!i.pathSegment(t,e);let g;if(d){u?t.closePath():Ys(t,n,h,s);const e=!!n.pathSegment(t,l,{move:u,reverse:!0});g=u&&e,g||Ys(t,n,c,s)}t.closePath(),t.fill(g?"evenodd":"nonzero"),t.restore()}}function Qs(t,e,i){const n=Ws(e),{line:s,scale:o,axis:r}=e,a=s.options,l=a.fill,c=a.backgroundColor,{above:h=c,below:d=c}=l||{};n&&s.points.length&&(Yt(t,i),function(t,e){const{line:i,target:n,above:s,below:o,area:r,scale:a}=e,l=i._loop?"angle":e.axis;t.save(),"x"===l&&o!==s&&(Ns(t,n,r.top),Xs(t,{line:i,target:n,color:s,scale:a,property:l}),t.restore(),t.save(),Ns(t,n,r.bottom)),Xs(t,{line:i,target:n,color:o,scale:a,property:l}),t.restore()}(t,{line:s,target:n,above:h,below:d,area:i,scale:o,axis:r}),Xt(t))}var Ks={id:"filler",afterDatasetsUpdate(t,e,i){const n=(t.data.datasets||[]).length,s=[];let o,r,a,l;for(r=0;r<n;++r)o=t.getDatasetMeta(r),a=o.dataset,l=null,a&&a.options&&a instanceof Ms&&(l={visible:t.isDatasetVisible(r),index:r,fill:zs(a,r,n),chart:t,axis:o.controller.options.indexAxis,scale:o.vScale,line:a}),o.$filler=l,s.push(l);for(r=0;r<n;++r)l=s[r],l&&!1!==l.fill&&(l.fill=Vs(s,r,i.propagate))},beforeDraw(t,e,i){const n="beforeDraw"===i.drawTime,s=t.getSortedVisibleDatasetMetas(),o=t.chartArea;for(let e=s.length-1;e>=0;--e){const i=s[e].$filler;i&&(i.line.updateControlPoints(o,i.axis),n&&Qs(t.ctx,i,o))}},beforeDatasetsDraw(t,e,i){if("beforeDatasetsDraw"!==i.drawTime)return;const n=t.getSortedVisibleDatasetMetas();for(let e=n.length-1;e>=0;--e){const i=n[e].$filler;i&&Qs(t.ctx,i,t.chartArea)}},beforeDatasetDraw(t,e,i){const n=e.meta.$filler;n&&!1!==n.fill&&"beforeDatasetDraw"===i.drawTime&&Qs(t.ctx,n,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const Js=(t,e)=>{let{boxHeight:i=e,boxWidth:n=e}=t;return t.usePointStyle&&(i=Math.min(i,e),n=Math.min(n,e)),{boxWidth:n,boxHeight:i,itemHeight:Math.max(e,i)}};class Zs extends Tn{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,i){this.maxWidth=t,this.maxHeight=e,this._margins=i,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=m(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,i)=>t.sort(e,i,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const i=t.labels,n=le(i.font),s=n.size,o=this._computeTitleHeight(),{boxWidth:r,itemHeight:a}=Js(i,s);let l,c;e.font=n.string,this.isHorizontal()?(l=this.maxWidth,c=this._fitRows(o,s,r,a)+10):(c=this.maxHeight,l=this._fitCols(o,s,r,a)+10),this.width=Math.min(l,t.maxWidth||this.maxWidth),this.height=Math.min(c,t.maxHeight||this.maxHeight)}_fitRows(t,e,i,n){const{ctx:s,maxWidth:o,options:{labels:{padding:r}}}=this,a=this.legendHitBoxes=[],l=this.lineWidths=[0],c=n+r;let h=t;s.textAlign="left",s.textBaseline="middle";let d=-1,u=-c;return this.legendItems.forEach(((t,g)=>{const p=i+e/2+s.measureText(t.text).width;(0===g||l[l.length-1]+p+2*r>o)&&(h+=c,l[l.length-(g>0?0:1)]=0,u+=c,d++),a[g]={left:0,top:u,row:d,width:p,height:n},l[l.length-1]+=p+r})),h}_fitCols(t,e,i,n){const{ctx:s,maxHeight:o,options:{labels:{padding:r}}}=this,a=this.legendHitBoxes=[],l=this.columnSizes=[],c=o-t;let h=r,d=0,u=0,g=0,p=0;return this.legendItems.forEach(((t,o)=>{const f=i+e/2+s.measureText(t.text).width;o>0&&u+n+2*r>c&&(h+=d+r,l.push({width:d,height:u}),g+=d+r,p++,d=u=0),a[o]={left:g,top:u,col:p,width:f,height:n},d=Math.max(d,f),u+=n+r})),h+=d,l.push({width:d,height:u}),h}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:i,labels:{padding:n},rtl:s}}=this,o=Je(s,this.left,this.width);if(this.isHorizontal()){let s=0,a=r(i,this.left+n,this.right-this.lineWidths[s]);for(const l of e)s!==l.row&&(s=l.row,a=r(i,this.left+n,this.right-this.lineWidths[s])),l.top+=this.top+t+n,l.left=o.leftForLtr(o.x(a),l.width),a+=l.width+n}else{let s=0,a=r(i,this.top+t+n,this.bottom-this.columnSizes[s].height);for(const l of e)l.col!==s&&(s=l.col,a=r(i,this.top+t+n,this.bottom-this.columnSizes[s].height)),l.top=a,l.left+=this.left+n,l.left=o.leftForLtr(o.x(l.left),l.width),a+=l.height+n}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;Yt(t,this),this._draw(),Xt(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:i,ctx:n}=this,{align:s,labels:o}=t,a=Wt.color,l=Je(t.rtl,this.left,this.width),c=le(o.font),{color:h,padding:d}=o,u=c.size,g=u/2;let f;this.drawTitle(),n.textAlign=l.textAlign("left"),n.textBaseline="middle",n.lineWidth=.5,n.font=c.string;const{boxWidth:m,boxHeight:b,itemHeight:v}=Js(o,u),y=this.isHorizontal(),x=this._computeTitleHeight();f=y?{x:r(s,this.left+d,this.right-i[0]),y:this.top+d+x,line:0}:{x:this.left+d,y:r(s,this.top+x+d,this.bottom-e[0].height),line:0},Ze(this.ctx,t.textDirection);const _=v+d;this.legendItems.forEach(((w,M)=>{n.strokeStyle=w.fontColor||h,n.fillStyle=w.fontColor||h;const S=n.measureText(w.text).width,k=l.textAlign(w.textAlign||(w.textAlign=o.textAlign)),P=m+g+S;let T=f.x,O=f.y;l.setWidth(this.width),y?M>0&&T+P+d>this.right&&(O=f.y+=_,f.line++,T=f.x=r(s,this.left+d,this.right-i[f.line])):M>0&&O+_>this.bottom&&(T=f.x=T+e[f.line].width+d,f.line++,O=f.y=r(s,this.top+x+d,this.bottom-e[f.line].height)),function(t,e,i){if(isNaN(m)||m<=0||isNaN(b)||b<0)return;n.save();const s=p(i.lineWidth,1);if(n.fillStyle=p(i.fillStyle,a),n.lineCap=p(i.lineCap,"butt"),n.lineDashOffset=p(i.lineDashOffset,0),n.lineJoin=p(i.lineJoin,"miter"),n.lineWidth=s,n.strokeStyle=p(i.strokeStyle,a),n.setLineDash(p(i.lineDash,[])),o.usePointStyle){const o={radius:m*Math.SQRT2/2,pointStyle:i.pointStyle,rotation:i.rotation,borderWidth:s},r=l.xPlus(t,m/2);Gt(n,o,r,e+g)}else{const o=e+Math.max((u-b)/2,0),r=l.leftForLtr(t,m),a=re(i.borderRadius);n.beginPath(),Object.values(a).some((t=>0!==t))?te(n,{x:r,y:o,w:m,h:b,radius:a}):n.rect(r,o,m,b),n.fill(),0!==s&&n.stroke()}n.restore()}(l.x(T),O,w),T=((t,e,i,n)=>t===(n?"left":"right")?i:"center"===t?(e+i)/2:e)(k,T+m+g,y?T+P:this.right,t.rtl),function(t,e,i){Jt(n,i.text,t,e+v/2,c,{strikethrough:i.hidden,textAlign:l.textAlign(i.textAlign)})}(l.x(T),O,w),y?f.x+=P+d:f.y+=_})),ti(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,i=le(e.font),n=ae(e.padding);if(!e.display)return;const s=Je(t.rtl,this.left,this.width),a=this.ctx,l=e.position,c=i.size/2,h=n.top+c;let d,u=this.left,g=this.width;if(this.isHorizontal())g=Math.max(...this.lineWidths),d=this.top+h,u=r(t.align,u,this.right-g);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);d=h+r(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const p=r(l,u,u+g);a.textAlign=s.textAlign(o(l)),a.textBaseline="middle",a.strokeStyle=e.color,a.fillStyle=e.color,a.font=i.string,Jt(a,e.text,p,d,i)}_computeTitleHeight(){const t=this.options.title,e=le(t.font),i=ae(t.padding);return t.display?e.lineHeight+i.height:0}_getLegendItemAt(t,e){let i,n,s;if(tt(t,this.left,this.right)&&tt(e,this.top,this.bottom))for(s=this.legendHitBoxes,i=0;i<s.length;++i)if(n=s[i],tt(t,n.left,n.left+n.width)&&tt(e,n.top,n.top+n.height))return this.legendItems[i];return null}handleEvent(t){const e=this.options;if(!function(t,e){return!("mousemove"!==t||!e.onHover&&!e.onLeave)||!(!e.onClick||"click"!==t&&"mouseup"!==t)}(t.type,e))return;const i=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type){const o=this._hoveredItem,r=(s=i,null!==(n=o)&&null!==s&&n.datasetIndex===s.datasetIndex&&n.index===s.index);o&&!r&&m(e.onLeave,[t,o,this],this),this._hoveredItem=i,i&&!r&&m(e.onHover,[t,i,this],this)}else i&&m(e.onClick,[t,i,this],this);var n,s}}var to={id:"legend",_element:Zs,start(t,e,i){const n=t.legend=new Zs({ctx:t.ctx,options:i,chart:t});hn.configure(t,n,i),hn.addBox(t,n)},stop(t){hn.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,i){const n=t.legend;hn.configure(t,n,i),n.options=i},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,i){const n=e.datasetIndex,s=i.chart;s.isDatasetVisible(n)?(s.hide(n),e.hidden=!0):(s.show(n),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:i,pointStyle:n,textAlign:s,color:o}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const r=t.controller.getStyle(i?0:void 0),a=ae(r.borderWidth);return{text:e[t.index].label,fillStyle:r.backgroundColor,fontColor:o,hidden:!t.visible,lineCap:r.borderCapStyle,lineDash:r.borderDash,lineDashOffset:r.borderDashOffset,lineJoin:r.borderJoinStyle,lineWidth:(a.width+a.height)/4,strokeStyle:r.borderColor,pointStyle:n||r.pointStyle,rotation:r.rotation,textAlign:s||r.textAlign,borderRadius:0,datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class eo extends Tn{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const i=this.options;if(this.left=0,this.top=0,!i.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const n=h(i.text)?i.text.length:1;this._padding=ae(i.padding);const s=n*le(i.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=s:this.width=s}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:i,bottom:n,right:s,options:o}=this,a=o.align;let l,c,h,d=0;return this.isHorizontal()?(c=r(a,i,s),h=e+t,l=s-i):("left"===o.position?(c=i+t,h=r(a,n,e),d=-.5*C):(c=s-t,h=r(a,e,n),d=.5*C),l=n-e),{titleX:c,titleY:h,maxWidth:l,rotation:d}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const i=le(e.font),n=i.lineHeight/2+this._padding.top,{titleX:s,titleY:r,maxWidth:a,rotation:l}=this._drawArgs(n);Jt(t,e.text,0,0,i,{color:e.color,maxWidth:a,rotation:l,textAlign:o(e.align),textBaseline:"middle",translation:[s,r]})}}var io={id:"title",_element:eo,start(t,e,i){!function(t,e){const i=new eo({ctx:t.ctx,options:e,chart:t});hn.configure(t,i,e),hn.addBox(t,i),t.titleBlock=i}(t,i)},stop(t){const e=t.titleBlock;hn.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,i){const n=t.titleBlock;hn.configure(t,n,i),n.options=i},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const no=new WeakMap;var so={id:"subtitle",start(t,e,i){const n=new eo({ctx:t.ctx,options:i,chart:t});hn.configure(t,n,i),hn.addBox(t,n),no.set(t,n)},stop(t){hn.removeBox(t,no.get(t)),no.delete(t)},beforeUpdate(t,e,i){const n=no.get(t);hn.configure(t,n,i),n.options=i},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const oo={average(t){if(!t.length)return!1;let e,i,n=0,s=0,o=0;for(e=0,i=t.length;e<i;++e){const i=t[e].element;if(i&&i.hasValue()){const t=i.tooltipPosition();n+=t.x,s+=t.y,++o}}return{x:n/o,y:s/o}},nearest(t,e){if(!t.length)return!1;let i,n,s,o=e.x,r=e.y,a=Number.POSITIVE_INFINITY;for(i=0,n=t.length;i<n;++i){const n=t[i].element;if(n&&n.hasValue()){const t=X(e,n.getCenterPoint());t<a&&(a=t,s=n)}}if(s){const t=s.tooltipPosition();o=t.x,r=t.y}return{x:o,y:r}}};function ro(t,e){return e&&(h(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function ao(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function lo(t,e){const{element:i,datasetIndex:n,index:s}=e,o=t.getDatasetMeta(n).controller,{label:r,value:a}=o.getLabelAndValue(s);return{chart:t,label:r,parsed:o.getParsed(s),raw:t.data.datasets[n].data[s],formattedValue:a,dataset:o.getDataset(),dataIndex:s,datasetIndex:n,element:i}}function co(t,e){const i=t.chart.ctx,{body:n,footer:s,title:o}=t,{boxWidth:r,boxHeight:a}=e,l=le(e.bodyFont),c=le(e.titleFont),h=le(e.footerFont),d=o.length,u=s.length,g=n.length,p=ae(e.padding);let f=p.height,m=0,v=n.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);v+=t.beforeBody.length+t.afterBody.length,d&&(f+=d*c.lineHeight+(d-1)*e.titleSpacing+e.titleMarginBottom),v&&(f+=g*(e.displayColors?Math.max(a,l.lineHeight):l.lineHeight)+(v-g)*l.lineHeight+(v-1)*e.bodySpacing),u&&(f+=e.footerMarginTop+u*h.lineHeight+(u-1)*e.footerSpacing);let y=0;const x=function(t){m=Math.max(m,i.measureText(t).width+y)};return i.save(),i.font=c.string,b(t.title,x),i.font=l.string,b(t.beforeBody.concat(t.afterBody),x),y=e.displayColors?r+2+e.boxPadding:0,b(n,(t=>{b(t.before,x),b(t.lines,x),b(t.after,x)})),y=0,i.font=h.string,b(t.footer,x),i.restore(),m+=p.width,{width:m,height:f}}function ho(t,e,i,n){const{x:s,width:o}=i,{width:r,chartArea:{left:a,right:l}}=t;let c="center";return"center"===n?c=s<=(a+l)/2?"left":"right":s<=o/2?c="left":s>=r-o/2&&(c="right"),function(t,e,i,n){const{x:s,width:o}=n,r=i.caretSize+i.caretPadding;return"left"===t&&s+o+r>e.width||"right"===t&&s-o-r<0||void 0}(c,t,e,i)&&(c="center"),c}function uo(t,e,i){const n=i.yAlign||e.yAlign||function(t,e){const{y:i,height:n}=e;return i<n/2?"top":i>t.height-n/2?"bottom":"center"}(t,i);return{xAlign:i.xAlign||e.xAlign||ho(t,e,i,n),yAlign:n}}function go(t,e,i,n){const{caretSize:s,caretPadding:o,cornerRadius:r}=t,{xAlign:a,yAlign:l}=i,c=s+o,{topLeft:h,topRight:d,bottomLeft:u,bottomRight:g}=re(r);let p=function(t,e){let{x:i,width:n}=t;return"right"===e?i-=n:"center"===e&&(i-=n/2),i}(e,a);const f=function(t,e,i){let{y:n,height:s}=t;return"top"===e?n+=i:n-="bottom"===e?s+i:s/2,n}(e,l,c);return"center"===l?"left"===a?p+=c:"right"===a&&(p-=c):"left"===a?p-=Math.max(h,u)+s:"right"===a&&(p+=Math.max(d,g)+s),{x:Z(p,0,n.width-e.width),y:Z(f,0,n.height-e.height)}}function po(t,e,i){const n=ae(i.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-n.right:t.x+n.left}function fo(t){return ro([],ao(t))}function mo(t,e){const i=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return i?t.override(i):t}class bo extends Tn{constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart||t._chart,this._chart=this.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,i=this.options.setContext(this.getContext()),n=i.enabled&&e.options.animation&&i.animations,s=new ui(this.chart,n);return n._cacheable&&(this._cachedAnimations=Object.freeze(s)),s}getContext(){return this.$context||(this.$context=(this,he(this.chart.getContext(),{tooltip:this,tooltipItems:this._tooltipItems,type:"tooltip"})))}getTitle(t,e){const{callbacks:i}=e,n=i.beforeTitle.apply(this,[t]),s=i.title.apply(this,[t]),o=i.afterTitle.apply(this,[t]);let r=[];return r=ro(r,ao(n)),r=ro(r,ao(s)),r=ro(r,ao(o)),r}getBeforeBody(t,e){return fo(e.callbacks.beforeBody.apply(this,[t]))}getBody(t,e){const{callbacks:i}=e,n=[];return b(t,(t=>{const e={before:[],lines:[],after:[]},s=mo(i,t);ro(e.before,ao(s.beforeLabel.call(this,t))),ro(e.lines,s.label.call(this,t)),ro(e.after,ao(s.afterLabel.call(this,t))),n.push(e)})),n}getAfterBody(t,e){return fo(e.callbacks.afterBody.apply(this,[t]))}getFooter(t,e){const{callbacks:i}=e,n=i.beforeFooter.apply(this,[t]),s=i.footer.apply(this,[t]),o=i.afterFooter.apply(this,[t]);let r=[];return r=ro(r,ao(n)),r=ro(r,ao(s)),r=ro(r,ao(o)),r}_createItems(t){const e=this._active,i=this.chart.data,n=[],s=[],o=[];let r,a,l=[];for(r=0,a=e.length;r<a;++r)l.push(lo(this.chart,e[r]));return t.filter&&(l=l.filter(((e,n,s)=>t.filter(e,n,s,i)))),t.itemSort&&(l=l.sort(((e,n)=>t.itemSort(e,n,i)))),b(l,(e=>{const i=mo(t.callbacks,e);n.push(i.labelColor.call(this,e)),s.push(i.labelPointStyle.call(this,e)),o.push(i.labelTextColor.call(this,e))})),this.labelColors=n,this.labelPointStyles=s,this.labelTextColors=o,this.dataPoints=l,l}update(t,e){const i=this.options.setContext(this.getContext()),n=this._active;let s,o=[];if(n.length){const t=oo[i.position].call(this,n,this._eventPosition);o=this._createItems(i),this.title=this.getTitle(o,i),this.beforeBody=this.getBeforeBody(o,i),this.body=this.getBody(o,i),this.afterBody=this.getAfterBody(o,i),this.footer=this.getFooter(o,i);const e=this._size=co(this,i),r=Object.assign({},t,e),a=uo(this.chart,i,r),l=go(i,r,a,this.chart);this.xAlign=a.xAlign,this.yAlign=a.yAlign,s={opacity:1,x:l.x,y:l.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(s={opacity:0});this._tooltipItems=o,this.$context=void 0,s&&this._resolveAnimations().update(this,s),t&&i.external&&i.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,i,n){const s=this.getCaretPosition(t,i,n);e.lineTo(s.x1,s.y1),e.lineTo(s.x2,s.y2),e.lineTo(s.x3,s.y3)}getCaretPosition(t,e,i){const{xAlign:n,yAlign:s}=this,{caretSize:o,cornerRadius:r}=i,{topLeft:a,topRight:l,bottomLeft:c,bottomRight:h}=re(r),{x:d,y:u}=t,{width:g,height:p}=e;let f,m,b,v,y,x;return"center"===s?(y=u+p/2,"left"===n?(f=d,m=f-o,v=y+o,x=y-o):(f=d+g,m=f+o,v=y-o,x=y+o),b=f):(m="left"===n?d+Math.max(a,c)+o:"right"===n?d+g-Math.max(l,h)-o:this.caretX,"top"===s?(v=u,y=v-o,f=m-o,b=m+o):(v=u+p,y=v+o,f=m+o,b=m-o),x=v),{x1:f,x2:m,x3:b,y1:v,y2:y,y3:x}}drawTitle(t,e,i){const n=this.title,s=n.length;let o,r,a;if(s){const l=Je(i.rtl,this.x,this.width);for(t.x=po(this,i.titleAlign,i),e.textAlign=l.textAlign(i.titleAlign),e.textBaseline="middle",o=le(i.titleFont),r=i.titleSpacing,e.fillStyle=i.titleColor,e.font=o.string,a=0;a<s;++a)e.fillText(n[a],l.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+r,a+1===s&&(t.y+=i.titleMarginBottom-r)}}_drawColorBox(t,e,i,n,s){const o=this.labelColors[i],r=this.labelPointStyles[i],{boxHeight:a,boxWidth:l,boxPadding:c}=s,h=le(s.bodyFont),d=po(this,"left",s),u=n.x(d),g=a<h.lineHeight?(h.lineHeight-a)/2:0,p=e.y+g;if(s.usePointStyle){const e={radius:Math.min(l,a)/2,pointStyle:r.pointStyle,rotation:r.rotation,borderWidth:1},i=n.leftForLtr(u,l)+l/2,c=p+a/2;t.strokeStyle=s.multiKeyBackground,t.fillStyle=s.multiKeyBackground,Gt(t,e,i,c),t.strokeStyle=o.borderColor,t.fillStyle=o.backgroundColor,Gt(t,e,i,c)}else{t.lineWidth=o.borderWidth||1,t.strokeStyle=o.borderColor,t.setLineDash(o.borderDash||[]),t.lineDashOffset=o.borderDashOffset||0;const e=n.leftForLtr(u,l-c),i=n.leftForLtr(n.xPlus(u,1),l-c-2),r=re(o.borderRadius);Object.values(r).some((t=>0!==t))?(t.beginPath(),t.fillStyle=s.multiKeyBackground,te(t,{x:e,y:p,w:l,h:a,radius:r}),t.fill(),t.stroke(),t.fillStyle=o.backgroundColor,t.beginPath(),te(t,{x:i,y:p+1,w:l-2,h:a-2,radius:r}),t.fill()):(t.fillStyle=s.multiKeyBackground,t.fillRect(e,p,l,a),t.strokeRect(e,p,l,a),t.fillStyle=o.backgroundColor,t.fillRect(i,p+1,l-2,a-2))}t.fillStyle=this.labelTextColors[i]}drawBody(t,e,i){const{body:n}=this,{bodySpacing:s,bodyAlign:o,displayColors:r,boxHeight:a,boxWidth:l,boxPadding:c}=i,h=le(i.bodyFont);let d=h.lineHeight,u=0;const g=Je(i.rtl,this.x,this.width),p=function(i){e.fillText(i,g.x(t.x+u),t.y+d/2),t.y+=d+s},f=g.textAlign(o);let m,v,y,x,_,w,M;for(e.textAlign=o,e.textBaseline="middle",e.font=h.string,t.x=po(this,f,i),e.fillStyle=i.bodyColor,b(this.beforeBody,p),u=r&&"right"!==f?"center"===o?l/2+c:l+2+c:0,x=0,w=n.length;x<w;++x){for(m=n[x],v=this.labelTextColors[x],e.fillStyle=v,b(m.before,p),y=m.lines,r&&y.length&&(this._drawColorBox(e,t,x,g,i),d=Math.max(h.lineHeight,a)),_=0,M=y.length;_<M;++_)p(y[_]),d=h.lineHeight;b(m.after,p)}u=0,d=h.lineHeight,b(this.afterBody,p),t.y-=s}drawFooter(t,e,i){const n=this.footer,s=n.length;let o,r;if(s){const a=Je(i.rtl,this.x,this.width);for(t.x=po(this,i.footerAlign,i),t.y+=i.footerMarginTop,e.textAlign=a.textAlign(i.footerAlign),e.textBaseline="middle",o=le(i.footerFont),e.fillStyle=i.footerColor,e.font=o.string,r=0;r<s;++r)e.fillText(n[r],a.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+i.footerSpacing}}drawBackground(t,e,i,n){const{xAlign:s,yAlign:o}=this,{x:r,y:a}=t,{width:l,height:c}=i,{topLeft:h,topRight:d,bottomLeft:u,bottomRight:g}=re(n.cornerRadius);e.fillStyle=n.backgroundColor,e.strokeStyle=n.borderColor,e.lineWidth=n.borderWidth,e.beginPath(),e.moveTo(r+h,a),"top"===o&&this.drawCaret(t,e,i,n),e.lineTo(r+l-d,a),e.quadraticCurveTo(r+l,a,r+l,a+d),"center"===o&&"right"===s&&this.drawCaret(t,e,i,n),e.lineTo(r+l,a+c-g),e.quadraticCurveTo(r+l,a+c,r+l-g,a+c),"bottom"===o&&this.drawCaret(t,e,i,n),e.lineTo(r+u,a+c),e.quadraticCurveTo(r,a+c,r,a+c-u),"center"===o&&"left"===s&&this.drawCaret(t,e,i,n),e.lineTo(r,a+h),e.quadraticCurveTo(r,a,r+h,a),e.closePath(),e.fill(),n.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,i=this.$animations,n=i&&i.x,s=i&&i.y;if(n||s){const i=oo[t.position].call(this,this._active,this._eventPosition);if(!i)return;const o=this._size=co(this,t),r=Object.assign({},i,this._size),a=uo(e,t,r),l=go(t,r,a,e);n._to===l.x&&s._to===l.y||(this.xAlign=a.xAlign,this.yAlign=a.yAlign,this.width=o.width,this.height=o.height,this.caretX=i.x,this.caretY=i.y,this._resolveAnimations().update(this,l))}}draw(t){const e=this.options.setContext(this.getContext());let i=this.opacity;if(!i)return;this._updateAnimationTarget(e);const n={width:this.width,height:this.height},s={x:this.x,y:this.y};i=Math.abs(i)<.001?0:i;const o=ae(e.padding),r=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&r&&(t.save(),t.globalAlpha=i,this.drawBackground(s,t,n,e),Ze(t,e.textDirection),s.y+=o.top,this.drawTitle(s,t,e),this.drawBody(s,t,e),this.drawFooter(s,t,e),ti(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const i=this._active,n=t.map((({datasetIndex:t,index:e})=>{const i=this.chart.getDatasetMeta(t);if(!i)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:i.data[e],index:e}})),s=!v(i,n),o=this._positionChanged(n,e);(s||o)&&(this._active=n,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,i=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const n=this.options,s=this._active||[],o=this._getActiveElements(t,s,e,i),r=this._positionChanged(o,t),a=e||!v(o,s)||r;return a&&(this._active=o,(n.enabled||n.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),a}_getActiveElements(t,e,i,n){const s=this.options;if("mouseout"===t.type)return[];if(!n)return e;const o=this.chart.getElementsAtEventForMode(t,s.mode,s,i);return s.reverse&&o.reverse(),o}_positionChanged(t,e){const{caretX:i,caretY:n,options:s}=this,o=oo[s.position].call(this,t,e);return!1!==o&&(i!==o.x||n!==o.y)}}bo.positioners=oo;var vo={id:"tooltip",_element:bo,positioners:oo,afterInit(t,e,i){i&&(t.tooltip=new bo({chart:t,options:i}))},beforeUpdate(t,e,i){t.tooltip&&t.tooltip.initialize(i)},reset(t,e,i){t.tooltip&&t.tooltip.initialize(i)},afterDraw(t){const e=t.tooltip,i={tooltip:e};!1!==t.notifyPlugins("beforeTooltipDraw",i)&&(e&&e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",i))},afterEvent(t,e){if(t.tooltip){const i=e.replay;t.tooltip.handleEvent(e.event,i,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:{beforeTitle:a,title(t){if(t.length>0){const e=t[0],i=e.chart.data.labels,n=i?i.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(n>0&&e.dataIndex<n)return i[e.dataIndex]}return""},afterTitle:a,beforeBody:a,beforeLabel:a,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const i=t.formattedValue;return c(i)||(e+=i),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:a,afterBody:a,beforeFooter:a,footer:a,afterFooter:a}},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},yo=Object.freeze({__proto__:null,Decimation:Es,Filler:Ks,Legend:to,SubTitle:so,Title:io,Tooltip:vo});class xo extends jn{constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:i,label:n}of e)t[i]===n&&t.splice(i,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(c(t))return null;const i=this.getLabels();return((t,e)=>null===t?null:Z(Math.round(t),0,e))(e=isFinite(e)&&i[e]===t?e:function(t,e,i,n){const s=t.indexOf(e);return-1===s?((t,e,i,n)=>("string"==typeof e?(i=t.push(e)-1,n.unshift({index:i,label:e})):isNaN(e)&&(i=null),i))(t,e,i,n):s!==t.lastIndexOf(e)?i:s}(i,t,p(e,t),this._addedLabels),i.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:i,max:n}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(i=0),e||(n=this.getLabels().length-1)),this.min=i,this.max=n}buildTicks(){const t=this.min,e=this.max,i=this.options.offset,n=[];let s=this.getLabels();s=0===t&&e===s.length-1?s:s.slice(t,e+1),this._valueRange=Math.max(s.length-(i?0:1),1),this._startValue=this.min-(i?.5:0);for(let i=t;i<=e;i++)n.push({value:i});return n}getLabelForValue(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}}function _o(t,e,{horizontal:i,minRotation:n}){const s=q(n),o=(i?Math.sin(s):Math.cos(s))||.001,r=.75*e*(""+t).length;return Math.min(e/o,r)}xo.id="category",xo.defaults={ticks:{callback:xo.prototype.getLabelForValue}};class wo extends jn{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return c(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:i}=this.getUserBounds();let{min:n,max:s}=this;const o=t=>n=e?n:t,r=t=>s=i?s:t;if(t){const t=$(n),e=$(s);t<0&&e<0?r(0):t>0&&e>0&&o(0)}if(n===s){let e=1;(s>=Number.MAX_SAFE_INTEGER||n<=Number.MIN_SAFE_INTEGER)&&(e=Math.abs(.05*s)),r(s+e),t||o(n-e)}this.min=n,this.max=s}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:i,stepSize:n}=t;return n?(e=Math.ceil(this.max/n)-Math.floor(this.min/n)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${n} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),i=i||11),i&&(e=Math.min(i,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let i=this.getTickLimit();i=Math.max(2,i);const n=function(t,e){const i=[],{bounds:n,step:s,min:o,max:r,precision:a,count:l,maxTicks:h,maxDigits:d,includeBounds:u}=t,g=s||1,p=h-1,{min:f,max:m}=e,b=!c(o),v=!c(r),y=!c(l),x=(m-f)/(d+1);let _,w,M,S,k=W((m-f)/p/g)*g;if(k<1e-14&&!b&&!v)return[{value:f},{value:m}];S=Math.ceil(m/k)-Math.floor(f/k),S>p&&(k=W(S*k/p/g)*g),c(a)||(_=Math.pow(10,a),k=Math.ceil(k*_)/_),"ticks"===n?(w=Math.floor(f/k)*k,M=Math.ceil(m/k)*k):(w=f,M=m),b&&v&&s&&function(t,e){const i=Math.round(t);return i-e<=t&&i+e>=t}((r-o)/s,k/1e3)?(S=Math.round(Math.min((r-o)/k,h)),k=(r-o)/S,w=o,M=r):y?(w=b?o:w,M=v?r:M,S=l-1,k=(M-w)/S):(S=(M-w)/k,S=V(S,Math.round(S),k/1e3)?Math.round(S):Math.ceil(S));const P=Math.max(U(k),U(w));_=Math.pow(10,c(a)?P:a),w=Math.round(w*_)/_,M=Math.round(M*_)/_;let T=0;for(b&&(u&&w!==o?(i.push({value:o}),w<o&&T++,V(Math.round((w+T*k)*_)/_,o,_o(o,x,t))&&T++):w<o&&T++);T<S;++T)i.push({value:Math.round((w+T*k)*_)/_});return v&&u&&M!==r?i.length&&V(i[i.length-1].value,r,_o(r,x,t))?i[i.length-1].value=r:i.push({value:r}):v&&M!==r||i.push({value:M}),i}({maxTicks:i,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&N(n,this,"value"),t.reverse?(n.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),n}configure(){const t=this.ticks;let e=this.min,i=this.max;if(super.configure(),this.options.offset&&t.length){const n=(i-e)/Math.max(t.length-1,1)/2;e-=n,i+=n}this._startValue=e,this._endValue=i,this._valueRange=i-e}getLabelForValue(t){return Ke(t,this.chart.options.locale,this.options.ticks.format)}}class Mo extends wo{determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=u(t)?t:0,this.max=u(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,i=q(this.options.ticks.minRotation),n=(t?Math.sin(i):Math.cos(i))||.001,s=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,s.lineHeight/n))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}function So(t){return 1==t/Math.pow(10,Math.floor(B(t)))}Mo.id="linear",Mo.defaults={ticks:{callback:Ln.formatters.numeric}};class ko extends jn{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const i=wo.prototype.parse.apply(this,[t,e]);if(0!==i)return u(i)&&i>0?i:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=u(t)?Math.max(0,t):null,this.max=u(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let i=this.min,n=this.max;const s=e=>i=t?i:e,o=t=>n=e?n:t,r=(t,e)=>Math.pow(10,Math.floor(B(t))+e);i===n&&(i<=0?(s(1),o(10)):(s(r(i,-1)),o(r(n,1)))),i<=0&&s(r(n,-1)),n<=0&&o(r(i,1)),this._zero&&this.min!==this._suggestedMin&&i===r(this.min,0)&&s(r(i,-1)),this.min=i,this.max=n}buildTicks(){const t=this.options,e=function(t,e){const i=Math.floor(B(e.max)),n=Math.ceil(e.max/Math.pow(10,i)),s=[];let o=g(t.min,Math.pow(10,Math.floor(B(e.min)))),r=Math.floor(B(o)),a=Math.floor(o/Math.pow(10,r)),l=r<0?Math.pow(10,Math.abs(r)):1;do{s.push({value:o,major:So(o)}),++a,10===a&&(a=1,++r,l=r>=0?1:l),o=Math.round(a*Math.pow(10,r)*l)/l}while(r<i||r===i&&a<n);const c=g(t.max,o);return s.push({value:c,major:So(o)}),s}({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&N(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":Ke(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=B(t),this._valueRange=B(this.max)-B(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(B(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function Po(t){const e=t.ticks;if(e.display&&t.display){const t=ae(e.backdropPadding);return p(e.font&&e.font.size,Wt.font.size)+t.height}return 0}function To(t,e,i,n,s){return t===n||t===s?{start:e-i/2,end:e+i/2}:t<n||t>s?{start:e-i,end:e}:{start:e,end:e+i}}function Oo(t,e,i,n,s){const o=Math.abs(Math.sin(i)),r=Math.abs(Math.cos(i));let a=0,l=0;n.start<e.l?(a=(e.l-n.start)/o,t.l=Math.min(t.l,e.l-a)):n.end>e.r&&(a=(n.end-e.r)/o,t.r=Math.max(t.r,e.r+a)),s.start<e.t?(l=(e.t-s.start)/r,t.t=Math.min(t.t,e.t-l)):s.end>e.b&&(l=(s.end-e.b)/r,t.b=Math.max(t.b,e.b+l))}function Lo(t){return 0===t||180===t?"center":t<180?"left":"right"}function Ao(t,e,i){return 90===i||270===i?t-=e/2:(i>270||i<90)&&(t-=e),t}function Co(t,e,i,n){const{ctx:s}=t;if(i)s.arc(t.xCenter,t.yCenter,e,0,D);else{let i=t.getPointPosition(0,e);s.moveTo(i.x,i.y);for(let o=1;o<n;o++)i=t.getPointPosition(o,e),s.lineTo(i.x,i.y)}}ko.id="logarithmic",ko.defaults={ticks:{callback:Ln.formatters.logarithmic,major:{enabled:!0}}};class Do extends wo{constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=ae(Po(this.options)/2),e=this.width=this.maxWidth-t.width,i=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+i/2+t.top),this.drawingArea=Math.floor(Math.min(e,i)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=u(t)&&!isNaN(t)?t:0,this.max=u(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/Po(this.options))}generateTickLabels(t){wo.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const i=m(this.options.pointLabels.callback,[t,e],this);return i||0===i?i:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?function(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},i=Object.assign({},e),n=[],s=[],o=t._pointLabels.length,r=t.options.pointLabels,a=r.centerPointLabels?C/o:0;for(let u=0;u<o;u++){const o=r.setContext(t.getPointLabelContext(u));s[u]=o.padding;const g=t.getPointPosition(u,t.drawingArea+s[u],a),p=le(o.font),f=(l=t.ctx,c=p,d=h(d=t._pointLabels[u])?d:[d],{w:Vt(l,c.string,d),h:d.length*c.lineHeight});n[u]=f;const m=K(t.getIndexAngle(u)+a),b=Math.round(G(m));Oo(i,e,m,To(b,g.x,f.w,0,180),To(b,g.y,f.h,90,270))}var l,c,d;t.setCenterPoint(e.l-i.l,i.r-e.r,e.t-i.t,i.b-e.b),t._pointLabelItems=function(t,e,i){const n=[],s=t._pointLabels.length,o=t.options,r=Po(o)/2,a=t.drawingArea,l=o.pointLabels.centerPointLabels?C/s:0;for(let o=0;o<s;o++){const s=t.getPointPosition(o,a+r+i[o],l),u=Math.round(G(K(s.angle+z))),g=e[o],p=Ao(s.y,g.h,u),f=Lo(u),m=(c=s.x,h=g.w,"right"===(d=f)?c-=h:"center"===d&&(c-=h/2),c);n.push({x:s.x,y:p,textAlign:f,left:m,top:p,right:m+g.w,bottom:p+g.h})}var c,h,d;return n}(t,n,s)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,i,n){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((i-n)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,i,n))}getIndexAngle(t){return K(t*(D/(this._pointLabels.length||1))+q(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(c(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(c(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const i=e[t];return function(t,e,i){return he(t,{label:i,index:e,type:"pointLabel"})}(this.getContext(),t,i)}}getPointPosition(t,e,i=0){const n=this.getIndexAngle(t)-z+i;return{x:Math.cos(n)*e+this.xCenter,y:Math.sin(n)*e+this.yCenter,angle:n}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:i,right:n,bottom:s}=this._pointLabelItems[t];return{left:e,top:i,right:n,bottom:s}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const i=this.ctx;i.save(),i.beginPath(),Co(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),i.closePath(),i.fillStyle=t,i.fill(),i.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:i,grid:n}=e,s=this._pointLabels.length;let o,r,a;if(e.pointLabels.display&&function(t,e){const{ctx:i,options:{pointLabels:n}}=t;for(let s=e-1;s>=0;s--){const e=n.setContext(t.getPointLabelContext(s)),o=le(e.font),{x:r,y:a,textAlign:l,left:h,top:d,right:u,bottom:g}=t._pointLabelItems[s],{backdropColor:p}=e;if(!c(p)){const t=ae(e.backdropPadding);i.fillStyle=p,i.fillRect(h-t.left,d-t.top,u-h+t.width,g-d+t.height)}Jt(i,t._pointLabels[s],r,a+o.lineHeight/2,o,{color:e.color,textAlign:l,textBaseline:"middle"})}}(this,s),n.display&&this.ticks.forEach(((t,e)=>{0!==e&&(r=this.getDistanceFromCenterForValue(t.value),function(t,e,i,n){const s=t.ctx,o=e.circular,{color:r,lineWidth:a}=e;!o&&!n||!r||!a||i<0||(s.save(),s.strokeStyle=r,s.lineWidth=a,s.setLineDash(e.borderDash),s.lineDashOffset=e.borderDashOffset,s.beginPath(),Co(t,i,o,n),s.closePath(),s.stroke(),s.restore())}(this,n.setContext(this.getContext(e-1)),r,s))})),i.display){for(t.save(),o=s-1;o>=0;o--){const n=i.setContext(this.getPointLabelContext(o)),{color:s,lineWidth:l}=n;l&&s&&(t.lineWidth=l,t.strokeStyle=s,t.setLineDash(n.borderDash),t.lineDashOffset=n.borderDashOffset,r=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),a=this.getPointPosition(o,r),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(a.x,a.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,i=e.ticks;if(!i.display)return;const n=this.getIndexAngle(0);let s,o;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(n),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((n,r)=>{if(0===r&&!e.reverse)return;const a=i.setContext(this.getContext(r)),l=le(a.font);if(s=this.getDistanceFromCenterForValue(this.ticks[r].value),a.showLabelBackdrop){t.font=l.string,o=t.measureText(n.label).width,t.fillStyle=a.backdropColor;const e=ae(a.backdropPadding);t.fillRect(-o/2-e.left,-s-l.size/2-e.top,o+e.width,l.size+e.height)}Jt(t,n.label,0,-s,l,{color:a.color})})),t.restore()}drawTitle(){}}Do.id="radialLinear",Do.defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:Ln.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}},Do.defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"},Do.descriptors={angleLines:{_fallback:"grid"}};const Io={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Ro=Object.keys(Io);function Eo(t,e){return t-e}function zo(t,e){if(c(e))return null;const i=t._adapter,{parser:n,round:s,isoWeekday:o}=t._parseOpts;let r=e;return"function"==typeof n&&(r=n(r)),u(r)||(r="string"==typeof n?i.parse(r,n):i.parse(r)),null===r?null:(s&&(r="week"!==s||!H(o)&&!0!==o?i.startOf(r,s):i.startOf(r,"isoWeek",o)),+r)}function jo(t,e,i,n){const s=Ro.length;for(let o=Ro.indexOf(t);o<s-1;++o){const t=Io[Ro[o]],s=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((i-e)/(s*t.size))<=n)return Ro[o]}return Ro[s-1]}function Fo(t,e,i){if(i){if(i.length){const{lo:n,hi:s}=de(i,e);t[i[n]>=e?i[n]:i[s]]=!0}}else t[e]=!0}function Bo(t,e,i){const n=[],s={},o=e.length;let r,a;for(r=0;r<o;++r)a=e[r],s[a]=r,n.push({value:a,major:!1});return 0!==o&&i?function(t,e,i,n){const s=t._adapter,o=+s.startOf(e[0].value,n),r=e[e.length-1].value;let a,l;for(a=o;a<=r;a=+s.add(a,1,n))l=i[a],l>=0&&(e[l].major=!0);return e}(t,n,s,i):n}class $o extends jn{constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e){const i=t.time||(t.time={}),n=this._adapter=new Ni._date(t.adapters.date);M(i.displayFormats,n.formats()),this._parseOpts={parser:i.parser,round:i.round,isoWeekday:i.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:zo(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,i=t.time.unit||"day";let{min:n,max:s,minDefined:o,maxDefined:r}=this.getUserBounds();function a(t){o||isNaN(t.min)||(n=Math.min(n,t.min)),r||isNaN(t.max)||(s=Math.max(s,t.max))}o&&r||(a(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||a(this.getMinMax(!1))),n=u(n)&&!isNaN(n)?n:+e.startOf(Date.now(),i),s=u(s)&&!isNaN(s)?s:+e.endOf(Date.now(),i)+1,this.min=Math.min(n,s-1),this.max=Math.max(n+1,s)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],i=t[t.length-1]),{min:e,max:i}}buildTicks(){const t=this.options,e=t.time,i=t.ticks,n="labels"===i.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&n.length&&(this.min=this._userMin||n[0],this.max=this._userMax||n[n.length-1]);const s=this.min,o=function(t,e,i){let n=0,s=t.length;for(;n<s&&t[n]<e;)n++;for(;s>n&&t[s-1]>i;)s--;return n>0||s<t.length?t.slice(n,s):t}(n,s,this.max);return this._unit=e.unit||(i.autoSkip?jo(e.minUnit,this.min,this.max,this._getLabelCapacity(s)):function(t,e,i,n,s){for(let o=Ro.length-1;o>=Ro.indexOf(i);o--){const i=Ro[o];if(Io[i].common&&t._adapter.diff(s,n,i)>=e-1)return i}return Ro[i?Ro.indexOf(i):0]}(this,o.length,e.minUnit,this.min,this.max)),this._majorUnit=i.major.enabled&&"year"!==this._unit?function(t){for(let e=Ro.indexOf(t)+1,i=Ro.length;e<i;++e)if(Io[Ro[e]].common)return Ro[e]}(this._unit):void 0,this.initOffsets(n),t.reverse&&o.reverse(),Bo(this,o,this._majorUnit)}initOffsets(t){let e,i,n=0,s=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),n=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,i=this.getDecimalForValue(t[t.length-1]),s=1===t.length?i:(i-this.getDecimalForValue(t[t.length-2]))/2);const o=t.length<3?.5:.25;n=Z(n,0,o),s=Z(s,0,o),this._offsets={start:n,end:s,factor:1/(n+1+s)}}_generate(){const t=this._adapter,e=this.min,i=this.max,n=this.options,s=n.time,o=s.unit||jo(s.minUnit,e,i,this._getLabelCapacity(e)),r=p(s.stepSize,1),a="week"===o&&s.isoWeekday,l=H(a)||!0===a,c={};let h,d,u=e;if(l&&(u=+t.startOf(u,"isoWeek",a)),u=+t.startOf(u,l?"day":o),t.diff(i,e,o)>1e5*r)throw new Error(e+" and "+i+" are too far apart with stepSize of "+r+" "+o);const g="data"===n.ticks.source&&this.getDataTimestamps();for(h=u,d=0;h<i;h=+t.add(h,r,o),d++)Fo(c,h,g);return h!==i&&"ticks"!==n.bounds&&1!==d||Fo(c,h,g),Object.keys(c).sort(((t,e)=>t-e)).map((t=>+t))}getLabelForValue(t){const e=this._adapter,i=this.options.time;return i.tooltipFormat?e.format(t,i.tooltipFormat):e.format(t,i.displayFormats.datetime)}_tickFormatFunction(t,e,i,n){const s=this.options,o=s.time.displayFormats,r=this._unit,a=this._majorUnit,l=r&&o[r],c=a&&o[a],h=i[e],d=a&&c&&h&&h.major,u=this._adapter.format(t,n||(d?c:l)),g=s.ticks.callback;return g?m(g,[u,e,i],this):u}generateTickLabels(t){let e,i,n;for(e=0,i=t.length;e<i;++e)n=t[e],n.label=this._tickFormatFunction(n.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,i=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+i)*e.factor)}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+i*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,i=this.ctx.measureText(t).width,n=q(this.isHorizontal()?e.maxRotation:e.minRotation),s=Math.cos(n),o=Math.sin(n),r=this._resolveTickFontOptions(0).size;return{w:i*s+r*o,h:i*o+r*s}}_getLabelCapacity(t){const e=this.options.time,i=e.displayFormats,n=i[e.unit]||i.millisecond,s=this._tickFormatFunction(t,0,Bo(this,[t],this._majorUnit),n),o=this._getLabelSize(s),r=Math.floor(this.isHorizontal()?this.width/o.w:this.height/o.h)-1;return r>0?r:1}getDataTimestamps(){let t,e,i=this._cache.data||[];if(i.length)return i;const n=this.getMatchingVisibleMetas();if(this._normalized&&n.length)return this._cache.data=n[0].controller.getAllParsedValues(this);for(t=0,e=n.length;t<e;++t)i=i.concat(n[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(i)}getLabelTimestamps(){const t=this._cache.labels||[];let e,i;if(t.length)return t;const n=this.getLabels();for(e=0,i=n.length;e<i;++e)t.push(zo(this,n[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return me(t.sort(Eo))}}function Wo(t,e,i){let n,s,o,r,a=0,l=t.length-1;i?(e>=t[a].pos&&e<=t[l].pos&&({lo:a,hi:l}=ue(t,"pos",e)),({pos:n,time:o}=t[a]),({pos:s,time:r}=t[l])):(e>=t[a].time&&e<=t[l].time&&({lo:a,hi:l}=ue(t,"time",e)),({time:n,pos:o}=t[a]),({time:s,pos:r}=t[l]));const c=s-n;return c?o+(r-o)*(e-n)/c:o}$o.id="time",$o.defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",major:{enabled:!1}}};class Ho extends $o{constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=Wo(e,this.min),this._tableRange=Wo(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:i}=this,n=[],s=[];let o,r,a,l,c;for(o=0,r=t.length;o<r;++o)l=t[o],l>=e&&l<=i&&n.push(l);if(n.length<2)return[{time:e,pos:0},{time:i,pos:1}];for(o=0,r=n.length;o<r;++o)c=n[o+1],a=n[o-1],l=n[o],Math.round((c+a)/2)!==l&&s.push({time:l,pos:o/(r-1)});return s}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),i=this.getLabelTimestamps();return t=e.length&&i.length?this.normalize(e.concat(i)):e.length?e:i,t=this._cache.all=t,t}getDecimalForValue(t){return(Wo(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return Wo(this._table,i*this._tableRange+this._minPos,!0)}}Ho.id="timeseries",Ho.defaults=$o.defaults;const Vo=[Wi,Ds,yo,Object.freeze({__proto__:null,CategoryScale:xo,LinearScale:Mo,LogarithmicScale:ko,RadialLinearScale:Do,TimeScale:$o,TimeSeriesScale:Ho})];cs.register(...Vo);const No=cs},397:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.runAudioAnimation=e.runAudioGame=void 0;const n=i(743),s=i(41),o=i(896),r=i(404),a=i(744),l=i(896),c=i(15),h=i(597);function d(){window.addEventListener("keyup",l.checkFor);const t=document.querySelector("#wrapper-audio"),e=document.querySelector(".inGameStats");e&&t.removeChild(e),(0,a.prepareData)();let i=[];s.storageT.workingArray.forEach(((t,e)=>{i.push(t.id);const n=document.querySelector("#audioGameOptions"),s=document.createElement("div"),a=document.createElement("img");a.style.width="30px",a.style.height="30px",a.style.marginRight="10px",a.src=`assets/svg/white/${e+1}w.svg`,s.appendChild(a),s.id=`gameOption-${t.id}`,s.innerHTML+=(0,o.capitalize)(t.translate),s.addEventListener("click",(()=>{(0,r.checkChoice)(t.id)})),n.appendChild(s)})),s.storageT.currentOptions=i;const c=new Audio;if(c.src=`${n.filesUrl}/${s.storageT.rightAnswer.audio}`,c.play(),s.storage.isAuthorized){const e=document.createElement("div");e.classList.add("inGameStats");const i=(0,o.inGameStats)();e.innerHTML=i,t.appendChild(e)}}e.runAudioGame=d,e.runAudioAnimation=function(t){const e=document.querySelector("#audioGameOptions"),i=(document.querySelector(`#gameOption-${t}`),document.querySelector("#repeatAudio")),o=document.querySelector("#repeatAudioIcon"),r=document.createElement("div");function a(){r.removeEventListener("click",a),window.removeEventListener("keyup",l),u()}function l(t){"Space"===t.code&&(window.removeEventListener("keyup",l),u())}function u(){s.storageT.onlyOnePage&&(0,h.updateIndicator)(),e.style.opacity="0",i.style.width="140px",i.style.height="140px",i.style.borderRadius="50%",i.style.backgroundImage="none",o.style.opacity="1",setTimeout((()=>{e.style.opacity="1",e.innerHTML="",0===s.storageT.currentGameQueue.length?(0,c.endGame)():d()}),600)}r.id="nextAudioQuestion",r.innerHTML="[space] →",setTimeout((()=>{e.style.opacity="0",o.style.opacity="0",setTimeout((()=>{i.style.backgroundImage=`url(${n.filesUrl}/${s.storageT.rightAnswer.image})`,i.style.width="500px",i.style.height="300px",i.style.borderRadius="0",e.innerHTML=`\n        <div>${s.storageT.rightAnswer.word}</div>\n        <div>${s.storageT.rightAnswer.transcription}</div>\n        <div>${s.storageT.rightAnswer.translate}</div>\n      `,e.appendChild(r),r.addEventListener("click",a),window.addEventListener("keyup",l),e.style.opacity="1",e.style.pointerEvents="all"}),500)}),600)}},744:function(t,e,i){var n=this&&this.__awaiter||function(t,e,i,n){return new(i||(i=Promise))((function(s,o){function r(t){try{l(n.next(t))}catch(t){o(t)}}function a(t){try{l(n.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,a)}l((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.getSinglePageData=e.prepareData=e.getData=void 0;const s=i(743),o=i(896),r=i(41);e.getData=()=>n(void 0,void 0,void 0,(function*(){const t=r.storageT.currentDifficulty;let e;if(!Object.keys(r.storage.difficultyLevels).includes(t.toString()))try{e=yield(0,s.getAllWords)(t)}finally{e&&(r.storage.difficultyLevels[t]=(0,o.shuffle)(e))}return r.storageT.currentGameQueue.length<=r.storageT.itemsPerGroup&&(r.storageT.currentGameQueue=[...(0,o.shuffle)(r.storage.difficultyLevels[t])]),!0})),e.prepareData=()=>{const t=r.storageT.currentDifficulty,e=r.storageT.currentGameQueue.pop();let i=[];for(let n=0;n<4;n++){const s=(0,o.getRandomInt)(0,r.storageT.itemsPerGroup-1);r.storageT.onlyOnePage?r.storageT.onlyOnePageTemplate[s]===e||i.includes(r.storageT.onlyOnePageTemplate[s])?n--:i.push(r.storageT.onlyOnePageTemplate[s]):r.storage.difficultyLevels[t][s]===e||i.includes(r.storage.difficultyLevels[t][s])?n--:i.push(r.storage.difficultyLevels[t][s])}e&&(r.storageT.rightAnswer=e,r.storageT.singleVariant=i[0],r.storageT.workingArray=(0,o.shuffle)([e,...i]))},e.getSinglePageData=()=>n(void 0,void 0,void 0,(function*(){const t=r.storage.bookGroup;let e;try{e=yield(0,s.getAllWords)(t,"single")}finally{if(e){const t=e.filter((t=>{if(!r.serverInfoObject.deleted[t.id]&&!r.serverInfoObject.learnt[t.id])return t}));r.storageT.onlyOnePageTemplate=e,r.storageT.currentGameQueue=[...(0,o.shuffle)(t)]}}return!0}))},448:function(t,e,i){var n=this&&this.__awaiter||function(t,e,i,n){return new(i||(i=Promise))((function(s,o){function r(t){try{l(n.next(t))}catch(t){o(t)}}function a(t){try{l(n.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,a)}l((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.runPuzzle=void 0;const s=i(743),o=i(15),r=i(597),a=i(896),l=i(41),c=i(744);let h,d;function u(){return n(this,void 0,void 0,(function*(){const t=document.querySelector("#wrapper-puzzle"),e=document.querySelector("#sockets"),i=document.querySelector("#blocks");document.querySelector("#attempts").innerHTML="\n  <div></div>\n  <div></div>\n  <div></div>\n  ",e.innerHTML="",i.innerHTML="",(0,c.prepareData)();let n=(yield(0,s.getSingleWord)(l.storageT.rightAnswer.id)).textExample.split(" "),o=(0,a.shuffleStrings)(n);h=o.length,d=0,o.forEach((t=>{const e=document.createElement("div");e.draggable=!0,e.id=`piece-${t}`,e.classList.add("draggableBox"),e.innerHTML=t,e.addEventListener("dragstart",g),e.addEventListener("click",(()=>{!function(t){const e=document.querySelectorAll(".socketBox"),i=function(){for(let i of e)if(""===i.innerHTML)return i.id.split("-")[1]===t.split("-")[1]&&i.id;return!1}();if(i){const e=document.getElementById(i),n=document.getElementById(t);null==e||e.appendChild(n),n.classList.add("dragSet"),h--,y(!0)}else x(),y(!1);0===h&&v()}(e.id)})),i.appendChild(e)}));for(let t=0;t<h;t++){const i=document.createElement("div");i.id=`socket-${n[t]}`,i.classList.add("socketBox"),i.addEventListener("dragenter",f),i.addEventListener("dragover",p),i.addEventListener("dragleave",m),i.addEventListener("drop",b);const s=document.getElementById(`piece-${n[t]}`).offsetWidth;i.style.width=`${s}px`,e.appendChild(i)}setTimeout((()=>{t.classList.remove("invisible")}),300)}))}function g(t){t.dataTransfer&&t.dataTransfer.setData("text/plain",this.id)}function p(t){t.preventDefault(),console.log("dragover"),t.dataTransfer&&(t.dataTransfer.dropEffect="move")}function f(t){t.preventDefault(),this.classList.add("dragHover")}function m(t){t.preventDefault(),this.classList.remove("dragHover")}function b(t){if(t.dataTransfer){const e=t.dataTransfer.getData("text/plain"),i=document.getElementById(e);this.id.split("-")[1]===e.split("-")[1]?(this.appendChild(i),i.classList.add("dragSet"),h--,y(!0)):(x(),y(!1)),this.classList.remove("dragHover"),0===h&&v()}}function v(){if(l.storageT.onlyOnePage&&(0,r.updateIndicator)(),d<3){const t=l.serverInfoObject.howManyInARow[l.storageT.rightAnswer.id]||0;(0,l.manageServerInfo)(l.storageT.rightAnswer.id,"howManyInARow","raise",(t+1).toString());const e=l.serverInfoObject.howManyRight[l.storageT.rightAnswer.id]||0;(0,l.manageServerInfo)(l.storageT.rightAnswer.id,"howManyRight","raise",(e+1).toString()),l.storageT.endGameResults.right.push(l.storageT.rightAnswer)}else{(0,l.manageServerInfo)(l.storageT.rightAnswer.id,"howManyInARow","lower","0");const t=l.serverInfoObject.howManyWrong[l.storageT.rightAnswer.id]||0;(0,l.manageServerInfo)(l.storageT.rightAnswer.id,"howManyWrong","raise",(t+1).toString()),l.storageT.endGameResults.wrong.push(l.storageT.rightAnswer)}const t=document.querySelector("#sockets");t.classList.add("gameEnded");const e=document.querySelector("#wrapper-puzzle"),i=document.createElement("div");i.classList.add("nextButton"),i.style.cursor="pointer",i.innerHTML="→",i.addEventListener("click",(()=>{e.removeChild(i),e.classList.add("invisible"),t.classList.remove("gameEnded"),setTimeout((()=>{0===l.storageT.currentGameQueue.length?(0,o.endGame)():u()}),300)}),{once:!0}),e.appendChild(i)}function y(t){const e=new Audio;e.src=t?"assets/sounds/rightAnswer.mp3":"assets/sounds/wrongAnswer.mp3",e.play()}function x(){d++;const t=document.querySelector("#attempts").children;console.log(t);for(let e=0;e<d;e++)t[e].style.backgroundColor="var(--wrong)";d>=3&&(document.querySelectorAll(".draggableBox").forEach((t=>{document.getElementById(`socket-${t.id.split("-")[1]}`).appendChild(t)})),v())}e.runPuzzle=u},20:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.startSniperAnimation=e.runSniper=void 0;const n=i(404),s=i(15),o=i(597),r=i(894),a=i(896),l=i(41),c=i(744);function h(){const t=document.querySelector("#wrapper-sniper");if(t){const i=document.querySelector("#sniperOptions"),s=document.querySelector("#sniperWordSpan");i&&(i.innerHTML="");const o=document.querySelector(".inGameStats");o&&t.removeChild(o),(0,c.prepareData)();let r=[];l.storageT.workingArray.forEach(((t,e)=>{r.push(t.id);const s=document.createElement("div"),o=document.createElement("img");o.style.width="30px",o.style.height="30px",o.style.marginRight="10px",o.src=`assets/svg/white/${e+1}w.svg`,s.appendChild(o),s.id=`gameOption-${t.id}`,s.innerHTML+=(0,a.capitalize)(t.translate),s.addEventListener("click",(()=>{(0,n.checkChoice)(t.id)})),i&&i.appendChild(s)})),l.storageT.currentOptions=r,s.textContent=l.storageT.rightAnswer.word.toUpperCase();const h=new Audio;if(h.src="assets/sounds/bird.mp3",setTimeout((()=>{h.play()}),1200),l.storage.isAuthorized){const e=document.createElement("div");e.classList.add("inGameStats");const i=(0,a.inGameStats)();e.innerHTML=i,t.appendChild(e)}(0,e.startSniperAnimation)()}}e.runSniper=h,e.startSniperAnimation=()=>{const t=document.querySelector("#wrapper-sniper"),e=document.querySelector(".gameOptions");if(setTimeout((()=>{e.style.pointerEvents="all",window.addEventListener("keyup",a.checkFor,{once:!0})}),1e3),t){const t=document.querySelector("#bird"),e=document.querySelector("#birdImg");t.style.transform="translateX(0)",l.storageT.currentBirdStatus="flies";const i=document.querySelector("#flag"),a=Math.floor((0,r.getDistanceBetweenElements)(t,i))+50;setTimeout((()=>{!function(t,e,i){let r=4e3;switch(l.storageT.currentDifficulty){case 1:r=3500;break;case 2:r=3e3;break;case 3:r=2500;break;case 4:r=2e3;break;case 5:r=1750}let a=null;l.storageT.animation=window.requestAnimationFrame((function c(d){a||(a=d);const u=d-a,g=Math.round(u*(e/r));t.style.transform=`translateX(${Math.min(g,e)}px)`,g<e&&"dead"!==l.storageT.currentBirdStatus?l.storageT.animation=window.requestAnimationFrame(c):(l.storageT.onlyOnePage&&(0,o.updateIndicator)(),cancelAnimationFrame(l.storageT.animation),"flies"===l.storageT.currentBirdStatus?((0,n.checkChoice)("invalid"),setTimeout((()=>{0===l.storageT.currentGameQueue.length?(0,s.endGame)():h()}),1500)):"dead"===l.storageT.currentBirdStatus?(t.classList.add("falling"),i.classList.add("rotating"),setTimeout((()=>{t.classList.remove("falling"),i.classList.remove("rotating"),0===l.storageT.currentGameQueue.length?(0,s.endGame)():h()}),1500)):setTimeout((()=>{0===l.storageT.currentGameQueue.length?(0,s.endGame)():h()}),1500))}))}(t,a,e)}),1200)}}},824:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.runSprint=void 0;const n=i(896),s=i(41),o=i(744),r=i(896),a=i(15),l=i(597);function c(){const t=document.querySelector("#sprintWordSpan"),e=document.querySelector("#sprintVariantSpan"),i=document.querySelector("#sprintButtons"),a=document.querySelector("#wrapper-sprint"),l=document.querySelector(".inGameStats");l&&a.removeChild(l),a.style.pointerEvents="all",a.style.opacity="1",i.innerHTML="",(0,o.prepareData)();const c=(0,n.getRandomInt)(0,1);t&&e&&(t.innerHTML=(0,r.capitalize)(s.storageT.rightAnswer.word),e.innerHTML=1===c?(0,r.capitalize)(s.storageT.rightAnswer.translate):(0,r.capitalize)(s.storageT.singleVariant.translate));const d=document.createElement("button");d.id="sprintRight",d.textContent="Верно →";const u=document.createElement("button");if(u.id="sprintWrong",u.textContent="← Неверно",null==i||i.appendChild(u),null==i||i.appendChild(d),s.storageT.abortController=new AbortController,d.addEventListener("click",(()=>{h(1===c)}),{once:!0,signal:s.storageT.abortController.signal}),u.addEventListener("click",(()=>{h(0===c)}),{once:!0,signal:s.storageT.abortController.signal}),window.addEventListener("keyup",(t=>{"ArrowRight"===t.code?h(1===c):"ArrowLeft"===t.code&&h(0===c)}),{once:!0,signal:s.storageT.abortController.signal}),s.storage.isAuthorized){const t=document.createElement("div");t.classList.add("inGameStats");const e=(0,n.inGameStats)();t.innerHTML=e,a.appendChild(t)}}function h(t){var e;s.storageT.onlyOnePage&&(0,l.updateIndicator)();const i=new Audio;if(t){const t=s.serverInfoObject.howManyInARow[s.storageT.rightAnswer.id]||0;(0,s.manageServerInfo)(s.storageT.rightAnswer.id,"howManyInARow","raise",(t+1).toString());const e=s.serverInfoObject.howManyRight[s.storageT.rightAnswer.id]||0;(0,s.manageServerInfo)(s.storageT.rightAnswer.id,"howManyRight","raise",(e+1).toString()),i.src="./assets/sounds/rightAnswer.mp3",s.storageT.endGameResults.right.push(s.storageT.rightAnswer)}else{(0,s.manageServerInfo)(s.storageT.rightAnswer.id,"howManyInARow","lower","0");const t=s.serverInfoObject.howManyWrong[s.storageT.rightAnswer.id]||0;(0,s.manageServerInfo)(s.storageT.rightAnswer.id,"howManyWrong","raise",(t+1).toString()),i.src="./assets/sounds/wrongAnswer.mp3",s.storageT.endGameResults.wrong.push(s.storageT.rightAnswer)}i.play(),null===(e=s.storageT.abortController)||void 0===e||e.abort(),0===s.storageT.currentGameQueue.length?(s.storageT.abortController.abort(),(0,a.endGame)()):c()}e.runSprint=c},623:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.adjustLoginButton=void 0;const n=i(571),s=i(18),o=i(896),r=i(41);(0,n.listener)();const a=r.storage.currentPage;let l;function c(){if(r.storage.isAuthorized){const t=document.querySelector("#authOut"),e=document.querySelector("#authIn");t.style.display="block",e.style.display="none",t.addEventListener("click",(()=>(r.storage.isAuthorized=!1,r.storage.userId="",r.storage.userName="",r.storage.token="",(0,s.router)("home"),document.location.reload(),!1)),{once:!0})}else(0,o.adjustStatsButton)(!1)}(0,s.router)(a),c(),window.addEventListener("resize",(()=>{document.body.classList.add("resize-animation-stopper"),clearTimeout(l),l=setTimeout((()=>{document.body.classList.remove("resize-animation-stopper")}),400);const t=document.querySelector("#slider");if(t){const e=document.querySelector("#wrapperAusweis").offsetHeight;let i=0;switch(r.storage.currentMainSlide){case 1:i=-e;break;case 2:i=2*-e}t.style.transform=`translateY(${i}px)`}})),e.adjustLoginButton=c;const h=document.querySelector("#modeSwitch"),d=document.querySelector("#content"),u=document.querySelector("html");h.addEventListener("click",(()=>{u.classList.contains("dark")?(u.classList.remove("dark"),d.style.backgroundImage="url(assets/mainLight.jpg)"):(u.classList.add("dark"),d.style.backgroundImage="url(assets/mainDark.jpg)")}))},571:function(t,e,i){var n=this&&this.__awaiter||function(t,e,i,n){return new(i||(i=Promise))((function(s,o){function r(t){try{l(n.next(t))}catch(t){o(t)}}function a(t){try{l(n.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,a)}l((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.listener=void 0;const s=i(41),o=i(681),r=i(18),a=i(655),l=i(743),c=i(539),h=i(15);e.listener=()=>{window.addEventListener("click",(t=>{let e=t.target,i=t.target,n=e.id;if("goHome"===n&&(0,r.router)("home"),"goBook"!==n&&"learnWords"!==n||(0,r.router)("book"),"goHistory"===n&&(0,r.router)("history"),"goGames"!==n&&"playGames"!==n||(0,r.router)("games"),"goStats"!==n&&"yourStats"!==n||(0,r.router)("stats"),"goDev"===n&&window.open("https://rolling-scopes-school.github.io/vladimirparmon-JSFE2021Q3/CV/index.html","mywindow"),"goComments"===n&&(0,r.router)("comments"),"goAudio"===n&&(s.storageT.currentGameMode="audio",(0,r.router)("redirect")),"goSprint"===n&&(s.storageT.currentGameMode="sprint",(0,r.router)("redirect")),"goSniper"===n&&(s.storageT.currentGameMode="sniper",(0,r.router)("redirect")),"goPuzzle"===n&&(s.storageT.currentGameMode="puzzle",(0,r.router)("redirect")),"levelsListOption"===n.split("-")[0]){const t=s.storageT.currentGameMode;s.storageT.currentDifficulty=+n.split("-")[1],(0,r.router)(t)}if("openMenuButton"===n&&(0,o.rollMenu)("open"),"closeMenuButton"===n&&(0,o.rollMenu)("close"),"openMenuButton"!==n&&"modeSwitch"!==n&&(0,o.rollMenu)("close"),"page"===n&&(0,o.rollPageSelector)("open"),"page"!==n&&(0,o.rollPageSelector)("close"),"previousPage"===n&&(s.storage.bookPage>0?s.storage.bookPage-=1:s.storage.bookPage,(0,r.router)("book")),"nextPage"===n&&(s.storage.bookPage<s.storageT.totalPages?s.storage.bookPage+=1:s.storage.bookPage,(0,r.router)("book")),"pageListOption"===n.split("-")[0]&&(s.storage.bookPage=+n.split("-")[1],(0,r.router)("book")),"section"===n&&(0,o.rollSectionSelector)("open"),"section"!==n&&(0,o.rollSectionSelector)("close"),"sectionListOption"===n.split("-")[0]&&(s.storage.bookGroup=+n.split("-")[1],s.storage.bookPage=0,(0,r.router)("book")),"games"===n&&(0,o.rollGamesSelector)("open"),"games"!==n&&(0,o.rollGamesSelector)("close"),"gamesListOption"===n.split("-")[0])switch(n.split("-")[1]){case"audio":(0,r.router)("audio","onlyOnePageRequired");break;case"puzzle":(0,r.router)("puzzle","onlyOnePageRequired");break;case"sniper":(0,r.router)("sniper","onlyOnePageRequired");break;case"sprint":(0,r.router)("sprint","onlyOnePageRequired")}if("settings"===n&&(0,o.rollSetting)("open"),"settings"!==n&&"modeSwitch"!==n&&(0,o.rollSetting)("close"),"playSound"===n.split("-")[0]&&(0,a.playSound)(n.split("-")[1]),"repeatAudio"===n){const t=new Audio;t.src=`${l.filesUrl}/${s.storageT.rightAnswer.audio}`,t.play()}if("login"===n&&(0,l.handleLogin)("login"),"send"===n&&(0,l.handleLogin)("send"),"passwordReveal"===n&&(0,o.passwordReveal)(),"learnt"===n.split("-")[0]){const t=n.split("-")[1];i.checked?(0,s.manageServerInfo)(t,"learnt","add"):(0,s.manageServerInfo)(t,"learnt","remove")}if("difficult"===n.split("-")[0]){const t=n.split("-")[1];i.checked?(0,s.manageServerInfo)(t,"difficult","add"):(0,s.manageServerInfo)(t,"difficult","remove")}if("garbage"===n.split("-")[0]){const t=n.split("-")[1];(0,s.manageServerInfo)(t,"deleted","add"),document.querySelector(`#card-${t}`).style.display="none"}if("difficultHistory"===n.split("-")[0]){const t=n.split("-")[1];(0,s.manageServerInfo)(t,"difficult","remove"),document.querySelector(`#carddifficult-${t}`).style.display="none"}if("garbageHistory"===n.split("-")[0]){const t=n.split("-")[1];(0,s.manageServerInfo)(t,"deleted","remove"),document.querySelector(`#carddeleted-${t}`).style.display="none"}"quitGame"===n&&(0,h.endGame)()})),document.querySelector("#authIn").addEventListener("click",(()=>n(void 0,void 0,void 0,(function*(){(0,r.router)("home"),setTimeout((()=>{(0,c.slider)("reg")}),10)}))))}},859:function(t,e,i){var n=this&&this.__awaiter||function(t,e,i,n){return new(i||(i=Promise))((function(s,o){function r(t){try{l(n.next(t))}catch(t){o(t)}}function a(t){try{l(n.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,a)}l((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.audioChallengePage=void 0;const s=i(441),o=i(397),r=i(744),a=i(41),l=i(896),c=i(597);e.audioChallengePage={render:()=>n(void 0,void 0,void 0,(function*(){try{(0,s.showLoader)(),a.storageT.onlyOnePage?yield(0,r.getSinglePageData)():yield(0,r.getData)()}catch(t){console.log("Network error")}finally{(0,s.hideLoader)()}return'\n    <div class="wrapperGames">\n      <div id="quitGame"></div>\n      <div id="wrapper-audio">\n        <div id="repeatAudio">\n          <img id="repeatAudioIcon" src="assets/svg/sound.svg" alt="icon">\n        </div>\n        <div class="gameOptions" id="audioGameOptions"></div>\n      </div>\n    </div>\n    '})),afterRender:()=>{a.storageT.currentGameMode="audio",a.storageT.endGameResults.right=[],a.storageT.endGameResults.wrong=[],(0,l.removeFooter)(),(0,o.runAudioGame)(),a.storageT.onlyOnePage&&(0,c.addIndicator)()}}},160:function(t,e,i){var n=this&&this.__awaiter||function(t,e,i,n){return new(i||(i=Promise))((function(s,o){function r(t){try{l(n.next(t))}catch(t){o(t)}}function a(t){try{l(n.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,a)}l((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.bookPage=void 0;const s=i(41),o=i(743),r=i(441),a=i(896);e.bookPage={render:()=>n(void 0,void 0,void 0,(function*(){const{bookGroup:t,bookPage:e}=s.storage;let i;try{(0,r.showLoader)(),i=yield(0,o.getWords)(t,e)}finally{(0,r.hideLoader)()}let a="";for(let t=0;t<i.length;t++)a+=(yield c(t));function l(t){return t[0].toUpperCase()+t.slice(1)}function c(t){return n(this,void 0,void 0,(function*(){const e=s.serverInfoObject.difficult[i[t].id]?s.serverInfoObject.difficult[i[t].id]:null,n=s.serverInfoObject.deleted[i[t].id]?s.serverInfoObject.deleted[i[t].id]:null,r=s.serverInfoObject.learnt[i[t].id]?s.serverInfoObject.learnt[i[t].id]:null,a=s.serverInfoObject.howManyInARow[i[t].id]?s.serverInfoObject.howManyInARow[i[t].id]:0,c=s.serverInfoObject.howManyRight[i[t].id]?s.serverInfoObject.howManyRight[i[t].id]:0,h=s.serverInfoObject.howManyWrong[i[t].id]?s.serverInfoObject.howManyWrong[i[t].id]:0,d=s.storage.isAuthorized?`<div id="authAdditionalOptions">\n        <input class="bookCheckbox" type="checkbox" id="learnt-${i[t].id}" style="display: none" ${r?"checked":""}>\n        <label for="learnt-${i[t].id}" class="learntLabel">\n          <img src="assets/svg/cap.svg">\n        </label>\n        <input class="bookCheckbox" type="checkbox" id="difficult-${i[t].id}" style="display: none" ${e?"checked":""}>\n        <label for="difficult-${i[t].id}" class="difficultLabel">\n          <img src="assets/svg/dumbbell.svg">\n        </label>\n        <div class="garbage" id="garbage-${i[t].id}">\n          <img src="assets/svg/garbage.svg">\n        </div>\n      </div>`:"",u=s.storage.isAuthorized?`\n      <button class="statsButton"></button>\n      <div class="inBookStats">\n        <span>Угадано подряд: ${a}</span>\n        <span>Правильных ответов: ${c}</span>\n        <span>Ошибок: ${h}</span>\n      </div>\n      `:"";return`\n        <div class="card" id="card-${i[t].id}" style="display: ${n?"none":"flex"}">\n          <img class="cardImg" src="${o.filesUrl}/${i[t].image}" alt="${i[t].word}">\n          <div class="cardInfo">\n            <h2>${l(i[t].word)} - ${i[t].transcription}<img class="soundIcon" id="playSound-${i[t].audio}" src="assets/svg/playButton.svg" alt="sound"></h2>\n            <h3>${l(i[t].wordTranslate)}</h3>\n            <div style="margin-top: 20px">\n              <img class="soundIcon2" id="playSound-${i[t].audioMeaning}" src="assets/svg/playButton.svg" alt="sound">\n              <span>${i[t].textMeaning}</span>\n            </div>\n            <span>${i[t].textMeaningTranslate}</span><br>\n            <div style="margin-top: 20px">\n              <img class="soundIcon2" id="playSound-${i[t].audioExample}" src="assets/svg/playButton.svg" alt="sound">\n              <span>${i[t].textExample}</span>\n            </div>\n            <span>${i[t].textExampleTranslate}</span>\n          </div>\n          ${d}\n          ${u}\n        </div>\n      `}))}return`\n    <div class="wrapper">\n      <h1>Учебник</h1>\n      <div class="pageControls">\n        <div id="section">\n          <img src="assets/svg/folder.svg" alt="folderIcon">\n          <span>Раздел <span id="sectionCounter">${s.storage.bookGroup+1}/${s.storageT.totalGroups}</span></span>\n        </div>\n        <div id="page">\n          <div id="previousPage">\n            <img src="assets/svg/arrow.svg" alt="prev">\n          </div>\n          <span>Страница <span id="pageCounter">${s.storage.bookPage+1}/${s.storageT.totalPages}</span></span>\n          <div id="nextPage">\n            <img src="assets/svg/arrow.svg" alt="next">\n          </div>\n        </div>\n        <div id="settings">\n          <img src="assets/svg/settings.svg" alt="settingsIcon">\n          <span>Управление</span>\n        </div>\n        <div id="games">\n          <img src="assets/svg/gamepad.svg" alt="gamesIcon">\n          <span>Игры</span>\n        </div>\n      </div>\n      ${a}\n      <div class="settingsList">\n        <div class="redoButton">\n          <img src="assets/svg/x.svg">\n        </div>\n        <div id="settingsInner">\n          <span><img class="soundIcon2" src="assets/svg/cap.svg">Изученное слово – слово, угаданное 3 раза подряд в играх. Не учавствует в играх, запущенных со страницы учебника</span>\n          <span><img class="soundIcon2" src="assets/svg/dumbbell.svg">Сложное слово – слово, помеченное сложным, необходимо угадать 5 раз в играх для того, чтобы оно стало изученым</span>\n          <span><img class="soundIcon2" src="assets/svg/garbage.svg">Удалить слово – убрать слово со страницы учебника. Слово можно вернуть в разделе "История"</span>\n          <span><img class="soundIcon2" src="assets/svg/playButton.svg">Прослушать аудиоотрывок, относящийся к тому тексту, рядом с которым он стоит</span>\n          <span><img class="soundIcon2" src="assets/svg/question.svg">Дополнительная информация о слове (статистика показывает информацию за текущий день)</span>\n        </div>\n      </div>\n    </div>\n    <div class="returnButton"></div>\n    `})),afterRender:()=>{(0,a.addFooter)()}}},722:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.commentsPage=void 0;const n=i(896);e.commentsPage={render:()=>'\n  <div id="contactMe">\n    <form target="_blank" action="https://formsubmit.co/vladimirredblooded@gmail.com" method="POST">\n      <input type="text" name="name" placeholder="Как вас зовут? (опционально)">\n      <input type="hidden" name="_captcha" value="false">\n      <textarea placeholder="Оставьте ваш комментарий. Никакой регистрации :)" name="message"></textarea>\n      <button type="submit">Отправить</button>\n    </form>\n  </div>\n  ',afterRender:()=>{(0,n.addFooter)()}}},344:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.gamesPage=void 0;const n=i(896);e.gamesPage={render:()=>'\n  <div class="wrapperGames">\n    <div class="gameModeSelector">\n      <span>Audio challenge</span>\n      <div id="goAudio"></div>\n    </div>\n    <div class="gameModeSelector">\n      <span>Sprint mode</span>\n      <div id="goSprint"></div>\n    </div>\n    <div class="gameModeSelector">\n      <span>Sniper</span>\n      <div id="goSniper"></div>\n    </div>\n    <div class="gameModeSelector">\n      <span>Puzzle game</span>\n      <div id="goPuzzle"></div>\n    </div>\n  </div>\n  ',afterRender:()=>{(0,n.addFooter)()}}},907:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.redirectPage=void 0;const n=i(896);e.redirectPage={render:()=>'\n    <div id="levelsListWrapper">\n      <h2>Выберите сложность</h2>\n      <div id="levelsList">\n        <div id="levelsListOption-0" class="levelsListOption">1</div>\n        <div id="levelsListOption-1" class="levelsListOption">2</div>\n        <div id="levelsListOption-2" class="levelsListOption">3</div>\n        <div id="levelsListOption-3" class="levelsListOption">4</div>\n        <div id="levelsListOption-4" class="levelsListOption">5</div>\n        <div id="levelsListOption-5" class="levelsListOption">6</div>\n      </div>\n    </div>\n  ',afterRender:()=>{(0,n.addFooter)()}}},347:function(t,e,i){var n=this&&this.__awaiter||function(t,e,i,n){return new(i||(i=Promise))((function(s,o){function r(t){try{l(n.next(t))}catch(t){o(t)}}function a(t){try{l(n.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,a)}l((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.historyPage=void 0;const s=i(896),o=i(743),r=i(41),a=i(441);e.historyPage={render:()=>n(void 0,void 0,void 0,(function*(){let t,e,i,n,s,l,c,h="",d="",u="",g="";(0,a.showLoader)(),t=Object.keys(r.serverInfoObject.difficult),e=Object.keys(r.serverInfoObject.deleted),i=Object.keys(r.serverInfoObject.learnt),s=Object.keys(r.serverInfoObject.howManyInARow),l=Object.keys(r.serverInfoObject.howManyRight),c=Object.keys(r.serverInfoObject.howManyWrong);const p=new Set;t.forEach((t=>p.add(t))),e.forEach((t=>p.add(t))),i.forEach((t=>p.add(t))),s.forEach((t=>p.add(t))),l.forEach((t=>p.add(t))),c.forEach((t=>p.add(t))),n=Array.from(p);for(let e=0;e<t.length;e++)""!==t[e]&&r.serverInfoObject.difficult[t[e]]&&(h+=m(yield(0,o.getSingleWord)(t[e]),"difficult"));for(let t=0;t<e.length;t++)""!==e[t]&&r.serverInfoObject.deleted[e[t]]&&(d+=m(yield(0,o.getSingleWord)(e[t]),"deleted"));for(let t=0;t<i.length;t++)""!==i[t]&&r.serverInfoObject.learnt[i[t]]&&(u+=m(yield(0,o.getSingleWord)(i[t]),"learnt"));for(let t=0;t<n.length;t++)""!==n[t]&&(g+=m(yield(0,o.getSingleWord)(n[t]),"learning"));function f(t){return t[0].toUpperCase()+t.slice(1)}function m(t,e){let i="";return"difficult"===e?i=`\n        <div class="redoButton" id="difficultHistory-${t.id}"><img src="assets/svg/x.svg"></div>`:"deleted"===e&&(i=`\n        <div class="redoButton" id="garbageHistory-${t.id}"><img src="assets/svg/x.svg"></div>`),`        \n      <div class="card" id="card${e}-${t.id}">\n        <img class="cardImg" src="${o.filesUrl}/${t.image}" alt="${t.word}">\n        <div class="cardInfo">\n          <h2>${f(t.word)} - ${t.transcription}<img class="soundIcon" id="playSound-${t.audio}" src="assets/svg/sound.svg" alt="sound"></h2>\n          <h3>${f(t.wordTranslate)}</h3>\n          <div style="margin-top: 20px">\n            <img class="soundIcon2" id="playSound-${t.audioMeaning}" src="assets/svg/playButton.svg" alt="sound">\n            <span>${t.textMeaning}</span>\n          </div>\n          <span>${t.textMeaningTranslate}</span><br>\n          <div style="margin-top: 20px">\n            <img class="soundIcon2" id="playSound-${t.audioExample}" src="assets/svg/playButton.svg" alt="sound">\n            <span>${t.textExample}</span>\n          </div>\n          <span>${t.textExampleTranslate}</span>\n        </div>\n        ${i}\n      </div>`}return(0,a.hideLoader)(),`\n  <div id="wrapperHistory">\n    <input type="radio" class="historyInput" id="history1" name="history" style="display: none" checked>\n    <label for="history1" class="historyHeader">Сложные слова</label>\n\n    <input type="radio" class="historyInput" id="history2" name="history" style="display: none">\n    <label for="history2" class="historyHeader">Удаленные слова</label>\n\n    <input type="radio" class="historyInput" id="history3" name="history" style="display: none">\n    <label for="history3" class="historyHeader">Изученные слова</label>\n\n    <input type="radio" class="historyInput" id="history4" name="history" style="display: none">\n    <label for="history4" class="historyHeader">Уже встречались</label>\n\n    <div class="historyInner">\n      <div id="difficultWords">${h||"Тут пока ничего нет"}</div> \n      <div id="deletedWords">${d||"Тут пока ничего нет"}</div> \n      <div id="learntWords">${u||"Тут пока ничего нет"}</div> \n      <div id="learning">${g||"Тут пока ничего нет"}</div> \n    </div>\n  </div>\n  `})),afterRender:()=>{(0,s.addFooter)()}}},892:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.homePage=void 0;const n=i(743),s=i(896),o=i(539),r=i(41);e.homePage={render:()=>{const t=document.querySelector("#content").offsetHeight;let e=0;switch(r.storage.currentMainSlide){case 0:e=0;break;case 1:e=-t-10;break;case 2:e=2*(-t-10)}return`\n  <div id="slider" style="transform: translateY(${e}px)">\n    <div id="wrapperAusweis">\n      <div id="wrapperAusweisInner">\n        <a href="#register" id="register">Еще не зарегистрированы?</a>\n        <a href="#whatever" class="undoer">У меня уже есть аккаунт!</a>\n        <div id="nameWrapper" class="inputWrapper">\n          <input type="text" id="name" autocomplete="off" placeholder="Введите имя" required>\n          <div class="validation">Имя обязательно</div>\n        </div>\n        <span id="errorSpan"></span>\n        <div class="inputWrapper">\n          <input type="text" id="mail" placeholder="Введите адрес эл. почты" required>\n          <div class="validation">Адрес должен быть валидным</div>\n        </div>\n        <div class="inputWrapper">\n          <img id="passwordReveal" src="assets/svg/eye-hide.svg" alt="password reveal">\n          <input type="password" id="password" placeholder="Введите пароль" required minlength="8">\n          <div class="validation">Минимум 8 символов</div>\n        </div>\n        <button id="login">Войти</button>\n        <button id="send">Зарегистрироваться</button>\n      </div>\n      <div id="returnFromAusweis"></div>\n    </div>\n    <div id="wrapperHomeAuth" ${r.storage.isAuthorized?'style="display: flex"':'style="display: none"'}>\n      <h1 id="greeting">Привет, ${r.storage.userName}</h1>\n      <div id="grid">\n        <div class="activitySelector">\n          <div id="learnWords"></div>\n          <span>Учить слова</span>\n        </div>\n          <div class="activitySelector">\n          <div id="playGames"></div>\n        <span>Играть в игры</span>\n        </div>\n        <div class="activitySelector">\n          <div id="yourStats"></div>\n          <span>Статистика</span>\n        </div>\n        <div class="activitySelector">\n          <div id="aboutTheProject"></div>\n          <span>О проекте</span>\n        </div>\n        <div class="activitySelector noHover" id="quotesWrapper">\n          <div class="quotes" id="quotesDecoration"></div>\n          <span class="quoteSpan" id="quoteSpan"></span>\n          <span class="quoteSpan" id="authorSpan"></span>\n          <div class="quotes" id="change-quote" >↻</div>\n        </div>\n      </div>\n    </div>\n    <div id="wrapperHome" ${r.storage.isAuthorized?'style="display: none"':'style="display: flex"'}>\n        <h1 id="logo"><span>R</span><span>S</span><span> Lang</span></h1>\n      <div id="homeButtonsWrapper">\n        <button id="homeToRegistration">Регистрация / Вход</button>\n        <button id="homeToAboutPage">О проекте</button>\n      </div>\n    </div>\n    <div id="wrapperAbout">\n      <div id="returnFromAbout" ${2===r.storage.currentMainSlide?'style="opacity: 1"':""}></div>\n      <div id="video">\n        <div id="videoItself">\n          <iframe\n            src="https://www.youtube.com/embed/dQw4w9WgXcQ" \n            title="YouTube video player" \n            frameborder="0" allow="accelerometer; autoplay; \n            clipboard-write; encrypted-media; gyroscope; picture-in-picture" \n            allowfullscreen>\n          </iframe>\n        </div>\n        <h2>Теперь учить английский язык легко и увлекательно!</h2>\n        <span>\n          Учите и запоминайте слова<br>\n          Закрепляйте успех повторением, играя в мини-игры<br>\n          Повторение каждый день для достижения потрясающего результата!\n        </span>\n      </div>\n      <div id="additionalInfo">\n        <h2><img icon2 src="assets/svg/book.svg" alt="book">Учебник</h2>\n        <span>Более 3500 слов, разитых по сложности на разделы с удобной навигацией</span>\n        <h2><img icon2 src="assets/svg/history.svg" alt="history">История</h2>\n        <span>Раздел, содеражащий персональный словарь для повторения именно тех слов, которые являются проблемными\n        и все слова, которые раньше встречались в играх</span>\n        <h2><img icon2 src="assets/svg/gamepad.svg" alt="gamepad">Игры</h2>\n        <span>4 увлекательных игры, которые помогут расширить вокабуляр, улучшить навыки правописания и восприятия  речи на слух</span>\n        <h2><img icon2 src="assets/svg/chart.svg" alt="chart">Статистика</h2>\n        <span>Самые важные показатели вашего прогресса. В удобной форме и наглядно</span>\n      </div>\n    </div>\n  </div>\n  `},afterRender:()=>{(0,s.addFooter)(),(0,o.slider)(),(0,n.getQuotes)(),(0,s.setEnter)()}}},516:function(t,e,i){var n=this&&this.__awaiter||function(t,e,i,n){return new(i||(i=Promise))((function(s,o){function r(t){try{l(n.next(t))}catch(t){o(t)}}function a(t){try{l(n.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,a)}l((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.puzzlePage=void 0;const s=i(441),o=i(41),r=i(744),a=i(448),l=i(896),c=i(597);e.puzzlePage={render:()=>n(void 0,void 0,void 0,(function*(){try{(0,s.showLoader)(),o.storageT.onlyOnePage?yield(0,r.getSinglePageData)():yield(0,r.getData)()}catch(t){console.log("Network error")}finally{(0,s.hideLoader)()}return'\n    <div class="wrapperGames">\n    <div id="quitGame"></div>\n      <div id="wrapper-puzzle">\n        <div id="attempts">\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n        <div id="sockets"></div>\n        <div id="blocks"></div>\n      </div>\n    </div>\n    '})),afterRender:()=>{(0,l.removeFooter)(),o.storageT.currentGameMode="puzzle",o.storageT.endGameResults.right=[],o.storageT.endGameResults.wrong=[],o.storageT.onlyOnePage&&(0,c.addIndicator)(),(0,a.runPuzzle)()}}},922:function(t,e,i){var n=this&&this.__awaiter||function(t,e,i,n){return new(i||(i=Promise))((function(s,o){function r(t){try{l(n.next(t))}catch(t){o(t)}}function a(t){try{l(n.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,a)}l((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.sniperPage=void 0;const s=i(744),o=i(20),r=i(597),a=i(441),l=i(896),c=i(41);e.sniperPage={render:()=>n(void 0,void 0,void 0,(function*(){try{(0,a.showLoader)(),c.storageT.onlyOnePage?yield(0,s.getSinglePageData)():yield(0,s.getData)()}catch(t){console.log("Network error")}finally{(0,a.hideLoader)()}return'\n    <div class="wrapperGames">\n      <div id="quitGame"></div>\n      <div id="wrapper-sniper">\n        <div id="sniperDisplay">\n          <div id="sniperPanorama"></div>\n          <div id="bird">\n          <img id="birdImg" src="assets/img/bird.gif" alt="bird">\n          </div>\n          <div id="sniperRoof"></div>\n          <div id="flag"></div>\n          <span id="sniperWordSpan"></span>\n        </div>\n        <div class="gameOptions" id="sniperOptions"></div>\n      </div>\n    </div>\n    '})),afterRender:()=>{(0,l.removeFooter)(),c.storageT.currentGameMode="sniper",c.storageT.endGameResults.right=[],c.storageT.endGameResults.wrong=[],c.storageT.onlyOnePage&&(0,r.addIndicator)(),(0,o.runSniper)()}}},670:function(t,e,i){var n=this&&this.__awaiter||function(t,e,i,n){return new(i||(i=Promise))((function(s,o){function r(t){try{l(n.next(t))}catch(t){o(t)}}function a(t){try{l(n.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,a)}l((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.sprintPage=void 0;const s=i(824),o=i(744),r=i(41),a=i(441),l=i(870),c=i(896),h=i(597);e.sprintPage={render:()=>n(void 0,void 0,void 0,(function*(){try{(0,a.showLoader)(),r.storageT.onlyOnePage?yield(0,o.getSinglePageData)():yield(0,o.getData)()}catch(t){console.log("Network error")}finally{(0,a.hideLoader)()}return'\n  <div class="wrapperGames">\n    <div id="quitGame"></div>\n    <div id="wrapper-sprint">\n      <div class="timerHolder">\n        <canvas id="timeLeft" width="150" height="150"></canvas>\n        <span id="timeLeftDigits"></span>\n      </div>\n      <span id="sprintWordSpan"></span>\n      <span id="sprintVariantSpan"></span>\n      <div id="sprintButtons"></div>\n    </div>\n  </div>\n  '})),afterRender:()=>{r.storageT.secondsInterval&&clearInterval(r.storageT.secondsInterval),r.storageT.msInterval&&clearInterval(r.storageT.msInterval),r.storageT.currentGameMode="sprint",r.storageT.endGameResults.right=[],r.storageT.endGameResults.wrong=[],(0,c.removeFooter)(),(0,l.timer)(),(0,s.runSprint)(),r.storageT.onlyOnePage&&(0,h.addIndicator)()}}},259:function(t,e,i){var n=this&&this.__awaiter||function(t,e,i,n){return new(i||(i=Promise))((function(s,o){function r(t){try{l(n.next(t))}catch(t){o(t)}}function a(t){try{l(n.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,a)}l((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.statsPage=void 0;const s=i(646),o=i(896),r=i(41);e.statsPage={render:()=>n(void 0,void 0,void 0,(function*(){const t=new Date;t.getDate(),t.getMonth(),t.getFullYear();let e=100*r.statistics.totalRight/(r.statistics.totalRight+r.statistics.totalWrong);return e||(e=0),`\n    <div id="wrapper-stats">\n      <div id="wrapper-stats-circles">\n        <div class="statsCircles"><span id="newWords">${r.statistics.new}</span><div class="statsCirclesInner"></div></div>\n        <div class="statsCircles"><span id="learntWordsStats">${r.statistics.learnt}</span><div class="statsCirclesInner"></div></div>\n        <div class="statsCircles"><span id="percentage">${e.toFixed(0)}%</span><div class="statsCirclesInner"></div></div>\n        <div class="statsCircles"><span id="longestSeries">${r.statistics.inARowMax}</span><div class="statsCirclesInner"></div></div>\n      </div>\n      <div id="wrapper-stats-charts">\n        <div id="chartDaysWrapper">\n          <canvas id="chartDays"></canvas>\n        </div>\n        <div id="chartWordsWrapper">\n          <canvas id="chartWords"></canvas>\n        </div>\n      </div>\n    </div>\n    `})),afterRender:()=>{(0,o.addFooter)(),(0,r.rewriteWholePackage)(),(0,s.createChart)()}}},681:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.rollSetting=e.passwordReveal=e.rollGamesSelector=e.rollSectionSelector=e.rollPageSelector=e.rollMenu=void 0;const n=i(41);e.rollMenu=function(t){const e=document.querySelector("#openMenuButton"),i=document.querySelector("#navigationMenu"),s=document.querySelector("#upperBar"),o=document.querySelector("#logoMain");"open"!==t||n.storageT.isMenuOpen?(e.style.transform="translateX(0%)",s.style.width="calc(100vw - 70px)",i.style.width="70px",o.style.transform="translateX(0%)",n.storageT.isMenuOpen=!1):(e.style.transform="translateX(-100%)",s.style.width="calc(100vw - 260px)",i.style.width="260px",o.style.transform="translateX(-120%)",n.storageT.isMenuOpen=!0)},e.rollPageSelector=function(t){const e=document.querySelector(".wrapper");if(n.storageT.isPageListOpen||"open"!==t){if(n.storageT.isPageListOpen){const t=document.querySelector(".pageList");null==e||e.removeChild(t),n.storageT.isPageListOpen=!1}}else{const t=document.createElement("div");t.classList.add("pageList");for(let e=0;e<n.storageT.totalPages;e++){const i=document.createElement("div");i.classList.add("pageListOption"),i.id=`pageListOption-${e}`,i.innerText=`Страница ${e+1}`,t.appendChild(i)}null==e||e.appendChild(t),n.storageT.isPageListOpen=!0}},e.rollSectionSelector=function(t){const e=document.querySelector(".wrapper");if(n.storageT.isGroupListOpen||"open"!==t){if(n.storageT.isGroupListOpen){const t=document.querySelector(".sectionList");null==e||e.removeChild(t),n.storageT.isGroupListOpen=!1}}else{const t=document.createElement("div");t.classList.add("sectionList");for(let e=0;e<n.storageT.totalGroups;e++){const i=document.createElement("div");i.classList.add("sectionListOption"),i.id=`sectionListOption-${e}`,i.innerText=`Раздел ${e+1}`,t.appendChild(i)}n.storageT.isGroupListOpen=!0,null==e||e.appendChild(t)}},e.rollGamesSelector=function(t){const e=document.querySelector(".wrapper");if(n.storageT.isGamesListOpen||"open"!==t){if(n.storageT.isGamesListOpen){const t=document.querySelector(".gamesList");null==e||e.removeChild(t),n.storageT.isGamesListOpen=!1}}else{const t=document.createElement("div");let i,s;t.classList.add("gamesList"),function(t){t[t["Аудио"]=0]="Аудио",t[t["Спринт"]=1]="Спринт",t[t["Снайпер"]=2]="Снайпер",t[t["Пазл"]=3]="Пазл"}(i||(i={})),function(t){t[t.audio=0]="audio",t[t.sprint=1]="sprint",t[t.sniper=2]="sniper",t[t.puzzle=3]="puzzle"}(s||(s={}));for(let e=0;e<n.storageT.totalGames;e++){const n=document.createElement("div");n.classList.add("gamesListOption"),n.id=`gamesListOption-${s[e]}`,n.innerText=`${i[e]}`,t.appendChild(n)}n.storageT.isGamesListOpen=!0,null==e||e.appendChild(t)}},e.passwordReveal=function(){const t=document.querySelector("#passwordReveal"),e=document.querySelector("#password");"password"===e.type?(e.type="text",t.src="assets/svg/eye-show.svg"):(e.type="password",t.src="assets/svg/eye-hide.svg")},e.rollSetting=function(t){const e=document.querySelector(".settingsList");n.storageT.isSettingsListOpen||"open"!==t?n.storageT.isSettingsListOpen&&(e.classList.remove("descend"),n.storageT.isSettingsListOpen=!1):(e.classList.add("descend"),n.storageT.isSettingsListOpen=!0)}},18:function(t,e,i){var n=this&&this.__awaiter||function(t,e,i,n){return new(i||(i=Promise))((function(s,o){function r(t){try{l(n.next(t))}catch(t){o(t)}}function a(t){try{l(n.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,a)}l((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.router=void 0;const s=i(892),o=i(160),r=i(347),a=i(344),l=i(259),c=i(722),h=i(859),d=i(41),u=i(670),g=i(907),p=i(441),f=i(922),m=i(743),b=i(516),v=document.querySelector("#content"),y={home:s.homePage,book:o.bookPage,history:r.historyPage,games:a.gamesPage,stats:l.statsPage,comments:c.commentsPage,audio:h.audioChallengePage,sprint:u.sprintPage,sniper:f.sniperPage,redirect:g.redirectPage,puzzle:b.puzzlePage};e.router=(t,e)=>n(void 0,void 0,void 0,(function*(){function i(t,e){return n(this,void 0,void 0,(function*(){(0,p.hideLoader)();let i=(t=>y[t]||null)(t);if(d.storage.currentPage=t,d.storageT.onlyOnePage=!!e,i&&v){const e=yield i.render();d.storage.currentPage===t&&(v.innerHTML=e,i.afterRender&&i.afterRender())}}))}d.storage.isAuthorized?(0,m.getUserSettings)().then((()=>(0,m.getUserStatistics)())).then((()=>n(void 0,void 0,void 0,(function*(){i(t,e)})))):i(t,e)}))},743:function(t,e,i){var n=this&&this.__awaiter||function(t,e,i,n){return new(i||(i=Promise))((function(s,o){function r(t){try{l(n.next(t))}catch(t){o(t)}}function a(t){try{l(n.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,a)}l((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.getUserStatistics=e.putUserStatisticsInit=e.putUserStatistics=e.getUserSettings=e.putUserSettings=e.getQuotes=e.handleLogin=e.register=e.registerUser=e.authorize=e.getAllWords=e.getWords=e.getSingleWord=e.filesUrl=void 0;const s=i(441),o=i(539),r=i(41),a=i(623),l=i(896),c="https://rs-lang-redblooded.herokuapp.com";e.filesUrl="https://raw.githubusercontent.com/vladimirparmon/react-rslang-be/master";const h=`${c}/words`,d=`${c}/users`,u=`${c}/signin`;function g(t,e){return n(this,void 0,void 0,(function*(){let i;try{i=yield(c={email:t,password:e},n(void 0,void 0,void 0,(function*(){return document.querySelector("#errorSpan"),yield fetch(u,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(c)}).then((t=>{if(t.ok)return t.json();t.text().then((t=>{"C"===t.slice(0,1)?m("Неверный адрес эл. почты"):m("Неверный пароль")}))})).catch((t=>{m("Нет соединения с интернетом или сервер не отвечает")}))})))}finally{i&&((0,s.hideLoader)(),r.storage.isAuthorized=!0,r.storage.userId=i.userId,r.storage.token=i.token,r.storage.userName=i.name,document.querySelector("#greeting").innerHTML=`Привет, ${r.storage.userName}`,(0,l.adjustStatsButton)(!0),(0,a.adjustLoginButton)(),(0,o.slider)("main"))}var c}))}function p(t){return n(this,void 0,void 0,(function*(){return document.querySelector("#errorSpan"),yield fetch(d,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(t)}).then((t=>{if(t.ok)return t.json();417===t.status?m("Адрес эл. почты уже занят"):t.text().then((t=>{-1!==t.search(/mail/)?m("Адрес эл. почты должен быть валидным"):-1!==t.search(/name/)?m("Имя не должно быть пустым"):-1!==t.search(/password/)&&m("Пароль не должен быть короче 8 символов")}))})).catch((t=>{m("Нет соединения с интернетом или сервер не отвечает")}))}))}function f(t,e,i){return n(this,void 0,void 0,(function*(){let n;(0,s.showLoader)();try{n=yield p({name:t,email:e,password:i})}finally{n&&g(e,i)}}))}function m(t){const e=document.querySelector("#errorSpan");e.textContent=t,e.style.opacity="1",setTimeout((()=>{e.style.opacity="0"}),1e3),(0,s.hideLoader)()}e.getSingleWord=t=>n(void 0,void 0,void 0,(function*(){const e=yield fetch(`${h}/${t}`);return yield e.json()})),e.getWords=(t,e)=>n(void 0,void 0,void 0,(function*(){const i=yield fetch(`${h}?group=${t}&page=${e}`);return yield i.json()})),e.getAllWords=(t,i)=>n(void 0,void 0,void 0,(function*(){let n=[];if(i){const i=(yield(0,e.getWords)(t,r.storage.bookPage)).map((t=>({id:t.id,word:t.word,translate:t.wordTranslate,audio:t.audio,image:t.image,transcription:t.transcription})));n.push(...i)}else for(let i=0;i<r.storageT.totalPages;i++){const s=(yield(0,e.getWords)(t,i)).map((t=>({id:t.id,word:t.word,translate:t.wordTranslate,audio:t.audio,image:t.image,transcription:t.transcription})));n.push(...s)}return n})),e.authorize=g,e.registerUser=p,e.register=f,e.handleLogin=function(t){const e=document.querySelector("#name"),i=document.querySelector("#mail"),n=document.querySelector("#password"),s=e.value,o=i.value,r=n.value;"login"===t?g(o,r):f(s,o,r)},e.getQuotes=function t(){return n(this,void 0,void 0,(function*(){const e=document.querySelector("#quoteSpan"),i=document.querySelector("#authorSpan"),n=document.querySelector("#change-quote"),s=yield fetch("https://favqs.com/api/qotd"),o=yield s.json();e&&i&&setTimeout((()=>{e.textContent=o.quote.body,i.textContent=o.quote.author}),400),null==n||n.addEventListener("click",(()=>{t()}),{once:!0}),e.classList.add("sideSlide"),i.classList.add("sideSlide2"),i.addEventListener("animationend",(()=>{e.classList.remove("sideSlide"),i.classList.remove("sideSlide2")}))}))},e.putUserSettings=()=>n(void 0,void 0,void 0,(function*(){yield fetch(`${d}/${r.storage.userId}/settings`,{method:"PUT",headers:{Authorization:`Bearer ${r.storage.token}`,Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({optional:{deleted:r.serverInfoObject.deleted,difficult:r.serverInfoObject.difficult,learnt:r.serverInfoObject.learnt,howManyInARow:r.serverInfoObject.howManyInARow,howManyRight:r.serverInfoObject.howManyRight,howManyWrong:r.serverInfoObject.howManyWrong}})})})),e.getUserSettings=()=>n(void 0,void 0,void 0,(function*(){yield fetch(`${d}/${r.storage.userId}/settings`,{method:"GET",headers:{Authorization:`Bearer ${r.storage.token}`,Accept:"application/json","Content-Type":"application/json"}}).then((t=>n(void 0,void 0,void 0,(function*(){if(t.ok){const e=yield t.json();e.optional&&(0,r.rewriteServerInfo)(e.optional)}else 404===t.status&&(0,e.putUserSettings)()}))))})),e.putUserStatistics=()=>n(void 0,void 0,void 0,(function*(){yield fetch(`${d}/${r.storage.userId}/statistics`,{method:"PUT",headers:{Authorization:`Bearer ${r.storage.token}`,Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({optional:r.wholePackage})})})),e.putUserStatisticsInit=()=>n(void 0,void 0,void 0,(function*(){const t=(0,l.getDate)();yield fetch(`${d}/${r.storage.userId}/statistics`,{method:"PUT",headers:{Authorization:`Bearer ${r.storage.token}`,Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({optional:{[t]:r.statistics}})})})),e.getUserStatistics=()=>n(void 0,void 0,void 0,(function*(){let t;if(yield fetch(`${d}/${r.storage.userId}/statistics`,{method:"GET",headers:{Authorization:`Bearer ${r.storage.token}`,Accept:"application/json","Content-Type":"application/json"}}).then((i=>n(void 0,void 0,void 0,(function*(){i.ok?(t=yield i.json(),t.optional&&(0,r.rewriteStatistics)(t.optional)):404===i.status&&(0,e.putUserStatisticsInit)()})))),t)return t}))},646:function(t,e,i){var n=this&&this.__awaiter||function(t,e,i,n){return new(i||(i=Promise))((function(s,o){function r(t){try{l(n.next(t))}catch(t){o(t)}}function a(t){try{l(n.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,a)}l((n=n.apply(t,e||[])).next())}))},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.createChart=void 0;const o=s(i(403)),r=i(41);e.createChart=function(){return n(this,void 0,void 0,(function*(){const t=document.getElementById("chartDays").getContext("2d"),e=document.getElementById("chartWords").getContext("2d");!function(){let i,n=[],s=[],a=[];!function(t){t[t["января"]=1]="января",t[t["февраля"]=2]="февраля",t[t["марта"]=3]="марта",t[t["апреля"]=4]="апреля",t[t["мая"]=5]="мая",t[t["июня"]=6]="июня",t[t["июля"]=7]="июля",t[t["августа"]=8]="августа",t[t["сентября"]=9]="сентября",t[t["октября"]=10]="октября",t[t["ноября"]=11]="ноября",t[t["декабря"]=12]="декабря"}(i||(i={}));let l=0;for(let t in r.wholePackage){l+=r.wholePackage[t].new,n.push(l),s.push(r.wholePackage[t].new);const e=t.split("-"),o=Number(e[1]),c=(Number(e[0]),i[o]),h=e[0]+" "+c;a.push(h);const d=new Date;for(let t=1;t<5;t++){d.setDate(d.getDate()+1);const t=d.getDate()+" "+i[d.getMonth()+1];a.push(t)}}new o.default(t,{type:"line",data:{labels:a,datasets:[{label:"Прирост слов по дням",data:n,fill:!1,backgroundColor:"#a9a9a9",borderColor:"#474554",pointRadius:5,pointHoverRadius:7}]},options:{color:"#000",responsive:!0,maintainAspectRatio:!1,plugins:{legend:{labels:{boxWidth:0,font:{size:24,family:"Roboto, sans-serif"}}}},scales:{x:{ticks:{color:"#000"}},y:{ticks:{color:"#000"}}}}}),new o.default(e,{type:"bar",data:{labels:a,datasets:[{label:"Количество новых слов",data:s,backgroundColor:["rgba(197, 194, 213, 0.8)","rgb(255, 189, 168, 0.8)","rgba(148, 181, 174, 0.8)"],borderColor:["rgba(197, 194, 213, 1)","rgb(255, 189, 168, 1)","rgba(148, 181, 174, 1)"],borderWidth:1}]},options:{color:"#000",responsive:!0,maintainAspectRatio:!1,plugins:{legend:{labels:{boxWidth:0,font:{size:24,family:"Roboto, sans-serif"}}}},scales:{x:{ticks:{color:"#000"}},y:{ticks:{color:"#000"}}}}})}()}))}},404:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.checkChoice=e.checkKeys=void 0;const n=i(41),s=i(397),o=i(896);function r(t){const e=document.querySelector(`#gameOption-${t}`),i=document.querySelector(".gameOptions");i&&(i.style.pointerEvents="none"),e&&(e.style.transform="scale(1.07)");const o=new Audio;if(document.querySelector(`#wrapper-${n.storageT.currentGameMode}`)){if(t===n.storageT.rightAnswer.id){"sniper"===n.storageT.currentGameMode&&(n.storageT.currentBirdStatus="dead");const t=n.serverInfoObject.howManyInARow[n.storageT.rightAnswer.id]||0;(0,n.manageServerInfo)(n.storageT.rightAnswer.id,"howManyInARow","raise",(t+1).toString());const i=n.serverInfoObject.howManyRight[n.storageT.rightAnswer.id]||0;(0,n.manageServerInfo)(n.storageT.rightAnswer.id,"howManyRight","raise",(i+1).toString()),n.storageT.endGameResults.right.push(n.storageT.rightAnswer),o.src="./assets/sounds/rightAnswer.mp3",e&&(e.style.backgroundColor="var(--trio3)")}else{"sniper"===n.storageT.currentGameMode&&(n.storageT.currentBirdStatus="escaped"),(0,n.manageServerInfo)(n.storageT.rightAnswer.id,"howManyInARow","lower","0");const t=n.serverInfoObject.howManyWrong[n.storageT.rightAnswer.id]||0;(0,n.manageServerInfo)(n.storageT.rightAnswer.id,"howManyWrong","raise",(t+1).toString()),n.storageT.endGameResults.wrong.push(n.storageT.rightAnswer),o.src="./assets/sounds/wrongAnswer.mp3",e&&(e.style.backgroundColor="var(--wrong)")}if(o.play(),"sniper"===n.storageT.currentGameMode&&"invalid"!==t){const t=new Audio;t.src="assets/sounds/gunshot.mp3",t.play(),console.log("check")}t&&"audio"===n.storageT.currentGameMode&&(0,s.runAudioAnimation)(t)}}e.checkKeys=function(t){const e=document.querySelector(".wrapperGames"),i=+t.slice(-1)-1;e&&i<5&&(window.removeEventListener("keyup",o.checkFor),r(n.storageT.currentOptions[i]))},e.checkChoice=r},15:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.endGame=void 0;const n=i(41),s=i(744),o=i(870),r=i(824),a=i(397),l=i(18),c=i(20),h=i(597),d=i(448);e.endGame=function(){const t=document.querySelector(".wrapperGames");if(t){const e=new Audio;e.src="assets/sounds/roundEnded.mp3",e.play(),n.storageT.onlyOnePage&&((0,s.getSinglePageData)(),n.storageT.secondsInterval&&clearInterval(n.storageT.secondsInterval),n.storageT.msInterval&&clearInterval(n.storageT.msInterval));const i=document.createElement("div");i.id="resultsWrapper";const u=`#wrapper-${n.storageT.currentGameMode}`,g=document.querySelector(u);g.style.pointerEvents="none",g.style.opacity="0.5";const p=document.createElement("div");p.id="results";const f=document.createElement("div"),m=document.createElement("div"),b=document.createElement("h2"),v=document.createElement("h2");b.textContent="Правильные ответы:",v.textContent="Неправильные ответы:",f.appendChild(b),m.appendChild(v),0!==n.storageT.endGameResults.right.length?n.storageT.endGameResults.right.forEach((t=>{const e=`\n          <div class="resultsOption">\n            <img src="assets/svg/sound.svg" alt="audio" id="playSound-${t.audio}">\n            <span><b>${t.word}</b> – ${t.translate}</span>\n          </div>\n          `;f.innerHTML+=e})):f.innerHTML+="Нет правильных ответов :(",0!==n.storageT.endGameResults.wrong.length?n.storageT.endGameResults.wrong.forEach((t=>{const e=`\n          <div class="resultsOption">\n            <img src="assets/svg/sound.svg" alt="audio" id="playSound-${t.audio}">\n            <span><b>${t.word}</b> – ${t.translate}</span>\n          </div>\n          `;m.innerHTML+=e})):m.innerHTML+="Нет неправильных ответов!",null==p||p.appendChild(f),null==p||p.appendChild(m),i.appendChild(p);const y=document.createElement("div");y.id="resultsButtonsWrapper";const x=document.createElement("button");x.textContent="Играть снова",x.addEventListener("click",(()=>{switch(n.storageT.initialGameQueueLength=n.storageT.currentGameQueue.length,n.storageT.onlyOnePage&&(0,h.updateIndicator)(),null==t||t.removeChild(i),g.style.opacity="1",g.style.pointerEvents="all",n.storageT.endGameResults.right=[],n.storageT.endGameResults.wrong=[],n.storageT.onlyOnePage?(0,s.getSinglePageData)():(0,s.getData)(),n.storageT.currentGameMode){case"audio":(0,a.runAudioGame)();break;case"sprint":(0,o.timer)(),(0,r.runSprint)();break;case"Puzzle":(0,d.runPuzzle)();break;case"sniper":(0,c.runSniper)()}}),{once:!0});const _=document.createElement("button");_.textContent="Выйти",_.addEventListener("click",(()=>{null==t||t.removeChild(i),n.storageT.endGameResults.right=[],n.storageT.endGameResults.wrong=[],(0,l.router)("home")}),{once:!0}),y.appendChild(x),y.appendChild(_),i.appendChild(y),null==t||t.appendChild(i)}}},597:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.updateIndicator=e.removeIndicator=e.addIndicator=void 0;const n=i(41);e.addIndicator=function(){const t=document.querySelector("#content"),e=document.createElement("div");e.id="indicator",null==t||t.appendChild(e),n.storageT.initialGameQueueLength=n.storageT.currentGameQueue.length},e.removeIndicator=function(){const t=document.querySelector("#content"),e=document.querySelector("#indicator");t&&e&&t.removeChild(e)},e.updateIndicator=function(){const t=document.querySelector("#indicator"),e=100*(n.storageT.initialGameQueueLength-n.storageT.currentGameQueue.length)/n.storageT.initialGameQueueLength;t.style.backgroundImage=`linear-gradient(to right, var(--action) ${e}%, var(--trio3) ${e}%)`}},441:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.hideLoader=e.showLoader=void 0,e.showLoader=function(){const t=document.querySelector("body"),e=document.createElement("div");e.classList.add("loader"),null==t||t.appendChild(e)},e.hideLoader=function(){const t=document.querySelector("body"),e=document.querySelector(".loader");t&&e&&t.removeChild(e)}},894:(t,e)=>{function i(t){const{top:e,left:i,width:n,height:s}=t.getBoundingClientRect();return{x:i+n/2,y:e+s/2}}Object.defineProperty(e,"__esModule",{value:!0}),e.getDistanceBetweenElements=void 0,e.getDistanceBetweenElements=function(t,e){const n=i(t),s=i(e);return Math.hypot(n.x-s.x,n.y-s.y)}},896:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.setEnter=e.adjustStatsButton=e.getDate=e.inGameStats=e.removeFooter=e.addFooter=e.checkFor=e.shuffleStrings=e.shuffle=e.capitalize=e.getRandomInt=void 0;const n=i(41),s=i(404),o=i(743);e.getRandomInt=function(t,e){return t=Math.ceil(t),e=Math.floor(e),Math.floor(Math.random()*(e-t+1))+t},e.capitalize=function(t){return t[0].toUpperCase()+t.slice(1)},e.shuffle=function(t){for(let e=t.length-1;e>0;e--){let i=Math.floor(Math.random()*(e+1));[t[e],t[i]]=[t[i],t[e]]}return t},e.shuffleStrings=function(t){let e=[...t];for(let t=e.length-1;t>0;t--){let i=Math.floor(Math.random()*(t+1));[e[t],e[i]]=[e[i],e[t]]}return e},e.checkFor=function(t){(0,s.checkKeys)(t.code)},e.addFooter=function(){const t=document.querySelector("body");if(!document.querySelector("footer")&&t){const e=document.createElement("footer");e.innerHTML="\n      <span onclick=\"window.open('https://ru.wikipedia.org/wiki/2022_%D0%B3%D0%BE%D0%B4','mywindow')\">2022</span> \n      <span onclick=\"window.open('https://github.com/VladimirParmon','mywindow')\">Vladimir Parmon</span>\n      <img onclick=\"window.open('https://rs.school/js/','mywindow')\" src=\"assets/svg/rs_school_js.svg\" alt=\"rsSchool\">\n    ",t.appendChild(e)}},e.removeFooter=function(){const t=document.querySelector("body"),e=document.querySelector("footer");t&&e&&t.removeChild(e)},e.inGameStats=function(){const t=n.serverInfoObject.howManyInARow[n.storageT.rightAnswer.id]?n.serverInfoObject.howManyInARow[n.storageT.rightAnswer.id]:0,e=n.serverInfoObject.difficult[n.storageT.rightAnswer.id];return`\n  <div class="inARowIndicators">\n    <div style="background-color:${t>0?"var(--trio3)":"var(--header)"}"></div>\n    <div style="background-color:${t>1?"var(--trio3)":"var(--header)"}"></div>\n    <div style="background-color:${t>2?"var(--trio3)":"var(--header)"}"></div>\n    <div style="display:${e?"block":"none"}; background-color:${t>3?"var(--trio3)":"var(--header)"}"></div>\n    <div style="display:${e?"block":"none"}; background-color:${t>4?"var(--trio3)":"var(--header)"}"></div>\n  </div>\n  <span class="inGameStatsSpanDifficult" style="opacity:${e?"1":"0"}">Сложное слово</span>\n  <span class="inGameStatsSpanLearnt" style="opacity:${n.serverInfoObject.learnt[n.storageT.rightAnswer.id]?"1":"0"}">Изученное слово</span>\n  `},e.getDate=function(){const t=new Date;return t.setDate(t.getDate()),t.getDate()+"-"+(t.getMonth()+1)+"-"+t.getFullYear()},e.adjustStatsButton=function(t){const e=document.querySelector("#goStats"),i=document.querySelector("#goHistory");t?(e.style.pointerEvents="all",e.style.opacity="1",i.style.pointerEvents="all",i.style.opacity="1"):(e.style.pointerEvents="none",e.style.opacity="0.4",i.style.pointerEvents="none",i.style.opacity="0.4")},e.setEnter=function(){const t=document.querySelector("#login");document.addEventListener("keyup",(e=>{"Enter"===e.code&&("none"!==t.style.display?(0,o.handleLogin)("login"):(0,o.handleLogin)("register"))}))}},655:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.playSound=void 0;const n=i(743);e.playSound=function(t){const e=new Audio;e.src=`${n.filesUrl}/${t}`,e.play()}},539:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.slider=void 0;const n=i(41);e.slider=function(t){const e=document.querySelector("#slider"),i=document.querySelector("#wrapperAusweis"),s=document.querySelector("#wrapperHome"),o=document.querySelector("#wrapperHomeAuth"),r=document.querySelector("#homeToRegistration"),a=document.querySelector("#homeToAboutPage"),l=document.querySelector("#aboutTheProject"),c=document.querySelector("#returnFromAusweis"),h=document.querySelector("#returnFromAbout");function d(){e.style.transform="translateY(0%)",setTimeout((()=>{c.style.opacity="1"}),1500),n.storage.currentMainSlide=0}function u(){const t=i.offsetHeight;e.style.transform=`translateY(-${t}px)`,c.style.opacity="0",h.style.opacity="0",n.storage.currentMainSlide=1}function g(){const t=i.offsetHeight;e.style.transform=`translateY(-${2*t}px)`,setTimeout((()=>{h.style.opacity="1"}),1500),n.storage.currentMainSlide=2}t?"main"===t?(s.style.display="none",o.style.display="flex",u()):d():(null==r||r.addEventListener("click",d),null==a||a.addEventListener("click",g),null==l||l.addEventListener("click",g),null==c||c.addEventListener("click",u),h.addEventListener("click",u))}},41:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.storage=e.storageObject=e.storageT=e.statistics=e.rewriteStatistics=e.rewriteWholePackage=e.wholePackage=e.rewriteServerInfo=e.manageServerInfo=e.serverInfoObject=void 0;const n=i(743),s=i(896);function o(){const t=(0,s.getDate)();e.wholePackage[t]=e.statistics}e.serverInfoObject={deleted:{"":!0},difficult:{"":!0},learnt:{"":!0},howManyInARow:{"":0},howManyRight:{"":0},howManyWrong:{"":0}},e.manageServerInfo=function(t,i,s,r){(function(){const i=Object.keys(e.serverInfoObject).length;let n=0;for(let i in e.serverInfoObject){const s=i;Object.keys(e.serverInfoObject[s]).includes(t)||n++}return i===n})()&&(e.statistics.new=e.statistics.new+1),"add"===s?("learnt"!==i||Object.keys(e.serverInfoObject[i]).includes(t)||(e.statistics.learnt=e.statistics.learnt+1),e.serverInfoObject[i][t]=!0):"remove"===s?e.serverInfoObject[i][t]=!1:r&&("raise"===s&&("howManyRight"===i?e.statistics.totalRight=e.statistics.totalRight+1:"howManyWrong"===i&&(e.statistics.totalWrong=e.statistics.totalWrong+1)),e.serverInfoObject[i][t]=Number(r),"raise"===s&&"howManyInARow"===i&&(e.statistics.inARowMax=e.statistics.inARowMax+1),"raise"===s&&"howManyInARow"===i&&(+r>=3&&!e.serverInfoObject.difficult[t]||+r>=5)?e.serverInfoObject.learnt[t]=!0:"lower"===s&&(Object.keys(e.serverInfoObject.learnt).includes(t)&&(e.serverInfoObject.learnt[t]=!1),e.serverInfoObject.howManyInARow[t]=0,e.statistics.inARowMax=0)),o(),(0,n.putUserSettings)(),(0,n.putUserStatistics)()},e.rewriteServerInfo=function(t){e.serverInfoObject=t},e.wholePackage={},e.rewriteWholePackage=o,e.rewriteStatistics=function(t){let i=Object.keys(t),n=Object.values(t);const o=(0,s.getDate)();i.forEach(((t,i)=>{e.wholePackage[t]=n[i]})),e.wholePackage[o]=e.statistics,t[o]&&(e.statistics=t[o])},e.statistics={totalRight:0,totalWrong:0,inARowMax:0,learnt:0,new:0},e.storageT={totalGroups:6,totalGames:4,totalPages:30,itemsPerGroup:20,timeLimit:30,isPageListOpen:!1,isGroupListOpen:!1,isGamesListOpen:!1,isSettingsListOpen:!1,isMenuOpen:!1,currentGameQueue:[],currentDifficulty:0,currentOptions:[],workingArray:[],onlyOnePage:!1,onlyOnePageTemplate:[],singleVariant:{id:"",word:"",translate:"",image:"",audio:"",transcription:""},rightAnswer:{id:"",word:"",translate:"",image:"",audio:"",transcription:""},endGameResults:{right:[],wrong:[]},currentGameMode:"",initialGameQueueLength:0,animation:0,currentBirdStatus:"flies"},e.storageObject={bookGroup:0,bookPage:0,difficultyLevels:{},currentPage:"home",markedDifficult:[],markedDeleted:[],currentMainSlide:1},e.storage=new Proxy(e.storageObject,{set:function(t,e,i){return"bookGroup"!==e&&"bookPage"!==e&&"currentMainSlide"!==e||(t[e]=i),"isAuthorized"===e&&(t[e]=i),"userId"!==e&&"token"!==e&&"userName"!==e&&"markedDifficult"!==e&&"markedDeleted"!==e&&"currentPage"!==e||(t[e]=i),localStorage.setItem("myStorage",JSON.stringify(t)),!0}});const r=localStorage.getItem("myStorage");if(null!==r){const t=JSON.parse(r),i=Object.entries(t);for(let t=0;t<i.length;t++){const n=i[t][0],s=i[t][1];"bookGroup"!==n&&"bookPage"!==n&&"currentMainSlide"!==n||"number"!=typeof s?"isAuthorized"===n&&"boolean"==typeof s?e.storage[n]=s:"userId"!==n&&"token"!==n&&"userName"!==n&&"currentPage"!==n||"string"!=typeof s?("markedDifficult"===n||"markedDeleted"===n)&&Array.isArray(s)&&s.every((t=>"string"==typeof t))&&(e.storage[n]=s):e.storage[n]=s:e.storage[n]=s}}},870:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.timer=void 0;const n=i(15),s=i(41);e.timer=function(){const t=document.querySelector("#timeLeft").getContext("2d"),e=document.querySelector("#timeLeftDigits");t.lineCap="round";a();const i=1e3*s.storageT.timeLimit;let o=i,r=s.storageT.timeLimit;function a(){t.clearRect(0,0,150,150)}e.innerHTML=r.toString(),s.storageT.secondsInterval=setInterval((()=>{o>=0?(r--,e.innerHTML=r.toString()):(s.storageT.secondsInterval&&clearInterval(s.storageT.secondsInterval),document.querySelector("#wrapper-sprint")&&(0,n.endGame)())}),1e3),s.storageT.msInterval=setInterval((()=>{const e=document.querySelector("#wrapper-sprint");o>=0&&e?(a(),t.strokeStyle="#474554",t.lineWidth=1,t.beginPath(),t.arc(75,75,71,0,2*Math.PI),t.stroke(),t.strokeStyle="#474554",t.lineWidth=8,t.beginPath(),t.arc(75,75,71,Math.PI/-2,2*Math.PI/i*o+Math.PI/-2,!1),t.stroke(),o-=10):s.storageT.msInterval&&clearInterval(s.storageT.msInterval)}),10)}}},e={};function i(n){var s=e[n];if(void 0!==s)return s.exports;var o=e[n]={exports:{}};return t[n].call(o.exports,o,o.exports,i),o.exports}i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i(623)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,